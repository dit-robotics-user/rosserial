
rosserial2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061b0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000344  0800635c  0800635c  0001635c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066a0  080066a0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080066a0  080066a0  000166a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066a8  080066a8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080066a8  080066a8  000166a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066b0  080066b0  000166b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080066b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000984  20000078  0800672c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009fc  0800672c  000209fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017af8  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002de1  00000000  00000000  00037ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  0003a988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f50  00000000  00000000  0003b9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000256c4  00000000  00000000  0003c8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e2f  00000000  00000000  00061fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1463  00000000  00000000  00072deb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015424e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004890  00000000  00000000  001542a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000078 	.word	0x20000078
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006344 	.word	0x08006344

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000007c 	.word	0x2000007c
 80001e8:	08006344 	.word	0x08006344

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b96e 	b.w	80004f0 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468c      	mov	ip, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	f040 8083 	bne.w	8000342 <__udivmoddi4+0x116>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d947      	bls.n	80002d2 <__udivmoddi4+0xa6>
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	b142      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000248:	f1c2 0020 	rsb	r0, r2, #32
 800024c:	fa24 f000 	lsr.w	r0, r4, r0
 8000250:	4091      	lsls	r1, r2
 8000252:	4097      	lsls	r7, r2
 8000254:	ea40 0c01 	orr.w	ip, r0, r1
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbbc f6f8 	udiv	r6, ip, r8
 8000264:	fa1f fe87 	uxth.w	lr, r7
 8000268:	fb08 c116 	mls	r1, r8, r6, ip
 800026c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000270:	fb06 f10e 	mul.w	r1, r6, lr
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800027e:	f080 8119 	bcs.w	80004b4 <__udivmoddi4+0x288>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8116 	bls.w	80004b4 <__udivmoddi4+0x288>
 8000288:	3e02      	subs	r6, #2
 800028a:	443b      	add	r3, r7
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0f8 	udiv	r0, r3, r8
 8000294:	fb08 3310 	mls	r3, r8, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a0:	45a6      	cmp	lr, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	193c      	adds	r4, r7, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002aa:	f080 8105 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 80002ae:	45a6      	cmp	lr, r4
 80002b0:	f240 8102 	bls.w	80004b8 <__udivmoddi4+0x28c>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002bc:	eba4 040e 	sub.w	r4, r4, lr
 80002c0:	2600      	movs	r6, #0
 80002c2:	b11d      	cbz	r5, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c5 4300 	strd	r4, r3, [r5]
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	b902      	cbnz	r2, 80002d6 <__udivmoddi4+0xaa>
 80002d4:	deff      	udf	#255	; 0xff
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d150      	bne.n	8000380 <__udivmoddi4+0x154>
 80002de:	1bcb      	subs	r3, r1, r7
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f f887 	uxth.w	r8, r7
 80002e8:	2601      	movs	r6, #1
 80002ea:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ee:	0c21      	lsrs	r1, r4, #16
 80002f0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002f8:	fb08 f30c 	mul.w	r3, r8, ip
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000300:	1879      	adds	r1, r7, r1
 8000302:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0xe2>
 8000308:	428b      	cmp	r3, r1
 800030a:	f200 80e9 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 800030e:	4684      	mov	ip, r0
 8000310:	1ac9      	subs	r1, r1, r3
 8000312:	b2a3      	uxth	r3, r4
 8000314:	fbb1 f0fe 	udiv	r0, r1, lr
 8000318:	fb0e 1110 	mls	r1, lr, r0, r1
 800031c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000320:	fb08 f800 	mul.w	r8, r8, r0
 8000324:	45a0      	cmp	r8, r4
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x10c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x10a>
 8000330:	45a0      	cmp	r8, r4
 8000332:	f200 80d9 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 8000336:	4618      	mov	r0, r3
 8000338:	eba4 0408 	sub.w	r4, r4, r8
 800033c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000340:	e7bf      	b.n	80002c2 <__udivmoddi4+0x96>
 8000342:	428b      	cmp	r3, r1
 8000344:	d909      	bls.n	800035a <__udivmoddi4+0x12e>
 8000346:	2d00      	cmp	r5, #0
 8000348:	f000 80b1 	beq.w	80004ae <__udivmoddi4+0x282>
 800034c:	2600      	movs	r6, #0
 800034e:	e9c5 0100 	strd	r0, r1, [r5]
 8000352:	4630      	mov	r0, r6
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	fab3 f683 	clz	r6, r3
 800035e:	2e00      	cmp	r6, #0
 8000360:	d14a      	bne.n	80003f8 <__udivmoddi4+0x1cc>
 8000362:	428b      	cmp	r3, r1
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0x140>
 8000366:	4282      	cmp	r2, r0
 8000368:	f200 80b8 	bhi.w	80004dc <__udivmoddi4+0x2b0>
 800036c:	1a84      	subs	r4, r0, r2
 800036e:	eb61 0103 	sbc.w	r1, r1, r3
 8000372:	2001      	movs	r0, #1
 8000374:	468c      	mov	ip, r1
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0a8      	beq.n	80002cc <__udivmoddi4+0xa0>
 800037a:	e9c5 4c00 	strd	r4, ip, [r5]
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0xa0>
 8000380:	f1c2 0320 	rsb	r3, r2, #32
 8000384:	fa20 f603 	lsr.w	r6, r0, r3
 8000388:	4097      	lsls	r7, r2
 800038a:	fa01 f002 	lsl.w	r0, r1, r2
 800038e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000392:	40d9      	lsrs	r1, r3
 8000394:	4330      	orrs	r0, r6
 8000396:	0c03      	lsrs	r3, r0, #16
 8000398:	fbb1 f6fe 	udiv	r6, r1, lr
 800039c:	fa1f f887 	uxth.w	r8, r7
 80003a0:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a8:	fb06 f108 	mul.w	r1, r6, r8
 80003ac:	4299      	cmp	r1, r3
 80003ae:	fa04 f402 	lsl.w	r4, r4, r2
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x19c>
 80003b4:	18fb      	adds	r3, r7, r3
 80003b6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003ba:	f080 808d 	bcs.w	80004d8 <__udivmoddi4+0x2ac>
 80003be:	4299      	cmp	r1, r3
 80003c0:	f240 808a 	bls.w	80004d8 <__udivmoddi4+0x2ac>
 80003c4:	3e02      	subs	r6, #2
 80003c6:	443b      	add	r3, r7
 80003c8:	1a5b      	subs	r3, r3, r1
 80003ca:	b281      	uxth	r1, r0
 80003cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d8:	fb00 f308 	mul.w	r3, r0, r8
 80003dc:	428b      	cmp	r3, r1
 80003de:	d907      	bls.n	80003f0 <__udivmoddi4+0x1c4>
 80003e0:	1879      	adds	r1, r7, r1
 80003e2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003e6:	d273      	bcs.n	80004d0 <__udivmoddi4+0x2a4>
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d971      	bls.n	80004d0 <__udivmoddi4+0x2a4>
 80003ec:	3802      	subs	r0, #2
 80003ee:	4439      	add	r1, r7
 80003f0:	1acb      	subs	r3, r1, r3
 80003f2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003f6:	e778      	b.n	80002ea <__udivmoddi4+0xbe>
 80003f8:	f1c6 0c20 	rsb	ip, r6, #32
 80003fc:	fa03 f406 	lsl.w	r4, r3, r6
 8000400:	fa22 f30c 	lsr.w	r3, r2, ip
 8000404:	431c      	orrs	r4, r3
 8000406:	fa20 f70c 	lsr.w	r7, r0, ip
 800040a:	fa01 f306 	lsl.w	r3, r1, r6
 800040e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000412:	fa21 f10c 	lsr.w	r1, r1, ip
 8000416:	431f      	orrs	r7, r3
 8000418:	0c3b      	lsrs	r3, r7, #16
 800041a:	fbb1 f9fe 	udiv	r9, r1, lr
 800041e:	fa1f f884 	uxth.w	r8, r4
 8000422:	fb0e 1119 	mls	r1, lr, r9, r1
 8000426:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042a:	fb09 fa08 	mul.w	sl, r9, r8
 800042e:	458a      	cmp	sl, r1
 8000430:	fa02 f206 	lsl.w	r2, r2, r6
 8000434:	fa00 f306 	lsl.w	r3, r0, r6
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x220>
 800043a:	1861      	adds	r1, r4, r1
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	d248      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 8000442:	458a      	cmp	sl, r1
 8000444:	d946      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	4421      	add	r1, r4
 800044c:	eba1 010a 	sub.w	r1, r1, sl
 8000450:	b2bf      	uxth	r7, r7
 8000452:	fbb1 f0fe 	udiv	r0, r1, lr
 8000456:	fb0e 1110 	mls	r1, lr, r0, r1
 800045a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45b8      	cmp	r8, r7
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x24a>
 8000466:	19e7      	adds	r7, r4, r7
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800046c:	d22e      	bcs.n	80004cc <__udivmoddi4+0x2a0>
 800046e:	45b8      	cmp	r8, r7
 8000470:	d92c      	bls.n	80004cc <__udivmoddi4+0x2a0>
 8000472:	3802      	subs	r0, #2
 8000474:	4427      	add	r7, r4
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba7 0708 	sub.w	r7, r7, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454f      	cmp	r7, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	4649      	mov	r1, r9
 8000488:	d31a      	bcc.n	80004c0 <__udivmoddi4+0x294>
 800048a:	d017      	beq.n	80004bc <__udivmoddi4+0x290>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x27a>
 800048e:	ebb3 020e 	subs.w	r2, r3, lr
 8000492:	eb67 0701 	sbc.w	r7, r7, r1
 8000496:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049a:	40f2      	lsrs	r2, r6
 800049c:	ea4c 0202 	orr.w	r2, ip, r2
 80004a0:	40f7      	lsrs	r7, r6
 80004a2:	e9c5 2700 	strd	r2, r7, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e70b      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e9      	b.n	800028c <__udivmoddi4+0x60>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6fd      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004bc:	4543      	cmp	r3, r8
 80004be:	d2e5      	bcs.n	800048c <__udivmoddi4+0x260>
 80004c0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c4:	eb69 0104 	sbc.w	r1, r9, r4
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7df      	b.n	800048c <__udivmoddi4+0x260>
 80004cc:	4608      	mov	r0, r1
 80004ce:	e7d2      	b.n	8000476 <__udivmoddi4+0x24a>
 80004d0:	4660      	mov	r0, ip
 80004d2:	e78d      	b.n	80003f0 <__udivmoddi4+0x1c4>
 80004d4:	4681      	mov	r9, r0
 80004d6:	e7b9      	b.n	800044c <__udivmoddi4+0x220>
 80004d8:	4666      	mov	r6, ip
 80004da:	e775      	b.n	80003c8 <__udivmoddi4+0x19c>
 80004dc:	4630      	mov	r0, r6
 80004de:	e74a      	b.n	8000376 <__udivmoddi4+0x14a>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	4439      	add	r1, r7
 80004e6:	e713      	b.n	8000310 <__udivmoddi4+0xe4>
 80004e8:	3802      	subs	r0, #2
 80004ea:	443c      	add	r4, r7
 80004ec:	e724      	b.n	8000338 <__udivmoddi4+0x10c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	0a5a      	lsrs	r2, r3, #9
 8000504:	490f      	ldr	r1, [pc, #60]	; (8000544 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000506:	fba1 1202 	umull	r1, r2, r1, r2
 800050a:	09d2      	lsrs	r2, r2, #7
 800050c:	490e      	ldr	r1, [pc, #56]	; (8000548 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800050e:	fb01 f202 	mul.w	r2, r1, r2
 8000512:	1a9b      	subs	r3, r3, r2
 8000514:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	0a5b      	lsrs	r3, r3, #9
 800051c:	4a09      	ldr	r2, [pc, #36]	; (8000544 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800051e:	fba2 2303 	umull	r2, r3, r2, r3
 8000522:	09db      	lsrs	r3, r3, #7
 8000524:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	441a      	add	r2, r3
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	68fa      	ldr	r2, [r7, #12]
 8000536:	601a      	str	r2, [r3, #0]
}
 8000538:	bf00      	nop
 800053a:	3714      	adds	r7, #20
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	00044b83 	.word	0x00044b83
 8000548:	3b9aca00 	.word	0x3b9aca00

0800054c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
    rosserial_task();
 8000554:	f001 fd24 	bl	8001fa0 <rosserial_task>
}
 8000558:	bf00      	nop
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000564:	f002 fd68 	bl	8003038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000568:	f000 f816 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056c:	f000 f926 	bl	80007bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000570:	f000 f8fc 	bl	800076c <MX_DMA_Init>
  MX_TIM2_Init();
 8000574:	f000 f884 	bl	8000680 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000578:	f000 f8ce 	bl	8000718 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
    rosserial_init();
 800057c:	f001 fcea 	bl	8001f54 <rosserial_init>
    HAL_TIM_Base_Start_IT(&htim2);
 8000580:	4804      	ldr	r0, [pc, #16]	; (8000594 <main+0x34>)
 8000582:	f004 f9e9 	bl	8004958 <HAL_TIM_Base_Start_IT>
    HAL_Delay(1000);
 8000586:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800058a:	f002 fdc7 	bl	800311c <HAL_Delay>
    roslog();
 800058e:	f001 fd19 	bl	8001fc4 <roslog>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {
 8000592:	e7fe      	b.n	8000592 <main+0x32>
 8000594:	200009a0 	.word	0x200009a0

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	; 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	2230      	movs	r2, #48	; 0x30
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f005 fd82 	bl	80060b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	4b2d      	ldr	r3, [pc, #180]	; (8000678 <SystemClock_Config+0xe0>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	4a2c      	ldr	r2, [pc, #176]	; (8000678 <SystemClock_Config+0xe0>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	; 0x40
 80005cc:	4b2a      	ldr	r3, [pc, #168]	; (8000678 <SystemClock_Config+0xe0>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	4b27      	ldr	r3, [pc, #156]	; (800067c <SystemClock_Config+0xe4>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a26      	ldr	r2, [pc, #152]	; (800067c <SystemClock_Config+0xe4>)
 80005e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b24      	ldr	r3, [pc, #144]	; (800067c <SystemClock_Config+0xe4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f4:	2301      	movs	r3, #1
 80005f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fe:	2302      	movs	r3, #2
 8000600:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000602:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000608:	2308      	movs	r3, #8
 800060a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 800060c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000610:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000612:	2302      	movs	r3, #2
 8000614:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000616:	2304      	movs	r3, #4
 8000618:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	4618      	mov	r0, r3
 8000620:	f003 fcb0 	bl	8003f84 <HAL_RCC_OscConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800062a:	f000 f8ef 	bl	800080c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800062e:	f003 fc59 	bl	8003ee4 <HAL_PWREx_EnableOverDrive>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000638:	f000 f8e8 	bl	800080c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2302      	movs	r3, #2
 8000642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000648:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800064c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800064e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000652:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2105      	movs	r1, #5
 800065a:	4618      	mov	r0, r3
 800065c:	f003 ff0a 	bl	8004474 <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000666:	f000 f8d1 	bl	800080c <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800066a:	f003 ffe9 	bl	8004640 <HAL_RCC_EnableCSS>
}
 800066e:	bf00      	nop
 8000670:	3750      	adds	r7, #80	; 0x50
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800
 800067c:	40007000 	.word	0x40007000

08000680 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000686:	f107 0308 	add.w	r3, r7, #8
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000694:	463b      	mov	r3, r7
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800069c:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <MX_TIM2_Init+0x94>)
 800069e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 14;
 80006a4:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <MX_TIM2_Init+0x94>)
 80006a6:	220e      	movs	r2, #14
 80006a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006aa:	4b1a      	ldr	r3, [pc, #104]	; (8000714 <MX_TIM2_Init+0x94>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 29999;
 80006b0:	4b18      	ldr	r3, [pc, #96]	; (8000714 <MX_TIM2_Init+0x94>)
 80006b2:	f247 522f 	movw	r2, #29999	; 0x752f
 80006b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b8:	4b16      	ldr	r3, [pc, #88]	; (8000714 <MX_TIM2_Init+0x94>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <MX_TIM2_Init+0x94>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006c4:	4813      	ldr	r0, [pc, #76]	; (8000714 <MX_TIM2_Init+0x94>)
 80006c6:	f004 f8f8 	bl	80048ba <HAL_TIM_Base_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80006d0:	f000 f89c 	bl	800080c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006da:	f107 0308 	add.w	r3, r7, #8
 80006de:	4619      	mov	r1, r3
 80006e0:	480c      	ldr	r0, [pc, #48]	; (8000714 <MX_TIM2_Init+0x94>)
 80006e2:	f004 fab1 	bl	8004c48 <HAL_TIM_ConfigClockSource>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80006ec:	f000 f88e 	bl	800080c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f0:	2300      	movs	r3, #0
 80006f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006f8:	463b      	mov	r3, r7
 80006fa:	4619      	mov	r1, r3
 80006fc:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_TIM2_Init+0x94>)
 80006fe:	f004 fcc9 	bl	8005094 <HAL_TIMEx_MasterConfigSynchronization>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000708:	f000 f880 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	3718      	adds	r7, #24
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	200009a0 	.word	0x200009a0

08000718 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800071c:	4b10      	ldr	r3, [pc, #64]	; (8000760 <MX_USART1_UART_Init+0x48>)
 800071e:	4a11      	ldr	r2, [pc, #68]	; (8000764 <MX_USART1_UART_Init+0x4c>)
 8000720:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 500000;
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_USART1_UART_Init+0x48>)
 8000724:	4a10      	ldr	r2, [pc, #64]	; (8000768 <MX_USART1_UART_Init+0x50>)
 8000726:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000728:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <MX_USART1_UART_Init+0x48>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_USART1_UART_Init+0x48>)
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000734:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <MX_USART1_UART_Init+0x48>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_USART1_UART_Init+0x48>)
 800073c:	220c      	movs	r2, #12
 800073e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <MX_USART1_UART_Init+0x48>)
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_USART1_UART_Init+0x48>)
 8000748:	2200      	movs	r2, #0
 800074a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <MX_USART1_UART_Init+0x48>)
 800074e:	f004 fd31 	bl	80051b4 <HAL_UART_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8000758:	f000 f858 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	2000095c 	.word	0x2000095c
 8000764:	40011000 	.word	0x40011000
 8000768:	0007a120 	.word	0x0007a120

0800076c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <MX_DMA_Init+0x4c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a0f      	ldr	r2, [pc, #60]	; (80007b8 <MX_DMA_Init+0x4c>)
 800077c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <MX_DMA_Init+0x4c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2100      	movs	r1, #0
 8000792:	203a      	movs	r0, #58	; 0x3a
 8000794:	f002 fdc1 	bl	800331a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000798:	203a      	movs	r0, #58	; 0x3a
 800079a:	f002 fdda 	bl	8003352 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	2100      	movs	r1, #0
 80007a2:	2046      	movs	r0, #70	; 0x46
 80007a4:	f002 fdb9 	bl	800331a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80007a8:	2046      	movs	r0, #70	; 0x46
 80007aa:	f002 fdd2 	bl	8003352 <HAL_NVIC_EnableIRQ>

}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_GPIO_Init+0x4c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a0f      	ldr	r2, [pc, #60]	; (8000808 <MX_GPIO_Init+0x4c>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <MX_GPIO_Init+0x4c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_GPIO_Init+0x4c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a08      	ldr	r2, [pc, #32]	; (8000808 <MX_GPIO_Init+0x4c>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_GPIO_Init+0x4c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]

}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800

0800080c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000810:	b672      	cpsid	i
}
 8000812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000814:	e7fe      	b.n	8000814 <Error_Handler+0x8>

08000816 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000816:	b480      	push	{r7}
 8000818:	b083      	sub	sp, #12
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2200      	movs	r2, #0
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4618      	mov	r0, r3
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	4a04      	ldr	r2, [pc, #16]	; (8000854 <_ZN3ros3MsgC1Ev+0x1c>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4618      	mov	r0, r3
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	08006670 	.word	0x08006670

08000858 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
      data()
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff ffe8 	bl	8000838 <_ZN3ros3MsgC1Ev>
 8000868:	4a06      	ldr	r2, [pc, #24]	; (8000884 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	3304      	adds	r3, #4
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ffcf 	bl	8000816 <_ZN3ros4TimeC1Ev>
    {
    }
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4618      	mov	r0, r3
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	08006658 	.word	0x08006658

08000888 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6859      	ldr	r1, [r3, #4]
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	683a      	ldr	r2, [r7, #0]
 800089e:	4413      	add	r3, r2
 80008a0:	b2ca      	uxtb	r2, r1
 80008a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	0a19      	lsrs	r1, r3, #8
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	3301      	adds	r3, #1
 80008ae:	683a      	ldr	r2, [r7, #0]
 80008b0:	4413      	add	r3, r2
 80008b2:	b2ca      	uxtb	r2, r1
 80008b4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	0c19      	lsrs	r1, r3, #16
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	3302      	adds	r3, #2
 80008c0:	683a      	ldr	r2, [r7, #0]
 80008c2:	4413      	add	r3, r2
 80008c4:	b2ca      	uxtb	r2, r1
 80008c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	0e19      	lsrs	r1, r3, #24
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	3303      	adds	r3, #3
 80008d2:	683a      	ldr	r2, [r7, #0]
 80008d4:	4413      	add	r3, r2
 80008d6:	b2ca      	uxtb	r2, r1
 80008d8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	3304      	adds	r3, #4
 80008de:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6899      	ldr	r1, [r3, #8]
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	683a      	ldr	r2, [r7, #0]
 80008e8:	4413      	add	r3, r2
 80008ea:	b2ca      	uxtb	r2, r1
 80008ec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	0a19      	lsrs	r1, r3, #8
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	3301      	adds	r3, #1
 80008f8:	683a      	ldr	r2, [r7, #0]
 80008fa:	4413      	add	r3, r2
 80008fc:	b2ca      	uxtb	r2, r1
 80008fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	0c19      	lsrs	r1, r3, #16
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	3302      	adds	r3, #2
 800090a:	683a      	ldr	r2, [r7, #0]
 800090c:	4413      	add	r3, r2
 800090e:	b2ca      	uxtb	r2, r1
 8000910:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	0e19      	lsrs	r1, r3, #24
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	3303      	adds	r3, #3
 800091c:	683a      	ldr	r2, [r7, #0]
 800091e:	4413      	add	r3, r2
 8000920:	b2ca      	uxtb	r2, r1
 8000922:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	3304      	adds	r3, #4
 8000928:	60fb      	str	r3, [r7, #12]
      return offset;
 800092a:	68fb      	ldr	r3, [r7, #12]
    }
 800092c:	4618      	mov	r0, r3
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	683a      	ldr	r2, [r7, #0]
 800094a:	4413      	add	r3, r2
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	461a      	mov	r2, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	685a      	ldr	r2, [r3, #4]
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	3301      	adds	r3, #1
 800095c:	6839      	ldr	r1, [r7, #0]
 800095e:	440b      	add	r3, r1
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	021b      	lsls	r3, r3, #8
 8000964:	431a      	orrs	r2, r3
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	685a      	ldr	r2, [r3, #4]
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	3302      	adds	r3, #2
 8000972:	6839      	ldr	r1, [r7, #0]
 8000974:	440b      	add	r3, r1
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	041b      	lsls	r3, r3, #16
 800097a:	431a      	orrs	r2, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	685a      	ldr	r2, [r3, #4]
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	3303      	adds	r3, #3
 8000988:	6839      	ldr	r1, [r7, #0]
 800098a:	440b      	add	r3, r1
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	061b      	lsls	r3, r3, #24
 8000990:	431a      	orrs	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	3304      	adds	r3, #4
 800099a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	683a      	ldr	r2, [r7, #0]
 80009a0:	4413      	add	r3, r2
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	689a      	ldr	r2, [r3, #8]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	3301      	adds	r3, #1
 80009b2:	6839      	ldr	r1, [r7, #0]
 80009b4:	440b      	add	r3, r1
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	021b      	lsls	r3, r3, #8
 80009ba:	431a      	orrs	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	689a      	ldr	r2, [r3, #8]
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	3302      	adds	r3, #2
 80009c8:	6839      	ldr	r1, [r7, #0]
 80009ca:	440b      	add	r3, r1
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	041b      	lsls	r3, r3, #16
 80009d0:	431a      	orrs	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	689a      	ldr	r2, [r3, #8]
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	3303      	adds	r3, #3
 80009de:	6839      	ldr	r1, [r7, #0]
 80009e0:	440b      	add	r3, r1
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	061b      	lsls	r3, r3, #24
 80009e6:	431a      	orrs	r2, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	3304      	adds	r3, #4
 80009f0:	60fb      	str	r3, [r7, #12]
     return offset;
 80009f2:	68fb      	ldr	r3, [r7, #12]
    }
 80009f4:	4618      	mov	r0, r3
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	4b03      	ldr	r3, [pc, #12]	; (8000a18 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	0800635c 	.word	0x0800635c

08000a1c <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8000a26:	4618      	mov	r0, r3
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	0800636c 	.word	0x0800636c

08000a38 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fef8 	bl	8000838 <_ZN3ros3MsgC1Ev>
 8000a48:	4a0b      	ldr	r2, [pc, #44]	; (8000a78 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2200      	movs	r2, #0
 8000a52:	809a      	strh	r2, [r3, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a09      	ldr	r2, [pc, #36]	; (8000a7c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a07      	ldr	r2, [pc, #28]	; (8000a7c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a06      	ldr	r2, [pc, #24]	; (8000a7c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000a64:	611a      	str	r2, [r3, #16]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	615a      	str	r2, [r3, #20]
    {
    }
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	08006640 	.word	0x08006640
 8000a7c:	08006390 	.word	0x08006390

08000a80 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b088      	sub	sp, #32
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	8899      	ldrh	r1, [r3, #4]
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	683a      	ldr	r2, [r7, #0]
 8000a96:	4413      	add	r3, r2
 8000a98:	b2ca      	uxtb	r2, r1
 8000a9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	889b      	ldrh	r3, [r3, #4]
 8000aa0:	0a1b      	lsrs	r3, r3, #8
 8000aa2:	b299      	uxth	r1, r3
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	683a      	ldr	r2, [r7, #0]
 8000aaa:	4413      	add	r3, r2
 8000aac:	b2ca      	uxtb	r2, r1
 8000aae:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	3302      	adds	r3, #2
 8000ab4:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff fb96 	bl	80001ec <strlen>
 8000ac0:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	683a      	ldr	r2, [r7, #0]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	69b9      	ldr	r1, [r7, #24]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f001 fa86 	bl	8001fdc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	3304      	adds	r3, #4
 8000ad4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	683a      	ldr	r2, [r7, #0]
 8000ada:	18d0      	adds	r0, r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	69ba      	ldr	r2, [r7, #24]
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f005 fad6 	bl	8006094 <memcpy>
      offset += length_topic_name;
 8000ae8:	69fa      	ldr	r2, [r7, #28]
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	4413      	add	r3, r2
 8000aee:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fb79 	bl	80001ec <strlen>
 8000afa:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	683a      	ldr	r2, [r7, #0]
 8000b00:	4413      	add	r3, r2
 8000b02:	6979      	ldr	r1, [r7, #20]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f001 fa69 	bl	8001fdc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	683a      	ldr	r2, [r7, #0]
 8000b14:	18d0      	adds	r0, r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	68db      	ldr	r3, [r3, #12]
 8000b1a:	697a      	ldr	r2, [r7, #20]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f005 fab9 	bl	8006094 <memcpy>
      offset += length_message_type;
 8000b22:	69fa      	ldr	r2, [r7, #28]
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	4413      	add	r3, r2
 8000b28:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	691b      	ldr	r3, [r3, #16]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fb5c 	bl	80001ec <strlen>
 8000b34:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	683a      	ldr	r2, [r7, #0]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	6939      	ldr	r1, [r7, #16]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f001 fa4c 	bl	8001fdc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	3304      	adds	r3, #4
 8000b48:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	683a      	ldr	r2, [r7, #0]
 8000b4e:	18d0      	adds	r0, r2, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	691b      	ldr	r3, [r3, #16]
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	4619      	mov	r1, r3
 8000b58:	f005 fa9c 	bl	8006094 <memcpy>
      offset += length_md5sum;
 8000b5c:	69fa      	ldr	r2, [r7, #28]
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	4413      	add	r3, r2
 8000b62:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	695b      	ldr	r3, [r3, #20]
 8000b68:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000b6a:	68f9      	ldr	r1, [r7, #12]
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	683a      	ldr	r2, [r7, #0]
 8000b70:	4413      	add	r3, r2
 8000b72:	b2ca      	uxtb	r2, r1
 8000b74:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	0a19      	lsrs	r1, r3, #8
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	683a      	ldr	r2, [r7, #0]
 8000b80:	4413      	add	r3, r2
 8000b82:	b2ca      	uxtb	r2, r1
 8000b84:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	0c19      	lsrs	r1, r3, #16
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3302      	adds	r3, #2
 8000b8e:	683a      	ldr	r2, [r7, #0]
 8000b90:	4413      	add	r3, r2
 8000b92:	b2ca      	uxtb	r2, r1
 8000b94:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	0e19      	lsrs	r1, r3, #24
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3303      	adds	r3, #3
 8000b9e:	683a      	ldr	r2, [r7, #0]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	b2ca      	uxtb	r2, r1
 8000ba4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	3304      	adds	r3, #4
 8000baa:	61fb      	str	r3, [r7, #28]
      return offset;
 8000bac:	69fb      	ldr	r3, [r7, #28]
    }
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3720      	adds	r7, #32
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b08a      	sub	sp, #40	; 0x28
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
 8000bbe:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	683a      	ldr	r2, [r7, #0]
 8000bc8:	4413      	add	r3, r2
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	889b      	ldrh	r3, [r3, #4]
 8000bd6:	b21a      	sxth	r2, r3
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	6839      	ldr	r1, [r7, #0]
 8000bde:	440b      	add	r3, r1
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	021b      	lsls	r3, r3, #8
 8000be4:	b21b      	sxth	r3, r3
 8000be6:	4313      	orrs	r3, r2
 8000be8:	b21b      	sxth	r3, r3
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	3302      	adds	r3, #2
 8000bf4:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	683a      	ldr	r2, [r7, #0]
 8000bfa:	441a      	add	r2, r3
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4611      	mov	r1, r2
 8000c02:	4618      	mov	r0, r3
 8000c04:	f001 fa08 	bl	8002018 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	3304      	adds	r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
 8000c12:	69ba      	ldr	r2, [r7, #24]
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	4413      	add	r3, r2
 8000c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d20c      	bcs.n	8000c38 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8000c1e:	683a      	ldr	r2, [r7, #0]
 8000c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c22:	441a      	add	r2, r3
 8000c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c26:	3b01      	subs	r3, #1
 8000c28:	6839      	ldr	r1, [r7, #0]
 8000c2a:	440b      	add	r3, r1
 8000c2c:	7812      	ldrb	r2, [r2, #0]
 8000c2e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c32:	3301      	adds	r3, #1
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
 8000c36:	e7ec      	b.n	8000c12 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	683a      	ldr	r2, [r7, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	683a      	ldr	r2, [r7, #0]
 8000c4e:	441a      	add	r2, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	4413      	add	r3, r2
 8000c5a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	683a      	ldr	r2, [r7, #0]
 8000c60:	441a      	add	r2, r3
 8000c62:	f107 0310 	add.w	r3, r7, #16
 8000c66:	4611      	mov	r1, r2
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f001 f9d5 	bl	8002018 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	3304      	adds	r3, #4
 8000c72:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	623b      	str	r3, [r7, #32]
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	6a3a      	ldr	r2, [r7, #32]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d20c      	bcs.n	8000c9e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8000c84:	683a      	ldr	r2, [r7, #0]
 8000c86:	6a3b      	ldr	r3, [r7, #32]
 8000c88:	441a      	add	r2, r3
 8000c8a:	6a3b      	ldr	r3, [r7, #32]
 8000c8c:	3b01      	subs	r3, #1
 8000c8e:	6839      	ldr	r1, [r7, #0]
 8000c90:	440b      	add	r3, r1
 8000c92:	7812      	ldrb	r2, [r2, #0]
 8000c94:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000c96:	6a3b      	ldr	r3, [r7, #32]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	623b      	str	r3, [r7, #32]
 8000c9c:	e7ec      	b.n	8000c78 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	683a      	ldr	r2, [r7, #0]
 8000ca8:	4413      	add	r3, r2
 8000caa:	2200      	movs	r2, #0
 8000cac:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	3b01      	subs	r3, #1
 8000cb2:	683a      	ldr	r2, [r7, #0]
 8000cb4:	441a      	add	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	683a      	ldr	r2, [r7, #0]
 8000cc6:	441a      	add	r2, r3
 8000cc8:	f107 030c 	add.w	r3, r7, #12
 8000ccc:	4611      	mov	r1, r2
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f001 f9a2 	bl	8002018 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	3304      	adds	r3, #4
 8000cd8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	61fb      	str	r3, [r7, #28]
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	69fa      	ldr	r2, [r7, #28]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d20c      	bcs.n	8000d04 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8000cea:	683a      	ldr	r2, [r7, #0]
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	441a      	add	r2, r3
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	6839      	ldr	r1, [r7, #0]
 8000cf6:	440b      	add	r3, r1
 8000cf8:	7812      	ldrb	r2, [r2, #0]
 8000cfa:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	61fb      	str	r3, [r7, #28]
 8000d02:	e7ec      	b.n	8000cde <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	4413      	add	r3, r2
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	683a      	ldr	r2, [r7, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	683a      	ldr	r2, [r7, #0]
 8000d1a:	441a      	add	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	4413      	add	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	6839      	ldr	r1, [r7, #0]
 8000d32:	440a      	add	r2, r1
 8000d34:	7812      	ldrb	r2, [r2, #0]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	6839      	ldr	r1, [r7, #0]
 8000d42:	440b      	add	r3, r1
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	021b      	lsls	r3, r3, #8
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000d4c:	68ba      	ldr	r2, [r7, #8]
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	3302      	adds	r3, #2
 8000d52:	6839      	ldr	r1, [r7, #0]
 8000d54:	440b      	add	r3, r1
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	041b      	lsls	r3, r3, #16
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	3303      	adds	r3, #3
 8000d64:	6839      	ldr	r1, [r7, #0]
 8000d66:	440b      	add	r3, r1
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	061b      	lsls	r3, r3, #24
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000d70:	68ba      	ldr	r2, [r7, #8]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	3304      	adds	r3, #4
 8000d7a:	61bb      	str	r3, [r7, #24]
     return offset;
 8000d7c:	69bb      	ldr	r3, [r7, #24]
    }
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3728      	adds	r7, #40	; 0x28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000d92:	4618      	mov	r0, r3
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	08006394 	.word	0x08006394

08000da4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000dae:	4618      	mov	r0, r3
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	080063b0 	.word	0x080063b0

08000dc0 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fd34 	bl	8000838 <_ZN3ros3MsgC1Ev>
 8000dd0:	4a06      	ldr	r2, [pc, #24]	; (8000dec <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	711a      	strb	r2, [r3, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000de0:	609a      	str	r2, [r3, #8]
    {
    }
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4618      	mov	r0, r3
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	08006628 	.word	0x08006628
 8000df0:	08006390 	.word	0x08006390

08000df4 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	683a      	ldr	r2, [r7, #0]
 8000e06:	4413      	add	r3, r2
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	7912      	ldrb	r2, [r2, #4]
 8000e0c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	3301      	adds	r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff f9e7 	bl	80001ec <strlen>
 8000e1e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	683a      	ldr	r2, [r7, #0]
 8000e24:	4413      	add	r3, r2
 8000e26:	68b9      	ldr	r1, [r7, #8]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f001 f8d7 	bl	8001fdc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	3304      	adds	r3, #4
 8000e32:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	683a      	ldr	r2, [r7, #0]
 8000e38:	18d0      	adds	r0, r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	4619      	mov	r1, r3
 8000e42:	f005 f927 	bl	8006094 <memcpy>
      offset += length_msg;
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	60fb      	str	r3, [r7, #12]
      return offset;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
    }
 8000e50:	4618      	mov	r0, r3
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	683a      	ldr	r2, [r7, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	781a      	ldrb	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	3301      	adds	r3, #1
 8000e76:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	683a      	ldr	r2, [r7, #0]
 8000e7c:	441a      	add	r2, r3
 8000e7e:	f107 030c 	add.w	r3, r7, #12
 8000e82:	4611      	mov	r1, r2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f001 f8c7 	bl	8002018 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	4413      	add	r3, r2
 8000e9a:	697a      	ldr	r2, [r7, #20]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d20c      	bcs.n	8000eba <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8000ea0:	683a      	ldr	r2, [r7, #0]
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	441a      	add	r2, r3
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	6839      	ldr	r1, [r7, #0]
 8000eac:	440b      	add	r3, r1
 8000eae:	7812      	ldrb	r2, [r2, #0]
 8000eb0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	e7ec      	b.n	8000e94 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	3b01      	subs	r3, #1
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	683a      	ldr	r2, [r7, #0]
 8000ed0:	441a      	add	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4413      	add	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
     return offset;
 8000ede:	693b      	ldr	r3, [r7, #16]
    }
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	080063d4 	.word	0x080063d4

08000f04 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000f0e:	4618      	mov	r0, r3
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	080063e8 	.word	0x080063e8

08000f20 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fc84 	bl	8000838 <_ZN3ros3MsgC1Ev>
 8000f30:	4a0c      	ldr	r2, [pc, #48]	; (8000f64 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	619a      	str	r2, [r3, #24]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	61da      	str	r2, [r3, #28]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	08006610 	.word	0x08006610

08000f68 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6859      	ldr	r1, [r3, #4]
 8000f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7c:	683a      	ldr	r2, [r7, #0]
 8000f7e:	4413      	add	r3, r2
 8000f80:	b2ca      	uxtb	r2, r1
 8000f82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	0a19      	lsrs	r1, r3, #8
 8000f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	683a      	ldr	r2, [r7, #0]
 8000f90:	4413      	add	r3, r2
 8000f92:	b2ca      	uxtb	r2, r1
 8000f94:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	0c19      	lsrs	r1, r3, #16
 8000f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	b2ca      	uxtb	r2, r1
 8000fa6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	0e19      	lsrs	r1, r3, #24
 8000fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb0:	3303      	adds	r3, #3
 8000fb2:	683a      	ldr	r2, [r7, #0]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	b2ca      	uxtb	r2, r1
 8000fb8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	623b      	str	r3, [r7, #32]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	6a3a      	ldr	r2, [r7, #32]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d22b      	bcs.n	8001026 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	68da      	ldr	r2, [r3, #12]
 8000fd2:	6a3b      	ldr	r3, [r7, #32]
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000fdc:	6939      	ldr	r1, [r7, #16]
 8000fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe0:	683a      	ldr	r2, [r7, #0]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	b2ca      	uxtb	r2, r1
 8000fe6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	0a19      	lsrs	r1, r3, #8
 8000fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fee:	3301      	adds	r3, #1
 8000ff0:	683a      	ldr	r2, [r7, #0]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	b2ca      	uxtb	r2, r1
 8000ff6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	0c19      	lsrs	r1, r3, #16
 8000ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffe:	3302      	adds	r3, #2
 8001000:	683a      	ldr	r2, [r7, #0]
 8001002:	4413      	add	r3, r2
 8001004:	b2ca      	uxtb	r2, r1
 8001006:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	0e19      	lsrs	r1, r3, #24
 800100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100e:	3303      	adds	r3, #3
 8001010:	683a      	ldr	r2, [r7, #0]
 8001012:	4413      	add	r3, r2
 8001014:	b2ca      	uxtb	r2, r1
 8001016:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101a:	3304      	adds	r3, #4
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800101e:	6a3b      	ldr	r3, [r7, #32]
 8001020:	3301      	adds	r3, #1
 8001022:	623b      	str	r3, [r7, #32]
 8001024:	e7ce      	b.n	8000fc4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6919      	ldr	r1, [r3, #16]
 800102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	4413      	add	r3, r2
 8001030:	b2ca      	uxtb	r2, r1
 8001032:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	691b      	ldr	r3, [r3, #16]
 8001038:	0a19      	lsrs	r1, r3, #8
 800103a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103c:	3301      	adds	r3, #1
 800103e:	683a      	ldr	r2, [r7, #0]
 8001040:	4413      	add	r3, r2
 8001042:	b2ca      	uxtb	r2, r1
 8001044:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	691b      	ldr	r3, [r3, #16]
 800104a:	0c19      	lsrs	r1, r3, #16
 800104c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104e:	3302      	adds	r3, #2
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	4413      	add	r3, r2
 8001054:	b2ca      	uxtb	r2, r1
 8001056:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	691b      	ldr	r3, [r3, #16]
 800105c:	0e19      	lsrs	r1, r3, #24
 800105e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001060:	3303      	adds	r3, #3
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	4413      	add	r3, r2
 8001066:	b2ca      	uxtb	r2, r1
 8001068:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800106a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106c:	3304      	adds	r3, #4
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001070:	2300      	movs	r3, #0
 8001072:	61fb      	str	r3, [r7, #28]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	691b      	ldr	r3, [r3, #16]
 8001078:	69fa      	ldr	r2, [r7, #28]
 800107a:	429a      	cmp	r2, r3
 800107c:	d22b      	bcs.n	80010d6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	699a      	ldr	r2, [r3, #24]
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4413      	add	r3, r2
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800108c:	68f9      	ldr	r1, [r7, #12]
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	683a      	ldr	r2, [r7, #0]
 8001092:	4413      	add	r3, r2
 8001094:	b2ca      	uxtb	r2, r1
 8001096:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	0a19      	lsrs	r1, r3, #8
 800109c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109e:	3301      	adds	r3, #1
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	4413      	add	r3, r2
 80010a4:	b2ca      	uxtb	r2, r1
 80010a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	0c19      	lsrs	r1, r3, #16
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	3302      	adds	r3, #2
 80010b0:	683a      	ldr	r2, [r7, #0]
 80010b2:	4413      	add	r3, r2
 80010b4:	b2ca      	uxtb	r2, r1
 80010b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	0e19      	lsrs	r1, r3, #24
 80010bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010be:	3303      	adds	r3, #3
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	b2ca      	uxtb	r2, r1
 80010c6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80010c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ca:	3304      	adds	r3, #4
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3301      	adds	r3, #1
 80010d2:	61fb      	str	r3, [r7, #28]
 80010d4:	e7ce      	b.n	8001074 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69d9      	ldr	r1, [r3, #28]
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	683a      	ldr	r2, [r7, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	b2ca      	uxtb	r2, r1
 80010e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	69db      	ldr	r3, [r3, #28]
 80010e8:	0a19      	lsrs	r1, r3, #8
 80010ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ec:	3301      	adds	r3, #1
 80010ee:	683a      	ldr	r2, [r7, #0]
 80010f0:	4413      	add	r3, r2
 80010f2:	b2ca      	uxtb	r2, r1
 80010f4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	0c19      	lsrs	r1, r3, #16
 80010fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fe:	3302      	adds	r3, #2
 8001100:	683a      	ldr	r2, [r7, #0]
 8001102:	4413      	add	r3, r2
 8001104:	b2ca      	uxtb	r2, r1
 8001106:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	69db      	ldr	r3, [r3, #28]
 800110c:	0e19      	lsrs	r1, r3, #24
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	3303      	adds	r3, #3
 8001112:	683a      	ldr	r2, [r7, #0]
 8001114:	4413      	add	r3, r2
 8001116:	b2ca      	uxtb	r2, r1
 8001118:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111c:	3304      	adds	r3, #4
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001120:	2300      	movs	r3, #0
 8001122:	61bb      	str	r3, [r7, #24]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	69db      	ldr	r3, [r3, #28]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	429a      	cmp	r2, r3
 800112c:	d228      	bcs.n	8001180 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff f856 	bl	80001ec <strlen>
 8001140:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	4413      	add	r3, r2
 8001148:	6979      	ldr	r1, [r7, #20]
 800114a:	4618      	mov	r0, r3
 800114c:	f000 ff46 	bl	8001fdc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001152:	3304      	adds	r3, #4
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	18d0      	adds	r0, r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	4619      	mov	r1, r3
 800116c:	f004 ff92 	bl	8006094 <memcpy>
      offset += length_stringsi;
 8001170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	4413      	add	r3, r2
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	3301      	adds	r3, #1
 800117c:	61bb      	str	r3, [r7, #24]
 800117e:	e7d1      	b.n	8001124 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001182:	4618      	mov	r0, r3
 8001184:	3728      	adds	r7, #40	; 0x28
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800118a:	b580      	push	{r7, lr}
 800118c:	b08e      	sub	sp, #56	; 0x38
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	4413      	add	r3, r2
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80011a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011a4:	3301      	adds	r3, #1
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	4413      	add	r3, r2
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	6a3a      	ldr	r2, [r7, #32]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80011b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011b6:	3302      	adds	r3, #2
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	4413      	add	r3, r2
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	041b      	lsls	r3, r3, #16
 80011c0:	6a3a      	ldr	r2, [r7, #32]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80011c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011c8:	3303      	adds	r3, #3
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	4413      	add	r3, r2
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	061b      	lsls	r3, r3, #24
 80011d2:	6a3a      	ldr	r2, [r7, #32]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80011d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011da:	3304      	adds	r3, #4
 80011dc:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	6a3a      	ldr	r2, [r7, #32]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d90a      	bls.n	80011fe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68da      	ldr	r2, [r3, #12]
 80011ec:	6a3b      	ldr	r3, [r7, #32]
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4619      	mov	r1, r3
 80011f2:	4610      	mov	r0, r2
 80011f4:	f004 ff64 	bl	80060c0 <realloc>
 80011f8:	4602      	mov	r2, r0
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a3a      	ldr	r2, [r7, #32]
 8001202:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001204:	2300      	movs	r3, #0
 8001206:	633b      	str	r3, [r7, #48]	; 0x30
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800120e:	429a      	cmp	r2, r3
 8001210:	d236      	bcs.n	8001280 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800121a:	6839      	ldr	r1, [r7, #0]
 800121c:	440a      	add	r2, r1
 800121e:	7812      	ldrb	r2, [r2, #0]
 8001220:	4313      	orrs	r3, r2
 8001222:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001228:	3301      	adds	r3, #1
 800122a:	6839      	ldr	r1, [r7, #0]
 800122c:	440b      	add	r3, r1
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	021b      	lsls	r3, r3, #8
 8001232:	4313      	orrs	r3, r2
 8001234:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800123a:	3302      	adds	r3, #2
 800123c:	6839      	ldr	r1, [r7, #0]
 800123e:	440b      	add	r3, r1
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	041b      	lsls	r3, r3, #16
 8001244:	4313      	orrs	r3, r2
 8001246:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001248:	697a      	ldr	r2, [r7, #20]
 800124a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800124c:	3303      	adds	r3, #3
 800124e:	6839      	ldr	r1, [r7, #0]
 8001250:	440b      	add	r3, r1
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	061b      	lsls	r3, r3, #24
 8001256:	4313      	orrs	r3, r2
 8001258:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001262:	3304      	adds	r3, #4
 8001264:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68da      	ldr	r2, [r3, #12]
 800126a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	3208      	adds	r2, #8
 8001274:	6812      	ldr	r2, [r2, #0]
 8001276:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800127a:	3301      	adds	r3, #1
 800127c:	633b      	str	r3, [r7, #48]	; 0x30
 800127e:	e7c3      	b.n	8001208 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001282:	683a      	ldr	r2, [r7, #0]
 8001284:	4413      	add	r3, r2
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800128a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800128c:	3301      	adds	r3, #1
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	4413      	add	r3, r2
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	021b      	lsls	r3, r3, #8
 8001296:	69fa      	ldr	r2, [r7, #28]
 8001298:	4313      	orrs	r3, r2
 800129a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800129c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800129e:	3302      	adds	r3, #2
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	041b      	lsls	r3, r3, #16
 80012a8:	69fa      	ldr	r2, [r7, #28]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80012ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012b0:	3303      	adds	r3, #3
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	4413      	add	r3, r2
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	061b      	lsls	r3, r3, #24
 80012ba:	69fa      	ldr	r2, [r7, #28]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80012c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012c2:	3304      	adds	r3, #4
 80012c4:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	69fa      	ldr	r2, [r7, #28]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d90a      	bls.n	80012e6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	699a      	ldr	r2, [r3, #24]
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4619      	mov	r1, r3
 80012da:	4610      	mov	r0, r2
 80012dc:	f004 fef0 	bl	80060c0 <realloc>
 80012e0:	4602      	mov	r2, r0
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69fa      	ldr	r2, [r7, #28]
 80012ea:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80012ec:	2300      	movs	r3, #0
 80012ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d236      	bcs.n	8001368 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001302:	6839      	ldr	r1, [r7, #0]
 8001304:	440a      	add	r2, r1
 8001306:	7812      	ldrb	r2, [r2, #0]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001310:	3301      	adds	r3, #1
 8001312:	6839      	ldr	r1, [r7, #0]
 8001314:	440b      	add	r3, r1
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	021b      	lsls	r3, r3, #8
 800131a:	4313      	orrs	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001322:	3302      	adds	r3, #2
 8001324:	6839      	ldr	r1, [r7, #0]
 8001326:	440b      	add	r3, r1
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	041b      	lsls	r3, r3, #16
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001334:	3303      	adds	r3, #3
 8001336:	6839      	ldr	r1, [r7, #0]
 8001338:	440b      	add	r3, r1
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	061b      	lsls	r3, r3, #24
 800133e:	4313      	orrs	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800134a:	3304      	adds	r3, #4
 800134c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	699a      	ldr	r2, [r3, #24]
 8001352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	3214      	adds	r2, #20
 800135c:	6812      	ldr	r2, [r2, #0]
 800135e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001362:	3301      	adds	r3, #1
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001366:	e7c3      	b.n	80012f0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	4413      	add	r3, r2
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001374:	3301      	adds	r3, #1
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	4413      	add	r3, r2
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4313      	orrs	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001386:	3302      	adds	r3, #2
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	4413      	add	r3, r2
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	041b      	lsls	r3, r3, #16
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001398:	3303      	adds	r3, #3
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	4413      	add	r3, r2
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	061b      	lsls	r3, r3, #24
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80013a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013aa:	3304      	adds	r3, #4
 80013ac:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d90a      	bls.n	80013ce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4619      	mov	r1, r3
 80013c2:	4610      	mov	r0, r2
 80013c4:	f004 fe7c 	bl	80060c0 <realloc>
 80013c8:	4602      	mov	r2, r0
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80013d4:	2300      	movs	r3, #0
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	69db      	ldr	r3, [r3, #28]
 80013dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013de:	429a      	cmp	r2, r3
 80013e0:	d23f      	bcs.n	8001462 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80013e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	441a      	add	r2, r3
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	4611      	mov	r1, r2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 fe12 	bl	8002018 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80013f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f6:	3304      	adds	r3, #4
 80013f8:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80013fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
 80013fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4413      	add	r3, r2
 8001404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001406:	429a      	cmp	r2, r3
 8001408:	d20c      	bcs.n	8001424 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140e:	441a      	add	r2, r3
 8001410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001412:	3b01      	subs	r3, #1
 8001414:	6839      	ldr	r1, [r7, #0]
 8001416:	440b      	add	r3, r1
 8001418:	7812      	ldrb	r2, [r2, #0]
 800141a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	3301      	adds	r3, #1
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
 8001422:	e7ec      	b.n	80013fe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001424:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	4413      	add	r3, r2
 800142a:	3b01      	subs	r3, #1
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	4413      	add	r3, r2
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001436:	3b01      	subs	r3, #1
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	441a      	add	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001440:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4413      	add	r3, r2
 8001446:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800144c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	3220      	adds	r2, #32
 8001456:	6812      	ldr	r2, [r2, #0]
 8001458:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800145a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800145c:	3301      	adds	r3, #1
 800145e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001460:	e7ba      	b.n	80013d8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001464:	4618      	mov	r0, r3
 8001466:	3738      	adds	r7, #56	; 0x38
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	4b03      	ldr	r3, [pc, #12]	; (8001484 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001476:	4618      	mov	r0, r3
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	0800654c 	.word	0x0800654c

08001488 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	4b03      	ldr	r3, [pc, #12]	; (80014a0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001492:	4618      	mov	r0, r3
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	0800640c 	.word	0x0800640c

080014a4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
 80014b0:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	68ba      	ldr	r2, [r7, #8]
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	611a      	str	r2, [r3, #16]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4618      	mov	r0, r3
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68d8      	ldr	r0, [r3, #12]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	6891      	ldr	r1, [r2, #8]
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	4798      	blx	r3
 80014f0:	4603      	mov	r3, r0
  };
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691b      	ldr	r3, [r3, #16]
  }
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 256;
    uint8_t               rbuf[rbuflen];
    uint32_t              rind;
    inline uint32_t       getRdmaInd(void) { return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001528:	b2db      	uxtb	r3, r3
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 256;
    uint8_t               tbuf[tbuflen];
    uint32_t              twind, tfind;

   public:
    STM32Hardware() : huart(&huart1), rind(0), twind(0), tfind(0) {}
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a0a      	ldr	r2, [pc, #40]	; (800156c <_ZN13STM32HardwareC1Ev+0x34>)
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	2000095c 	.word	0x2000095c

08001570 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_) : huart(huart_), rind(0), twind(0), tfind(0) {}

    void init() { reset_rbuf(); }
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f000 f804 	bl	8001586 <_ZN13STM32Hardware10reset_rbufEv>
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void) { HAL_UART_Receive_DMA(huart, rbuf, rbuflen); }
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6818      	ldr	r0, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	3304      	adds	r3, #4
 8001596:	f44f 7280 	mov.w	r2, #256	; 0x100
 800159a:	4619      	mov	r1, r3
 800159c:	f003 fec4 	bl	8005328 <HAL_UART_Receive_DMA>
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <_ZN13STM32Hardware4readEv>:

    int read() {
 80015a8:	b590      	push	{r4, r7, lr}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
        int c = -1;
 80015b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015b4:	60fb      	str	r3, [r7, #12]
        if (rind != getRdmaInd()) {
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff ffa8 	bl	8001512 <_ZN13STM32Hardware10getRdmaIndEv>
 80015c2:	4603      	mov	r3, r0
 80015c4:	429c      	cmp	r4, r3
 80015c6:	bf14      	ite	ne
 80015c8:	2301      	movne	r3, #1
 80015ca:	2300      	moveq	r3, #0
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d011      	beq.n	80015f6 <_ZN13STM32Hardware4readEv+0x4e>
            c = rbuf[rind++];
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80015d8:	1c59      	adds	r1, r3, #1
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	4413      	add	r3, r2
 80015e4:	791b      	ldrb	r3, [r3, #4]
 80015e6:	60fb      	str	r3, [r7, #12]
            rind &= rbuflen - 1;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        }
        return c;
 80015f6:	68fb      	ldr	r3, [r7, #12]
    }
 80015f8:	4618      	mov	r0, r3
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd90      	pop	{r4, r7, pc}

08001600 <_ZN13STM32Hardware5flushEv>:

    void flush(void) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
        static bool mutex = false;

        if ((huart->gState == HAL_UART_STATE_READY) && !mutex) {
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b20      	cmp	r3, #32
 8001614:	d108      	bne.n	8001628 <_ZN13STM32Hardware5flushEv+0x28>
 8001616:	4b27      	ldr	r3, [pc, #156]	; (80016b4 <_ZN13STM32Hardware5flushEv+0xb4>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	f083 0301 	eor.w	r3, r3, #1
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <_ZN13STM32Hardware5flushEv+0x28>
 8001624:	2301      	movs	r3, #1
 8001626:	e000      	b.n	800162a <_ZN13STM32Hardware5flushEv+0x2a>
 8001628:	2300      	movs	r3, #0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d03e      	beq.n	80016ac <_ZN13STM32Hardware5flushEv+0xac>
            mutex = true;
 800162e:	4b21      	ldr	r3, [pc, #132]	; (80016b4 <_ZN13STM32Hardware5flushEv+0xb4>)
 8001630:	2201      	movs	r2, #1
 8001632:	701a      	strb	r2, [r3, #0]

            if (twind != tfind) {
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001640:	429a      	cmp	r2, r3
 8001642:	d030      	beq.n	80016a6 <_ZN13STM32Hardware5flushEv+0xa6>
                uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001650:	429a      	cmp	r2, r3
 8001652:	d20a      	bcs.n	800166a <_ZN13STM32Hardware5flushEv+0x6a>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800165a:	b29a      	uxth	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001662:	b29b      	uxth	r3, r3
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	b29b      	uxth	r3, r3
 8001668:	e006      	b.n	8001678 <_ZN13STM32Hardware5flushEv+0x78>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001670:	b29b      	uxth	r3, r3
 8001672:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001676:	b29b      	uxth	r3, r3
 8001678:	81fb      	strh	r3, [r7, #14]
                HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6818      	ldr	r0, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001684:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	4413      	add	r3, r2
 800168c:	89fa      	ldrh	r2, [r7, #14]
 800168e:	4619      	mov	r1, r3
 8001690:	f003 fdde 	bl	8005250 <HAL_UART_Transmit_DMA>
                tfind = (tfind + len) & (tbuflen - 1);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800169a:	89fb      	ldrh	r3, [r7, #14]
 800169c:	4413      	add	r3, r2
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
            }
            mutex = false;
 80016a6:	4b03      	ldr	r3, [pc, #12]	; (80016b4 <_ZN13STM32Hardware5flushEv+0xb4>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
        }
    }
 80016ac:	bf00      	nop
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000094 	.word	0x20000094

080016b8 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t *data, int length) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
        int n = length;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	617b      	str	r3, [r7, #20]
        n     = n <= tbuflen ? n : tbuflen;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016ce:	bfa8      	it	ge
 80016d0:	f44f 7380 	movge.w	r3, #256	; 0x100
 80016d4:	617b      	str	r3, [r7, #20]

        int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80016dc:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	4293      	cmp	r3, r2
 80016e4:	bf28      	it	cs
 80016e6:	4613      	movcs	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        memcpy(&(tbuf[twind]), data, n_tail);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80016f0:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	4413      	add	r3, r2
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	68b9      	ldr	r1, [r7, #8]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f004 fcc9 	bl	8006094 <memcpy>
        twind = (twind + n) & (tbuflen - 1);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	4413      	add	r3, r2
 800170c:	b2da      	uxtb	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208

        if (n != n_tail) {
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	429a      	cmp	r2, r3
 800171a:	d00b      	beq.n	8001734 <_ZN13STM32Hardware5writeEPhi+0x7c>
            memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f503 7084 	add.w	r0, r3, #264	; 0x108
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	68ba      	ldr	r2, [r7, #8]
 8001726:	18d1      	adds	r1, r2, r3
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	461a      	mov	r2, r3
 8001730:	f004 fcb0 	bl	8006094 <memcpy>
        }

        flush();
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f7ff ff63 	bl	8001600 <_ZN13STM32Hardware5flushEv>
    }
 800173a:	bf00      	nop
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <_ZN13STM32Hardware4timeEv>:

    unsigned long time() {
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
        return HAL_GetTick();
 800174a:	f001 fcdb 	bl	8003104 <HAL_GetTick>
 800174e:	4603      	mov	r3, r0
        ;
    }
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff f868 	bl	8000838 <_ZN3ros3MsgC1Ev>
 8001768:	4a08      	ldr	r2, [pc, #32]	; (800178c <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a07      	ldr	r2, [pc, #28]	; (8001790 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	60da      	str	r2, [r3, #12]
    {
    }
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	080065cc 	.word	0x080065cc
 8001790:	08006390 	.word	0x08006390

08001794 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe fd20 	bl	80001ec <strlen>
 80017ac:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	4413      	add	r3, r2
 80017b4:	68b9      	ldr	r1, [r7, #8]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 fc10 	bl	8001fdc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	3304      	adds	r3, #4
 80017c0:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	18d0      	adds	r0, r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	68ba      	ldr	r2, [r7, #8]
 80017ce:	4619      	mov	r1, r3
 80017d0:	f004 fc60 	bl	8006094 <memcpy>
      offset += length_label;
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	4413      	add	r3, r2
 80017da:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6899      	ldr	r1, [r3, #8]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	4413      	add	r3, r2
 80017e6:	b2ca      	uxtb	r2, r1
 80017e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	0a19      	lsrs	r1, r3, #8
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	3301      	adds	r3, #1
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	4413      	add	r3, r2
 80017f8:	b2ca      	uxtb	r2, r1
 80017fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	0c19      	lsrs	r1, r3, #16
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	3302      	adds	r3, #2
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	4413      	add	r3, r2
 800180a:	b2ca      	uxtb	r2, r1
 800180c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	0e19      	lsrs	r1, r3, #24
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	3303      	adds	r3, #3
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	4413      	add	r3, r2
 800181c:	b2ca      	uxtb	r2, r1
 800181e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	3304      	adds	r3, #4
 8001824:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68d9      	ldr	r1, [r3, #12]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	4413      	add	r3, r2
 8001830:	b2ca      	uxtb	r2, r1
 8001832:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	0a19      	lsrs	r1, r3, #8
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	3301      	adds	r3, #1
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	4413      	add	r3, r2
 8001842:	b2ca      	uxtb	r2, r1
 8001844:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	0c19      	lsrs	r1, r3, #16
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	3302      	adds	r3, #2
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	4413      	add	r3, r2
 8001854:	b2ca      	uxtb	r2, r1
 8001856:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	0e19      	lsrs	r1, r3, #24
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	3303      	adds	r3, #3
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	4413      	add	r3, r2
 8001866:	b2ca      	uxtb	r2, r1
 8001868:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	3304      	adds	r3, #4
 800186e:	60fb      	str	r3, [r7, #12]
      return offset;
 8001870:	68fb      	ldr	r3, [r7, #12]
    }
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	441a      	add	r2, r3
 800188e:	f107 030c 	add.w	r3, r7, #12
 8001892:	4611      	mov	r1, r2
 8001894:	4618      	mov	r0, r3
 8001896:	f000 fbbf 	bl	8002018 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	3304      	adds	r3, #4
 800189e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4413      	add	r3, r2
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d20c      	bcs.n	80018ca <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	441a      	add	r2, r3
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	3b01      	subs	r3, #1
 80018ba:	6839      	ldr	r1, [r7, #0]
 80018bc:	440b      	add	r3, r1
 80018be:	7812      	ldrb	r2, [r2, #0]
 80018c0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	3301      	adds	r3, #1
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	e7ec      	b.n	80018a4 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_label-1]=0;
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4413      	add	r3, r2
 80018d0:	3b01      	subs	r3, #1
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	4413      	add	r3, r2
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	3b01      	subs	r3, #1
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	441a      	add	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	605a      	str	r2, [r3, #4]
      offset += length_label;
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4413      	add	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	4413      	add	r3, r2
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	3301      	adds	r3, #1
 8001904:	6839      	ldr	r1, [r7, #0]
 8001906:	440b      	add	r3, r1
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	431a      	orrs	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	3302      	adds	r3, #2
 800191a:	6839      	ldr	r1, [r7, #0]
 800191c:	440b      	add	r3, r1
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	041b      	lsls	r3, r3, #16
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	3303      	adds	r3, #3
 8001930:	6839      	ldr	r1, [r7, #0]
 8001932:	440b      	add	r3, r1
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	061b      	lsls	r3, r3, #24
 8001938:	431a      	orrs	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	3304      	adds	r3, #4
 8001942:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	4413      	add	r3, r2
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68da      	ldr	r2, [r3, #12]
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	3301      	adds	r3, #1
 800195a:	6839      	ldr	r1, [r7, #0]
 800195c:	440b      	add	r3, r1
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	021b      	lsls	r3, r3, #8
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	3302      	adds	r3, #2
 8001970:	6839      	ldr	r1, [r7, #0]
 8001972:	440b      	add	r3, r1
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	041b      	lsls	r3, r3, #16
 8001978:	431a      	orrs	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68da      	ldr	r2, [r3, #12]
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	3303      	adds	r3, #3
 8001986:	6839      	ldr	r1, [r7, #0]
 8001988:	440b      	add	r3, r1
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	061b      	lsls	r3, r3, #24
 800198e:	431a      	orrs	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	3304      	adds	r3, #4
 8001998:	613b      	str	r3, [r7, #16]
     return offset;
 800199a:	693b      	ldr	r3, [r7, #16]
    }
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayDimension"; };
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	4b03      	ldr	r3, [pc, #12]	; (80019bc <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	08006430 	.word	0x08006430

080019c0 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    const char * getMD5(){ return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	4b03      	ldr	r3, [pc, #12]	; (80019d8 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	08006450 	.word	0x08006450

080019dc <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
      dim_length(0), dim(NULL),
      data_offset(0)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7fe ff26 	bl	8000838 <_ZN3ros3MsgC1Ev>
 80019ec:	4a0a      	ldr	r2, [pc, #40]	; (8001a18 <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3308      	adds	r3, #8
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff feab 	bl	8001758 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]
    {
    }
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	080065b4 	.word	0x080065b4

08001a1c <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6859      	ldr	r1, [r3, #4]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	4413      	add	r3, r2
 8001a34:	b2ca      	uxtb	r2, r1
 8001a36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	0a19      	lsrs	r1, r3, #8
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	3301      	adds	r3, #1
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	4413      	add	r3, r2
 8001a46:	b2ca      	uxtb	r2, r1
 8001a48:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	0c19      	lsrs	r1, r3, #16
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	3302      	adds	r3, #2
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	4413      	add	r3, r2
 8001a58:	b2ca      	uxtb	r2, r1
 8001a5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	0e19      	lsrs	r1, r3, #24
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	3303      	adds	r3, #3
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	4413      	add	r3, r2
 8001a6a:	b2ca      	uxtb	r2, r1
 8001a6c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	3304      	adds	r3, #4
 8001a72:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8001a74:	2300      	movs	r3, #0
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	68ba      	ldr	r2, [r7, #8]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d218      	bcs.n	8001ab4 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x98>
      offset += this->dim[i].serialize(outbuffer + offset);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	699a      	ldr	r2, [r3, #24]
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	011b      	lsls	r3, r3, #4
 8001a8a:	18d0      	adds	r0, r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	699a      	ldr	r2, [r3, #24]
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	011b      	lsls	r3, r3, #4
 8001a94:	4413      	add	r3, r2
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	6839      	ldr	r1, [r7, #0]
 8001a9e:	440a      	add	r2, r1
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	4798      	blx	r3
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	e7e1      	b.n	8001a78 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69d9      	ldr	r1, [r3, #28]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	4413      	add	r3, r2
 8001abe:	b2ca      	uxtb	r2, r1
 8001ac0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	0a19      	lsrs	r1, r3, #8
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	3301      	adds	r3, #1
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	4413      	add	r3, r2
 8001ad0:	b2ca      	uxtb	r2, r1
 8001ad2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	0c19      	lsrs	r1, r3, #16
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	3302      	adds	r3, #2
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	b2ca      	uxtb	r2, r1
 8001ae4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	0e19      	lsrs	r1, r3, #24
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	3303      	adds	r3, #3
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	4413      	add	r3, r2
 8001af4:	b2ca      	uxtb	r2, r1
 8001af6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	3304      	adds	r3, #4
 8001afc:	60fb      	str	r3, [r7, #12]
      return offset;
 8001afe:	68fb      	ldr	r3, [r7, #12]
    }
 8001b00:	4618      	mov	r0, r3
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	3301      	adds	r3, #1
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	021b      	lsls	r3, r3, #8
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	3302      	adds	r3, #2
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	4413      	add	r3, r2
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	041b      	lsls	r3, r3, #16
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	3303      	adds	r3, #3
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	061b      	lsls	r3, r3, #24
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d90a      	bls.n	8001b7c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	699a      	ldr	r2, [r3, #24]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	011b      	lsls	r3, r3, #4
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4610      	mov	r0, r2
 8001b72:	f004 faa5 	bl	80060c0 <realloc>
 8001b76:	4602      	mov	r2, r0
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d21b      	bcs.n	8001bc8 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xc0>
      offset += this->st_dim.deserialize(inbuffer + offset);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f103 0008 	add.w	r0, r3, #8
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f7ff fe6c 	bl	800187a <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	699a      	ldr	r2, [r3, #24]
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	011b      	lsls	r3, r3, #4
 8001bb2:	18d0      	adds	r0, r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3308      	adds	r3, #8
 8001bb8:	2210      	movs	r2, #16
 8001bba:	4619      	mov	r1, r3
 8001bbc:	f004 fa6a 	bl	8006094 <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	e7de      	b.n	8001b86 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x7e>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	4413      	add	r3, r2
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69da      	ldr	r2, [r3, #28]
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	6839      	ldr	r1, [r7, #0]
 8001be0:	440b      	add	r3, r1
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	021b      	lsls	r3, r3, #8
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69da      	ldr	r2, [r3, #28]
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	6839      	ldr	r1, [r7, #0]
 8001bf6:	440b      	add	r3, r1
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	041b      	lsls	r3, r3, #16
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69da      	ldr	r2, [r3, #28]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	3303      	adds	r3, #3
 8001c0a:	6839      	ldr	r1, [r7, #0]
 8001c0c:	440b      	add	r3, r1
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	061b      	lsls	r3, r3, #24
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	3304      	adds	r3, #4
 8001c1c:	617b      	str	r3, [r7, #20]
     return offset;
 8001c1e:	697b      	ldr	r3, [r7, #20]
    }
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayLayout"; };
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	4b03      	ldr	r3, [pc, #12]	; (8001c40 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 8001c32:	4618      	mov	r0, r3
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	08006474 	.word	0x08006474

08001c44 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    const char * getMD5(){ return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	4b03      	ldr	r3, [pc, #12]	; (8001c5c <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	08006490 	.word	0x08006490

08001c60 <_ZN8std_msgs17Float32MultiArrayC1Ev>:
      uint32_t data_length;
      typedef float _data_type;
      _data_type st_data;
      _data_type * data;

    Float32MultiArray():
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), data(NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fde4 	bl	8000838 <_ZN3ros3MsgC1Ev>
 8001c70:	4a09      	ldr	r2, [pc, #36]	; (8001c98 <_ZN8std_msgs17Float32MultiArrayC1Ev+0x38>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff feae 	bl	80019dc <_ZN8std_msgs16MultiArrayLayoutC1Ev>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	625a      	str	r2, [r3, #36]	; 0x24
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	0800659c 	.word	0x0800659c

08001c9c <_ZNK8std_msgs17Float32MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	1d18      	adds	r0, r3, #4
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f7ff feb1 	bl	8001a1c <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	b2ca      	uxtb	r2, r1
 8001cce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	0a19      	lsrs	r1, r3, #8
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	4413      	add	r3, r2
 8001cde:	b2ca      	uxtb	r2, r1
 8001ce0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	0c19      	lsrs	r1, r3, #16
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	3302      	adds	r3, #2
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	4413      	add	r3, r2
 8001cf0:	b2ca      	uxtb	r2, r1
 8001cf2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf8:	0e19      	lsrs	r1, r3, #24
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	3303      	adds	r3, #3
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	4413      	add	r3, r2
 8001d02:	b2ca      	uxtb	r2, r1
 8001d04:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d22b      	bcs.n	8001d72 <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0xd6>
      union {
        float real;
        uint32_t base;
      } u_datai;
      u_datai.real = this->data[i];
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 8001d28:	68f9      	ldr	r1, [r7, #12]
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	4413      	add	r3, r2
 8001d30:	b2ca      	uxtb	r2, r1
 8001d32:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	0a19      	lsrs	r1, r3, #8
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	4413      	add	r3, r2
 8001d40:	b2ca      	uxtb	r2, r1
 8001d42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	0c19      	lsrs	r1, r3, #16
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	3302      	adds	r3, #2
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	b2ca      	uxtb	r2, r1
 8001d52:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	0e19      	lsrs	r1, r3, #24
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	3303      	adds	r3, #3
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	4413      	add	r3, r2
 8001d60:	b2ca      	uxtb	r2, r1
 8001d62:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	3304      	adds	r3, #4
 8001d68:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	e7ce      	b.n	8001d10 <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0x74>
      }
      return offset;
 8001d72:	697b      	ldr	r3, [r7, #20]
    }
 8001d74:	4618      	mov	r0, r3
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <_ZN8std_msgs17Float32MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	1d18      	adds	r0, r3, #4
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	4413      	add	r3, r2
 8001d94:	4619      	mov	r1, r3
 8001d96:	f7ff feb7 	bl	8001b08 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	4413      	add	r3, r2
 8001da0:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	4413      	add	r3, r2
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	3301      	adds	r3, #1
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	4413      	add	r3, r2
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	021b      	lsls	r3, r3, #8
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	3302      	adds	r3, #2
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	041b      	lsls	r3, r3, #16
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	3303      	adds	r3, #3
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	061b      	lsls	r3, r3, #24
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	3304      	adds	r3, #4
 8001de6:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d90a      	bls.n	8001e08 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x8c>
        this->data = (float*)realloc(this->data, data_lengthT * sizeof(float));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	f004 f95f 	bl	80060c0 <realloc>
 8001e02:	4602      	mov	r2, r0
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d236      	bcs.n	8001e8a <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x10e>
      union {
        float real;
        uint32_t base;
      } u_st_data;
      u_st_data.base = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	6839      	ldr	r1, [r7, #0]
 8001e26:	440a      	add	r2, r1
 8001e28:	7812      	ldrb	r2, [r2, #0]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	3301      	adds	r3, #1
 8001e34:	6839      	ldr	r1, [r7, #0]
 8001e36:	440b      	add	r3, r1
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	021b      	lsls	r3, r3, #8
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	3302      	adds	r3, #2
 8001e46:	6839      	ldr	r1, [r7, #0]
 8001e48:	440b      	add	r3, r1
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	041b      	lsls	r3, r3, #16
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	3303      	adds	r3, #3
 8001e58:	6839      	ldr	r1, [r7, #0]
 8001e5a:	440b      	add	r3, r1
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	061b      	lsls	r3, r3, #24
 8001e60:	4313      	orrs	r3, r2
 8001e62:	60bb      	str	r3, [r7, #8]
      this->st_data = u_st_data.real;
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	629a      	str	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	3228      	adds	r2, #40	; 0x28
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	3301      	adds	r3, #1
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	e7c3      	b.n	8001e12 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x96>
      }
     return offset;
 8001e8a:	697b      	ldr	r3, [r7, #20]
    }
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <_ZN8std_msgs17Float32MultiArray7getTypeEv>:

    const char * getType(){ return "std_msgs/Float32MultiArray"; };
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	4b03      	ldr	r3, [pc, #12]	; (8001eac <_ZN8std_msgs17Float32MultiArray7getTypeEv+0x18>)
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	080064b4 	.word	0x080064b4

08001eb0 <_ZN8std_msgs17Float32MultiArray6getMD5Ev>:
    const char * getMD5(){ return "6a40e0ffa6a17a503ac3f8616991b1f6"; };
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	4b03      	ldr	r3, [pc, #12]	; (8001ec8 <_ZN8std_msgs17Float32MultiArray6getMD5Ev+0x18>)
 8001eba:	4618      	mov	r0, r3
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	080064d0 	.word	0x080064d0

08001ecc <HAL_UART_TxCpltCallback>:
#include <ros.h>
#include <std_msgs/Float32MultiArray.h>

ros::NodeHandle nh;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8001ed4:	4805      	ldr	r0, [pc, #20]	; (8001eec <HAL_UART_TxCpltCallback+0x20>)
 8001ed6:	f000 f955 	bl	8002184 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8001eda:	4603      	mov	r3, r0
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff fb8f 	bl	8001600 <_ZN13STM32Hardware5flushEv>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000098 	.word	0x20000098

08001ef0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8001ef8:	4805      	ldr	r0, [pc, #20]	; (8001f10 <HAL_UART_RxCpltCallback+0x20>)
 8001efa:	f000 f943 	bl	8002184 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fb40 	bl	8001586 <_ZN13STM32Hardware10reset_rbufEv>
//    nh.subscribe(rx_callback);
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000098 	.word	0x20000098

08001f14 <_Z11rx_callbackRKN8std_msgs17Float32MultiArrayE>:
float rx_buffer[1];

std_msgs::Float32MultiArray tx_data;
std_msgs::Float32MultiArray rx_data;

void rx_callback(const std_msgs::Float32MultiArray &data) {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
    memset(rx_data.data, 0, 1 * sizeof(float));
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <_Z11rx_callbackRKN8std_msgs17Float32MultiArrayE+0x3c>)
 8001f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f20:	2204      	movs	r2, #4
 8001f22:	2100      	movs	r1, #0
 8001f24:	4618      	mov	r0, r3
 8001f26:	f004 f8c3 	bl	80060b0 <memset>
    memcpy(rx_data.data, data.data, data.data_length * sizeof(float));
 8001f2a:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <_Z11rx_callbackRKN8std_msgs17Float32MultiArrayE+0x3c>)
 8001f2c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	461a      	mov	r2, r3
 8001f3a:	f004 f8ab 	bl	8006094 <memcpy>
    rx_data.data_length = data.data_length;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	4a03      	ldr	r2, [pc, #12]	; (8001f50 <_Z11rx_callbackRKN8std_msgs17Float32MultiArrayE+0x3c>)
 8001f44:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000808 	.word	0x20000808

08001f54 <rosserial_init>:

ros::Publisher                               pub("from_st1", &tx_data);
ros::Subscriber<std_msgs::Float32MultiArray> sub("to_st1", rx_callback);

void rosserial_init(void) {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
    nh.initNode();
 8001f58:	480a      	ldr	r0, [pc, #40]	; (8001f84 <rosserial_init+0x30>)
 8001f5a:	f000 f953 	bl	8002204 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.advertise(pub);
 8001f5e:	490a      	ldr	r1, [pc, #40]	; (8001f88 <rosserial_init+0x34>)
 8001f60:	4808      	ldr	r0, [pc, #32]	; (8001f84 <rosserial_init+0x30>)
 8001f62:	f000 f96c 	bl	800223e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
    nh.subscribe(sub);
 8001f66:	4909      	ldr	r1, [pc, #36]	; (8001f8c <rosserial_init+0x38>)
 8001f68:	4806      	ldr	r0, [pc, #24]	; (8001f84 <rosserial_init+0x30>)
 8001f6a:	f000 f998 	bl	800229e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
    tx_data.data        = tx_buffer;
 8001f6e:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <rosserial_init+0x3c>)
 8001f70:	4a08      	ldr	r2, [pc, #32]	; (8001f94 <rosserial_init+0x40>)
 8001f72:	62da      	str	r2, [r3, #44]	; 0x2c
    rx_data.data        = rx_buffer;
 8001f74:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <rosserial_init+0x44>)
 8001f76:	4a09      	ldr	r2, [pc, #36]	; (8001f9c <rosserial_init+0x48>)
 8001f78:	62da      	str	r2, [r3, #44]	; 0x2c
    tx_data.data_length = 1;
 8001f7a:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <rosserial_init+0x3c>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000098 	.word	0x20000098
 8001f88:	20000838 	.word	0x20000838
 8001f8c:	2000084c 	.word	0x2000084c
 8001f90:	200007d8 	.word	0x200007d8
 8001f94:	20000000 	.word	0x20000000
 8001f98:	20000808 	.word	0x20000808
 8001f9c:	200007d4 	.word	0x200007d4

08001fa0 <rosserial_task>:

void rosserial_task(void) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
    pub.publish(&tx_data);
 8001fa4:	4904      	ldr	r1, [pc, #16]	; (8001fb8 <rosserial_task+0x18>)
 8001fa6:	4805      	ldr	r0, [pc, #20]	; (8001fbc <rosserial_task+0x1c>)
 8001fa8:	f7ff fa93 	bl	80014d2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    nh.spinOnce();
 8001fac:	4804      	ldr	r0, [pc, #16]	; (8001fc0 <rosserial_task+0x20>)
 8001fae:	f000 f9a1 	bl	80022f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	200007d8 	.word	0x200007d8
 8001fbc:	20000838 	.word	0x20000838
 8001fc0:	20000098 	.word	0x20000098

08001fc4 <roslog>:
void roslog() {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
    nh.loginfo("start");
 8001fc8:	4902      	ldr	r1, [pc, #8]	; (8001fd4 <roslog+0x10>)
 8001fca:	4803      	ldr	r0, [pc, #12]	; (8001fd8 <roslog+0x14>)
 8001fcc:	f000 fb6b 	bl	80026a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>
}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	080064f4 	.word	0x080064f4
 8001fd8:	20000098 	.word	0x20000098

08001fdc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2b03      	cmp	r3, #3
 8001fee:	d80d      	bhi.n	800200c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	fa22 f103 	lsr.w	r1, r2, r3
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4413      	add	r3, r2
 8002000:	b2ca      	uxtb	r2, r1
 8002002:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	3301      	adds	r3, #1
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	e7ee      	b.n	8001fea <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 800200c:	bf00      	nop
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2b03      	cmp	r3, #3
 8002030:	d811      	bhi.n	8002056 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6839      	ldr	r1, [r7, #0]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	440a      	add	r2, r1
 800203c:	7812      	ldrb	r2, [r2, #0]
 800203e:	4611      	mov	r1, r2
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	00d2      	lsls	r2, r2, #3
 8002044:	fa01 f202 	lsl.w	r2, r1, r2
 8002048:	431a      	orrs	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	3301      	adds	r3, #1
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	e7ea      	b.n	800202c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8002056:	bf00      	nop
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
	...

08002064 <_ZN3ros15NodeHandleBase_C1Ev>:

#include "ros/msg.h"

namespace ros {

class NodeHandleBase_ {
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	4a04      	ldr	r2, [pc, #16]	; (8002080 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	080065fc 	.word	0x080065fc

08002084 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

    /*
     * Setup Functions
     */
   public:
    NodeHandle_() : configured_(false) {
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff ffe8 	bl	8002064 <_ZN3ros15NodeHandleBase_C1Ev>
 8002094:	4a3a      	ldr	r2, [pc, #232]	; (8002180 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3304      	adds	r3, #4
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff fa4a 	bl	8001538 <_ZN13STM32HardwareC1Ev>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2700 	strb.w	r2, [r3, #1792]	; 0x700
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f203 7314 	addw	r3, r3, #1812	; 0x714
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe ff34 	bl	8000f20 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
        for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	2b18      	cmp	r3, #24
 80020c0:	d80b      	bhi.n	80020da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
            publishers[i] = 0;
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	2200      	movs	r2, #0
 80020d0:	605a      	str	r2, [r3, #4]
        for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	3301      	adds	r3, #1
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	e7f0      	b.n	80020bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

        for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	2b18      	cmp	r3, #24
 80020e2:	d80a      	bhi.n	80020fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
            subscribers[i] = 0;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	f502 72d1 	add.w	r2, r2, #418	; 0x1a2
 80020ec:	2100      	movs	r1, #0
 80020ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	3301      	adds	r3, #1
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	e7f1      	b.n	80020de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

        for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002104:	d20a      	bcs.n	800211c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
            message_in[i] = 0;
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4413      	add	r3, r2
 800210c:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8002110:	2200      	movs	r2, #0
 8002112:	701a      	strb	r2, [r3, #0]
        for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	3301      	adds	r3, #1
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	e7f0      	b.n	80020fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

        for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800211c:	2300      	movs	r3, #0
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002126:	d20a      	bcs.n	800213e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
            message_out[i] = 0;
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	4413      	add	r3, r2
 800212e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]
        for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	3301      	adds	r3, #1
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	e7f0      	b.n	8002120 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

        req_param_resp.ints_length   = 0;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f8c3 2718 	str.w	r2, [r3, #1816]	; 0x718
        req_param_resp.ints          = NULL;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
        req_param_resp.floats_length = 0;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f8c3 2724 	str.w	r2, [r3, #1828]	; 0x724
        req_param_resp.floats        = NULL;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f8c3 272c 	str.w	r2, [r3, #1836]	; 0x72c
        req_param_resp.ints_length   = 0;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f8c3 2718 	str.w	r2, [r3, #1816]	; 0x718
        req_param_resp.ints          = NULL;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720

        spin_timeout_ = 0;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
    }
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4618      	mov	r0, r3
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	08006588 	.word	0x08006588

08002184 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

    Hardware* getHardware() { return &hardware_; }
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3304      	adds	r3, #4
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <_ZN3ros11Subscriber_C1Ev>:
#include "rosserial_msgs/TopicInfo.h"

namespace ros {

/* Base class for objects subscribers. */
class Subscriber_ {
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	4a04      	ldr	r2, [pc, #16]	; (80021b8 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4618      	mov	r0, r3
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	080065e4 	.word	0x080065e4

080021bc <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei>:
class Subscriber<MsgT, void> : public Subscriber_ {
   public:
    typedef void (*CallbackT)(const MsgT&);
    MsgT msg;

    Subscriber(const char* topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER)
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
 80021c8:	603b      	str	r3, [r7, #0]
    : cb_(cb), endpoint_(endpoint) {
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff ffe5 	bl	800219c <_ZN3ros11Subscriber_C1Ev>
 80021d2:	4a0b      	ldr	r2, [pc, #44]	; (8002200 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei+0x44>)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	330c      	adds	r3, #12
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff fd3f 	bl	8001c60 <_ZN8std_msgs17Float32MultiArrayC1Ev>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	641a      	str	r2, [r3, #64]	; 0x40
        topic_ = topic_name;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	609a      	str	r2, [r3, #8]
    };
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	08006570 	.word	0x08006570

08002204 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

    /* Start serial, initialize buffers */
    void initNode() {
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
        hardware_.init();
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3304      	adds	r3, #4
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff f9ad 	bl	8001570 <_ZN13STM32Hardware4initEv>
        mode_  = 0;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec
        bytes_ = 0;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f8c3 26f0 	str.w	r2, [r3, #1776]	; 0x6f0
        index_ = 0;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f8c3 26f8 	str.w	r2, [r3, #1784]	; 0x6f8
        topic_ = 0;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f8c3 26f4 	str.w	r2, [r3, #1780]	; 0x6f4
    };
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
    /********************************************************************
     * Topic Management
     */

    /* Register a new publisher */
    bool advertise(Publisher& p) {
 800223e:	b480      	push	{r7}
 8002240:	b085      	sub	sp, #20
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	6039      	str	r1, [r7, #0]
        for (int i = 0; i < MAX_PUBLISHERS; i++) {
 8002248:	2300      	movs	r3, #0
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2b18      	cmp	r3, #24
 8002250:	dc1e      	bgt.n	8002290 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
            if (publishers[i] == 0)    // empty slot
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d111      	bne.n	8002288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
            {
                publishers[i] = &p;
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	605a      	str	r2, [r3, #4]
                p.id_         = i + 100 + MAX_SUBSCRIBERS;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	609a      	str	r2, [r3, #8]
                p.nh_         = this;
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	60da      	str	r2, [r3, #12]
                return true;
 8002284:	2301      	movs	r3, #1
 8002286:	e004      	b.n	8002292 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
        for (int i = 0; i < MAX_PUBLISHERS; i++) {
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	3301      	adds	r3, #1
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	e7dd      	b.n	800224c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
            }
        }
        return false;
 8002290:	2300      	movs	r3, #0
    }
 8002292:	4618      	mov	r0, r3
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

    /* Register a new subscriber */
    bool subscribe(Subscriber_& s) {
 800229e:	b480      	push	{r7}
 80022a0:	b085      	sub	sp, #20
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	6039      	str	r1, [r7, #0]
        for (int i = 0; i < MAX_SUBSCRIBERS; i++) {
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2b18      	cmp	r3, #24
 80022b0:	dc19      	bgt.n	80022e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x48>
            if (subscribers[i] == 0)    // empty slot
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	f502 72d1 	add.w	r2, r2, #418	; 0x1a2
 80022ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10d      	bne.n	80022de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x40>
            {
                subscribers[i] = &s;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	f502 72d1 	add.w	r2, r2, #418	; 0x1a2
 80022ca:	6839      	ldr	r1, [r7, #0]
 80022cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                s.id_          = i + 100;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	605a      	str	r2, [r3, #4]
                return true;
 80022da:	2301      	movs	r3, #1
 80022dc:	e004      	b.n	80022e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
        for (int i = 0; i < MAX_SUBSCRIBERS; i++) {
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	3301      	adds	r3, #1
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	e7e2      	b.n	80022ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0xe>
            }
        }
        return false;
 80022e6:	2300      	movs	r3, #0
    }
 80022e8:	4618      	mov	r0, r3
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
    virtual int spinOnce() {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
        uint32_t c_time = hardware_.time();
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3304      	adds	r3, #4
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff fa1e 	bl	8001742 <_ZN13STM32Hardware4timeEv>
 8002306:	60f8      	str	r0, [r7, #12]
        if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200)) {
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8002316:	4293      	cmp	r3, r2
 8002318:	d903      	bls.n	8002322 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
            configured_ = false;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2700 	strb.w	r2, [r3, #1792]	; 0x700
        if (mode_ != MODE_FIRST_FF) {
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8002328:	2b00      	cmp	r3, #0
 800232a:	d009      	beq.n	8002340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (c_time > last_msg_timeout_time) {
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f8d3 370c 	ldr.w	r3, [r3, #1804]	; 0x70c
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	429a      	cmp	r2, r3
 8002336:	d903      	bls.n	8002340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
                mode_ = MODE_FIRST_FF;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec
            if (spin_timeout_ > 0) {
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8002346:	2b00      	cmp	r3, #0
 8002348:	d014      	beq.n	8002374 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
                if ((hardware_.time() - c_time) > spin_timeout_) {
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3304      	adds	r3, #4
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff f9f7 	bl	8001742 <_ZN13STM32Hardware4timeEv>
 8002354:	4602      	mov	r2, r0
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1ad2      	subs	r2, r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8002360:	429a      	cmp	r2, r3
 8002362:	bf8c      	ite	hi
 8002364:	2301      	movhi	r3, #1
 8002366:	2300      	movls	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d002      	beq.n	8002374 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
                    return SPIN_TIMEOUT;
 800236e:	f06f 0301 	mvn.w	r3, #1
 8002372:	e194      	b.n	800269e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
            int data = hardware_.read();
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3304      	adds	r3, #4
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff f915 	bl	80015a8 <_ZN13STM32Hardware4readEv>
 800237e:	60b8      	str	r0, [r7, #8]
            if (data < 0)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	2b00      	cmp	r3, #0
 8002384:	f2c0 8174 	blt.w	8002670 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
            checksum_ += data;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f8d3 26fc 	ldr.w	r2, [r3, #1788]	; 0x6fc
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	441a      	add	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f8c3 26fc 	str.w	r2, [r3, #1788]	; 0x6fc
            if (mode_ == MODE_MESSAGE) /* message data being recieved */
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 800239e:	2b07      	cmp	r3, #7
 80023a0:	d11e      	bne.n	80023e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
                message_in[index_++] = data;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 80023a8:	1c59      	adds	r1, r3, #1
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	f8c2 16f8 	str.w	r1, [r2, #1784]	; 0x6f8
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	b2d1      	uxtb	r1, r2
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	4413      	add	r3, r2
 80023b8:	460a      	mov	r2, r1
 80023ba:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
                bytes_--;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	; 0x6f0
 80023c4:	1e5a      	subs	r2, r3, #1
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f8c3 26f0 	str.w	r2, [r3, #1776]	; 0x6f0
                if (bytes_ == 0) /* is message complete? if so, checksum */
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	; 0x6f0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1b4      	bne.n	8002340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
                    mode_ = MODE_MSG_CHECKSUM;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2208      	movs	r2, #8
 80023da:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec
 80023de:	e7af      	b.n	8002340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            } else if (mode_ == MODE_FIRST_FF) {
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d128      	bne.n	800243c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
                if (data == 0xff) {
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2bff      	cmp	r3, #255	; 0xff
 80023ee:	d10d      	bne.n	800240c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
                    mode_++;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 80023f6:	1c5a      	adds	r2, r3, #1
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec
                    last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f103 0214 	add.w	r2, r3, #20
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
 800240a:	e799      	b.n	8002340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
                } else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000)) {
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3304      	adds	r3, #4
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff f996 	bl	8001742 <_ZN13STM32Hardware4timeEv>
 8002416:	4602      	mov	r2, r0
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002420:	4293      	cmp	r3, r2
 8002422:	bf8c      	ite	hi
 8002424:	2301      	movhi	r3, #1
 8002426:	2300      	movls	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d088      	beq.n	8002340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
                    configured_ = false;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2700 	strb.w	r2, [r3, #1792]	; 0x700
                    return SPIN_TIMEOUT;
 8002436:	f06f 0301 	mvn.w	r3, #1
 800243a:	e130      	b.n	800269e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
            } else if (mode_ == MODE_PROTOCOL_VER) {
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8002442:	2b01      	cmp	r3, #1
 8002444:	d118      	bne.n	8002478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
                if (data == PROTOCOL_VER) {
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2bfe      	cmp	r3, #254	; 0xfe
 800244a:	d107      	bne.n	800245c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
                    mode_++;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec
 800245a:	e771      	b.n	8002340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
                    mode_ = MODE_FIRST_FF;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec
                    if (configured_ == false)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 3700 	ldrb.w	r3, [r3, #1792]	; 0x700
 800246a:	2b00      	cmp	r3, #0
 800246c:	f47f af68 	bne.w	8002340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
                        requestSyncTime(); /* send a msg back showing our protocol version */
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f926 	bl	80026c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8002476:	e763      	b.n	8002340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            } else if (mode_ == MODE_SIZE_L) /* bottom half of message size */
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 800247e:	2b02      	cmp	r3, #2
 8002480:	d113      	bne.n	80024aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
                bytes_ = data;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	f8c3 26f0 	str.w	r2, [r3, #1776]	; 0x6f0
                index_ = 0;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f8c3 26f8 	str.w	r2, [r3, #1784]	; 0x6f8
                mode_++;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec
                checksum_ = data;            /* first byte for calculating size checksum */
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	f8c3 26fc 	str.w	r2, [r3, #1788]	; 0x6fc
 80024a8:	e74a      	b.n	8002340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            } else if (mode_ == MODE_SIZE_H) /* top half of message size */
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 80024b0:	2b03      	cmp	r3, #3
 80024b2:	d110      	bne.n	80024d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
                bytes_ += data << 8;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f8d3 26f0 	ldr.w	r2, [r3, #1776]	; 0x6f0
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	021b      	lsls	r3, r3, #8
 80024be:	441a      	add	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f8c3 26f0 	str.w	r2, [r3, #1776]	; 0x6f0
                mode_++;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec
 80024d4:	e734      	b.n	8002340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            } else if (mode_ == MODE_SIZE_CHECKSUM) {
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 80024dc:	2b04      	cmp	r3, #4
 80024de:	d116      	bne.n	800250e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
                if ((checksum_ % 256) == 255)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f8d3 36fc 	ldr.w	r3, [r3, #1788]	; 0x6fc
 80024e6:	425a      	negs	r2, r3
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	bf58      	it	pl
 80024ee:	4253      	negpl	r3, r2
 80024f0:	2bff      	cmp	r3, #255	; 0xff
 80024f2:	d107      	bne.n	8002504 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
                    mode_++;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec
 8002502:	e71d      	b.n	8002340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
                    mode_ = MODE_FIRST_FF;    /* Abandon the frame if the msg len is wrong */
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec
 800250c:	e718      	b.n	8002340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            } else if (mode_ == MODE_TOPIC_L) /* bottom half of topic id */
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8002514:	2b05      	cmp	r3, #5
 8002516:	d10f      	bne.n	8002538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
                topic_ = data;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	f8c3 26f4 	str.w	r2, [r3, #1780]	; 0x6f4
                mode_++;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec
                checksum_ = data;             /* first byte included in checksum */
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	f8c3 26fc 	str.w	r2, [r3, #1788]	; 0x6fc
 8002536:	e703      	b.n	8002340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            } else if (mode_ == MODE_TOPIC_H) /* top half of topic id */
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 800253e:	2b06      	cmp	r3, #6
 8002540:	d117      	bne.n	8002572 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
                topic_ += data << 8;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f8d3 26f4 	ldr.w	r2, [r3, #1780]	; 0x6f4
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	021b      	lsls	r3, r3, #8
 800254c:	441a      	add	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f8c3 26f4 	str.w	r2, [r3, #1780]	; 0x6f4
                mode_ = MODE_MESSAGE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2207      	movs	r2, #7
 8002558:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec
                if (bytes_ == 0)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	; 0x6f0
 8002562:	2b00      	cmp	r3, #0
 8002564:	f47f aeec 	bne.w	8002340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
                    mode_ = MODE_MSG_CHECKSUM;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2208      	movs	r2, #8
 800256c:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec
 8002570:	e6e6      	b.n	8002340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            } else if (mode_ == MODE_MSG_CHECKSUM) /* do checksum */
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8002578:	2b08      	cmp	r3, #8
 800257a:	f47f aee1 	bne.w	8002340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
                mode_ = MODE_FIRST_FF;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec
                if ((checksum_ % 256) == 255) {
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f8d3 36fc 	ldr.w	r3, [r3, #1788]	; 0x6fc
 800258c:	425a      	negs	r2, r3
 800258e:	b2db      	uxtb	r3, r3
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	bf58      	it	pl
 8002594:	4253      	negpl	r3, r2
 8002596:	2bff      	cmp	r3, #255	; 0xff
 8002598:	f47f aed2 	bne.w	8002340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
                    if (topic_ == TopicInfo::ID_PUBLISHER) {
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f8d3 36f4 	ldr.w	r3, [r3, #1780]	; 0x6f4
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d110      	bne.n	80025c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
                        requestSyncTime();
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f88b 	bl	80026c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
                        negotiateTopics();
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f8a6 	bl	80026fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
                        last_sync_time         = c_time;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
                        last_sync_receive_time = c_time;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	f8c3 2708 	str.w	r2, [r3, #1800]	; 0x708
                        return SPIN_ERR;
 80025c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025c6:	e06a      	b.n	800269e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
                    } else if (topic_ == TopicInfo::ID_TIME) {
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f8d3 36f4 	ldr.w	r3, [r3, #1780]	; 0x6f4
 80025ce:	2b0a      	cmp	r3, #10
 80025d0:	d107      	bne.n	80025e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
                        syncTime(message_in);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80025d8:	4619      	mov	r1, r3
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f96e 	bl	80028bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80025e0:	e6ae      	b.n	8002340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
                    } else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST) {
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f8d3 36f4 	ldr.w	r3, [r3, #1780]	; 0x6f4
 80025e8:	2b06      	cmp	r3, #6
 80025ea:	d10e      	bne.n	800260a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
                        req_param_resp.deserialize(message_in);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f203 7214 	addw	r2, r3, #1812	; 0x714
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80025f8:	4619      	mov	r1, r3
 80025fa:	4610      	mov	r0, r2
 80025fc:	f7fe fdc5 	bl	800118a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
                        param_recieved = true;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2710 	strb.w	r2, [r3, #1808]	; 0x710
 8002608:	e69a      	b.n	8002340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
                    } else if (topic_ == TopicInfo::ID_TX_STOP) {
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f8d3 36f4 	ldr.w	r3, [r3, #1780]	; 0x6f4
 8002610:	2b0b      	cmp	r3, #11
 8002612:	d104      	bne.n	800261e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
                        configured_ = false;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2700 	strb.w	r2, [r3, #1792]	; 0x700
 800261c:	e690      	b.n	8002340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
                        if (subscribers[topic_ - 100])
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f8d3 36f4 	ldr.w	r3, [r3, #1780]	; 0x6f4
 8002624:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f502 72d1 	add.w	r2, r2, #418	; 0x1a2
 800262e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002632:	2b00      	cmp	r3, #0
 8002634:	f43f ae84 	beq.w	8002340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
                            subscribers[topic_ - 100]->callback(message_in);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f8d3 36f4 	ldr.w	r3, [r3, #1780]	; 0x6f4
 800263e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f502 72d1 	add.w	r2, r2, #418	; 0x1a2
 8002648:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f8d3 36f4 	ldr.w	r3, [r3, #1780]	; 0x6f4
 8002652:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f502 72d1 	add.w	r2, r2, #418	; 0x1a2
 800265c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	f502 7209 	add.w	r2, r2, #548	; 0x224
 800266a:	4611      	mov	r1, r2
 800266c:	4798      	blx	r3
        while (true) {
 800266e:	e667      	b.n	8002340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
                break;
 8002670:	bf00      	nop
        if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500))) {
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3700 	ldrb.w	r3, [r3, #1792]	; 0x700
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00f      	beq.n	800269c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f8d3 3704 	ldr.w	r3, [r3, #1796]	; 0x704
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800268a:	4293      	cmp	r3, r2
 800268c:	d906      	bls.n	800269c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
            requestSyncTime();
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f817 	bl	80026c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            last_sync_time = c_time;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
        return SPIN_OK;
 800269c:	2300      	movs	r3, #0
    }
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>:
        publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
    }

   public:
    void logdebug(const char* msg) { log(rosserial_msgs::Log::ROSDEBUG, msg); }
    void loginfo(const char* msg) { log(rosserial_msgs::Log::INFO, msg); }
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
 80026ae:	6039      	str	r1, [r7, #0]
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	2101      	movs	r1, #1
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 f94d 	bl	8002954 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
    void requestSyncTime() {
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b086      	sub	sp, #24
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
        std_msgs::Time t;
 80026ca:	f107 030c 	add.w	r3, r7, #12
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fe f8c2 	bl	8000858 <_ZN8std_msgs4TimeC1Ev>
        publish(TopicInfo::ID_TIME, &t);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f107 020c 	add.w	r2, r7, #12
 80026de:	210a      	movs	r1, #10
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	4798      	blx	r3
        rt_time = hardware_.time();
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3304      	adds	r3, #4
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff f82a 	bl	8001742 <_ZN13STM32Hardware4timeEv>
 80026ee:	4602      	mov	r2, r0
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
 80026f6:	bf00      	nop
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    void negotiateTopics() {
 80026fe:	b590      	push	{r4, r7, lr}
 8002700:	b08b      	sub	sp, #44	; 0x2c
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
        rosserial_msgs::TopicInfo ti;
 8002706:	f107 030c 	add.w	r3, r7, #12
 800270a:	4618      	mov	r0, r3
 800270c:	f7fe f994 	bl	8000a38 <_ZN14rosserial_msgs9TopicInfoC1Ev>
        for (i = 0; i < MAX_PUBLISHERS; i++) {
 8002710:	2300      	movs	r3, #0
 8002712:	627b      	str	r3, [r7, #36]	; 0x24
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	2b18      	cmp	r3, #24
 8002718:	dc63      	bgt.n	80027e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
            if (publishers[i] != 0)    // non-empty slot
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d056      	beq.n	80027da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
                ti.topic_id     = publishers[i]->id_;
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	b29b      	uxth	r3, r3
 800273e:	823b      	strh	r3, [r7, #16]
                ti.topic_name   = (char*)publishers[i]->topic_;
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	617b      	str	r3, [r7, #20]
                ti.message_type = (char*)publishers[i]->msg_->getType();
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	6859      	ldr	r1, [r3, #4]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	3308      	adds	r3, #8
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4608      	mov	r0, r1
 800277a:	4798      	blx	r3
 800277c:	4603      	mov	r3, r0
 800277e:	61bb      	str	r3, [r7, #24]
                ti.md5sum       = (char*)publishers[i]->msg_->getMD5();
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	6859      	ldr	r1, [r3, #4]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	330c      	adds	r3, #12
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4608      	mov	r0, r1
 80027a8:	4798      	blx	r3
 80027aa:	4603      	mov	r3, r0
 80027ac:	61fb      	str	r3, [r7, #28]
                ti.buffer_size  = OUTPUT_SIZE;
 80027ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027b2:	623b      	str	r3, [r7, #32]
                publish(publishers[i]->getEndpointType(), &ti);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681c      	ldr	r4, [r3, #0]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7fe fe96 	bl	80014fa <_ZN3ros9Publisher15getEndpointTypeEv>
 80027ce:	4601      	mov	r1, r0
 80027d0:	f107 030c 	add.w	r3, r7, #12
 80027d4:	461a      	mov	r2, r3
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	47a0      	blx	r4
        for (i = 0; i < MAX_PUBLISHERS; i++) {
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	3301      	adds	r3, #1
 80027de:	627b      	str	r3, [r7, #36]	; 0x24
 80027e0:	e798      	b.n	8002714 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
        for (i = 0; i < MAX_SUBSCRIBERS; i++) {
 80027e2:	2300      	movs	r3, #0
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	2b18      	cmp	r3, #24
 80027ea:	dc5f      	bgt.n	80028ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
            if (subscribers[i] != 0)    // non-empty slot
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f0:	f502 72d1 	add.w	r2, r2, #418	; 0x1a2
 80027f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d053      	beq.n	80028a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
                ti.topic_id     = subscribers[i]->id_;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002800:	f502 72d1 	add.w	r2, r2, #418	; 0x1a2
 8002804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	b29b      	uxth	r3, r3
 800280c:	823b      	strh	r3, [r7, #16]
                ti.topic_name   = (char*)subscribers[i]->topic_;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002812:	f502 72d1 	add.w	r2, r2, #418	; 0x1a2
 8002816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	617b      	str	r3, [r7, #20]
                ti.message_type = (char*)subscribers[i]->getMsgType();
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002822:	f502 72d1 	add.w	r2, r2, #418	; 0x1a2
 8002826:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282e:	f502 72d1 	add.w	r2, r2, #418	; 0x1a2
 8002832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	3308      	adds	r3, #8
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4608      	mov	r0, r1
 800283e:	4798      	blx	r3
 8002840:	4603      	mov	r3, r0
 8002842:	61bb      	str	r3, [r7, #24]
                ti.md5sum       = (char*)subscribers[i]->getMsgMD5();
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002848:	f502 72d1 	add.w	r2, r2, #418	; 0x1a2
 800284c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002854:	f502 72d1 	add.w	r2, r2, #418	; 0x1a2
 8002858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	330c      	adds	r3, #12
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4608      	mov	r0, r1
 8002864:	4798      	blx	r3
 8002866:	4603      	mov	r3, r0
 8002868:	61fb      	str	r3, [r7, #28]
                ti.buffer_size  = INPUT_SIZE;
 800286a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800286e:	623b      	str	r3, [r7, #32]
                publish(subscribers[i]->getEndpointType(), &ti);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681c      	ldr	r4, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287a:	f502 72d1 	add.w	r2, r2, #418	; 0x1a2
 800287e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002886:	f502 72d1 	add.w	r2, r2, #418	; 0x1a2
 800288a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	3304      	adds	r3, #4
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4608      	mov	r0, r1
 8002896:	4798      	blx	r3
 8002898:	4601      	mov	r1, r0
 800289a:	f107 030c 	add.w	r3, r7, #12
 800289e:	461a      	mov	r2, r3
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	47a0      	blx	r4
        for (i = 0; i < MAX_SUBSCRIBERS; i++) {
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	3301      	adds	r3, #1
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24
 80028aa:	e79c      	b.n	80027e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
        configured_ = true;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2700 	strb.w	r2, [r3, #1792]	; 0x700
    }
 80028b4:	bf00      	nop
 80028b6:	372c      	adds	r7, #44	; 0x2c
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd90      	pop	{r4, r7, pc}

080028bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
    void syncTime(uint8_t* data) {
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
        std_msgs::Time t;
 80028c6:	f107 0308 	add.w	r3, r7, #8
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fd ffc4 	bl	8000858 <_ZN8std_msgs4TimeC1Ev>
        uint32_t       offset = hardware_.time() - rt_time;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3304      	adds	r3, #4
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fe ff34 	bl	8001742 <_ZN13STM32Hardware4timeEv>
 80028da:	4602      	mov	r2, r0
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	617b      	str	r3, [r7, #20]
        t.deserialize(data);
 80028e6:	f107 0308 	add.w	r3, r7, #8
 80028ea:	6839      	ldr	r1, [r7, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fe f823 	bl	8000938 <_ZN8std_msgs4Time11deserializeEPh>
        t.data.sec += offset / 1000;
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	4915      	ldr	r1, [pc, #84]	; (800294c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80028f8:	fba1 1303 	umull	r1, r3, r1, r3
 80028fc:	099b      	lsrs	r3, r3, #6
 80028fe:	4413      	add	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]
        t.data.nsec += (offset % 1000) * 1000000UL;
 8002902:	6939      	ldr	r1, [r7, #16]
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	4b11      	ldr	r3, [pc, #68]	; (800294c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002908:	fba3 0302 	umull	r0, r3, r3, r2
 800290c:	099b      	lsrs	r3, r3, #6
 800290e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002912:	fb00 f303 	mul.w	r3, r0, r3
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	4a0d      	ldr	r2, [pc, #52]	; (8002950 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800291a:	fb02 f303 	mul.w	r3, r2, r3
 800291e:	440b      	add	r3, r1
 8002920:	613b      	str	r3, [r7, #16]
        this->setNow(t.data);
 8002922:	f107 0308 	add.w	r3, r7, #8
 8002926:	3304      	adds	r3, #4
 8002928:	4619      	mov	r1, r3
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f8c0 	bl	8002ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
        last_sync_receive_time = hardware_.time();
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3304      	adds	r3, #4
 8002934:	4618      	mov	r0, r3
 8002936:	f7fe ff04 	bl	8001742 <_ZN13STM32Hardware4timeEv>
 800293a:	4602      	mov	r2, r0
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f8c3 2708 	str.w	r2, [r3, #1800]	; 0x708
    }
 8002942:	bf00      	nop
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	10624dd3 	.word	0x10624dd3
 8002950:	000f4240 	.word	0x000f4240

08002954 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
    void log(char byte, const char* msg) {
 8002954:	b580      	push	{r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	460b      	mov	r3, r1
 800295e:	607a      	str	r2, [r7, #4]
 8002960:	72fb      	strb	r3, [r7, #11]
        rosserial_msgs::Log l;
 8002962:	f107 0314 	add.w	r3, r7, #20
 8002966:	4618      	mov	r0, r3
 8002968:	f7fe fa2a 	bl	8000dc0 <_ZN14rosserial_msgs3LogC1Ev>
        l.level = byte;
 800296c:	7afb      	ldrb	r3, [r7, #11]
 800296e:	763b      	strb	r3, [r7, #24]
        l.msg   = (char*)msg;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	61fb      	str	r3, [r7, #28]
        publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f107 0214 	add.w	r2, r7, #20
 800297e:	2107      	movs	r1, #7
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	4798      	blx	r3
    }
 8002984:	bf00      	nop
 8002986:	3720      	adds	r7, #32
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:
    virtual int publish(int id, const Msg* msg) {
 800298c:	b580      	push	{r7, lr}
 800298e:	b088      	sub	sp, #32
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
        if (id >= 100 && !configured_)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2b63      	cmp	r3, #99	; 0x63
 800299c:	dd09      	ble.n	80029b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f893 3700 	ldrb.w	r3, [r3, #1792]	; 0x700
 80029a4:	f083 0301 	eor.w	r3, r3, #1
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
            return 0;
 80029ae:	2300      	movs	r3, #0
 80029b0:	e077      	b.n	8002aa2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
        int l = msg->serialize(message_out + 7);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80029be:	3207      	adds	r2, #7
 80029c0:	4611      	mov	r1, r2
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	4798      	blx	r3
 80029c6:	6178      	str	r0, [r7, #20]
        message_out[0] = 0xff;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	22ff      	movs	r2, #255	; 0xff
 80029cc:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        message_out[1] = PROTOCOL_VER;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	22fe      	movs	r2, #254	; 0xfe
 80029d4:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
        message_out[2] = (uint8_t)((uint16_t)l & 255);
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
        message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	121b      	asrs	r3, r3, #8
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
        message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f893 2426 	ldrb.w	r2, [r3, #1062]	; 0x426
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f893 3427 	ldrb.w	r3, [r3, #1063]	; 0x427
 80029fc:	4413      	add	r3, r2
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
        message_out[5] = (uint8_t)((int16_t)id & 255);
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
        message_out[6] = (uint8_t)((int16_t)id >> 8);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	b21b      	sxth	r3, r3
 8002a18:	121b      	asrs	r3, r3, #8
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
        int chk = 0;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61fb      	str	r3, [r7, #28]
        for (int i = 5; i < l + 7; i++)
 8002a26:	2305      	movs	r3, #5
 8002a28:	61bb      	str	r3, [r7, #24]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	3306      	adds	r3, #6
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	dc0d      	bgt.n	8002a50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
            chk += message_out[i];
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	4413      	add	r3, r2
 8002a3a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	461a      	mov	r2, r3
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	4413      	add	r3, r2
 8002a46:	61fb      	str	r3, [r7, #28]
        for (int i = 5; i < l + 7; i++)
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	61bb      	str	r3, [r7, #24]
 8002a4e:	e7ec      	b.n	8002a2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
        l += 7;
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	3307      	adds	r3, #7
 8002a54:	617b      	str	r3, [r7, #20]
        message_out[l++] = 255 - (chk % 256);
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	425a      	negs	r2, r3
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	bf58      	it	pl
 8002a60:	4253      	negpl	r3, r2
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	1c59      	adds	r1, r3, #1
 8002a68:	6179      	str	r1, [r7, #20]
 8002a6a:	43d2      	mvns	r2, r2
 8002a6c:	b2d1      	uxtb	r1, r2
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	4413      	add	r3, r2
 8002a72:	460a      	mov	r2, r1
 8002a74:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        if (l <= OUTPUT_SIZE) {
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a7e:	dc0a      	bgt.n	8002a96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
            hardware_.write(message_out, l);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	1d18      	adds	r0, r3, #4
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	f7fe fe13 	bl	80016b8 <_ZN13STM32Hardware5writeEPhi>
            return l;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	e005      	b.n	8002aa2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
            logerror("Message from device dropped: message larger than buffer.");
 8002a96:	4905      	ldr	r1, [pc, #20]	; (8002aac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 f849 	bl	8002b30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
            return -1;
 8002a9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3720      	adds	r7, #32
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	080064fc 	.word	0x080064fc

08002ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
    void setNow(Time& new_now) {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
        uint32_t ms = hardware_.time();
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3304      	adds	r3, #4
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fe fe3f 	bl	8001742 <_ZN13STM32Hardware4timeEv>
 8002ac4:	60f8      	str	r0, [r7, #12]
        sec_offset  = new_now.sec - ms / 1000 - 1;
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	4915      	ldr	r1, [pc, #84]	; (8002b24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8002ace:	fba1 1303 	umull	r1, r3, r1, r3
 8002ad2:	099b      	lsrs	r3, r3, #6
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	1e5a      	subs	r2, r3, #1
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
        nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	6859      	ldr	r1, [r3, #4]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	4b0f      	ldr	r3, [pc, #60]	; (8002b24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8002ae6:	fba3 0302 	umull	r0, r3, r3, r2
 8002aea:	099b      	lsrs	r3, r3, #6
 8002aec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002af0:	fb00 f303 	mul.w	r3, r0, r3
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	4a0c      	ldr	r2, [pc, #48]	; (8002b28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8002af8:	fb02 f303 	mul.w	r3, r2, r3
 8002afc:	1aca      	subs	r2, r1, r3
 8002afe:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8002b00:	4413      	add	r3, r2
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
        normalizeSecNSec(sec_offset, nsec_offset);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f503 7206 	add.w	r2, r3, #536	; 0x218
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8002b14:	4619      	mov	r1, r3
 8002b16:	4610      	mov	r0, r2
 8002b18:	f7fd fcec 	bl	80004f4 <_ZN3ros16normalizeSecNSecERmS0_>
    }
 8002b1c:	bf00      	nop
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	10624dd3 	.word	0x10624dd3
 8002b28:	000f4240 	.word	0x000f4240
 8002b2c:	3b9aca00 	.word	0x3b9aca00

08002b30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
    void logwarn(const char* msg) { log(rosserial_msgs::Log::WARN, msg); }
    void logerror(const char* msg) { log(rosserial_msgs::Log::ERROR, msg); }
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	2103      	movs	r1, #3
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7ff ff08 	bl	8002954 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
 8002b44:	bf00      	nop
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <_Z41__static_initialization_and_destruction_0ii>:
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d119      	bne.n	8002b90 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d114      	bne.n	8002b90 <_Z41__static_initialization_and_destruction_0ii+0x44>
ros::NodeHandle nh;
 8002b66:	480c      	ldr	r0, [pc, #48]	; (8002b98 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002b68:	f7ff fa8c 	bl	8002084 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Float32MultiArray tx_data;
 8002b6c:	480b      	ldr	r0, [pc, #44]	; (8002b9c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002b6e:	f7ff f877 	bl	8001c60 <_ZN8std_msgs17Float32MultiArrayC1Ev>
std_msgs::Float32MultiArray rx_data;
 8002b72:	480b      	ldr	r0, [pc, #44]	; (8002ba0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8002b74:	f7ff f874 	bl	8001c60 <_ZN8std_msgs17Float32MultiArrayC1Ev>
ros::Publisher                               pub("from_st1", &tx_data);
 8002b78:	2300      	movs	r3, #0
 8002b7a:	4a08      	ldr	r2, [pc, #32]	; (8002b9c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002b7c:	4909      	ldr	r1, [pc, #36]	; (8002ba4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002b7e:	480a      	ldr	r0, [pc, #40]	; (8002ba8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8002b80:	f7fe fc90 	bl	80014a4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Float32MultiArray> sub("to_st1", rx_callback);
 8002b84:	2301      	movs	r3, #1
 8002b86:	4a09      	ldr	r2, [pc, #36]	; (8002bac <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002b88:	4909      	ldr	r1, [pc, #36]	; (8002bb0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002b8a:	480a      	ldr	r0, [pc, #40]	; (8002bb4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002b8c:	f7ff fb16 	bl	80021bc <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei>
}
 8002b90:	bf00      	nop
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	20000098 	.word	0x20000098
 8002b9c:	200007d8 	.word	0x200007d8
 8002ba0:	20000808 	.word	0x20000808
 8002ba4:	08006538 	.word	0x08006538
 8002ba8:	20000838 	.word	0x20000838
 8002bac:	08001f15 	.word	0x08001f15
 8002bb0:	08006544 	.word	0x08006544
 8002bb4:	2000084c 	.word	0x2000084c

08002bb8 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE8callbackEPh>:

    virtual void callback(unsigned char* data) {
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
        msg.deserialize(data);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	330c      	adds	r3, #12
 8002bc6:	6839      	ldr	r1, [r7, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff f8d7 	bl	8001d7c <_ZN8std_msgs17Float32MultiArray11deserializeEPh>
        this->cb_(msg);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	320c      	adds	r2, #12
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	4798      	blx	r3
    }
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE15getEndpointTypeEv>:

    virtual const char* getMsgType() { return this->msg.getType(); }
    virtual const char* getMsgMD5() { return this->msg.getMD5(); }
    virtual int         getEndpointType() { return endpoint_; }
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	4618      	mov	r0, r3
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE10getMsgTypeEv>:
    virtual const char* getMsgType() { return this->msg.getType(); }
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b082      	sub	sp, #8
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	330c      	adds	r3, #12
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff f944 	bl	8001e94 <_ZN8std_msgs17Float32MultiArray7getTypeEv>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE9getMsgMD5Ev>:
    virtual const char* getMsgMD5() { return this->msg.getMD5(); }
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	330c      	adds	r3, #12
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff f944 	bl	8001eb0 <_ZN8std_msgs17Float32MultiArray6getMD5Ev>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
    virtual bool connected() { return configured_; };
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 3700 	ldrb.w	r3, [r3, #1792]	; 0x700
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <_GLOBAL__sub_I_nh>:
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c54:	2001      	movs	r0, #1
 8002c56:	f7ff ff79 	bl	8002b4c <_Z41__static_initialization_and_destruction_0ii>
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	607b      	str	r3, [r7, #4]
 8002c66:	4b10      	ldr	r3, [pc, #64]	; (8002ca8 <HAL_MspInit+0x4c>)
 8002c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6a:	4a0f      	ldr	r2, [pc, #60]	; (8002ca8 <HAL_MspInit+0x4c>)
 8002c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c70:	6453      	str	r3, [r2, #68]	; 0x44
 8002c72:	4b0d      	ldr	r3, [pc, #52]	; (8002ca8 <HAL_MspInit+0x4c>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c7a:	607b      	str	r3, [r7, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	603b      	str	r3, [r7, #0]
 8002c82:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <HAL_MspInit+0x4c>)
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	4a08      	ldr	r2, [pc, #32]	; (8002ca8 <HAL_MspInit+0x4c>)
 8002c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c8e:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <HAL_MspInit+0x4c>)
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c96:	603b      	str	r3, [r7, #0]
 8002c98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	40023800 	.word	0x40023800

08002cac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cbc:	d115      	bne.n	8002cea <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <HAL_TIM_Base_MspInit+0x48>)
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	4a0b      	ldr	r2, [pc, #44]	; (8002cf4 <HAL_TIM_Base_MspInit+0x48>)
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cce:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <HAL_TIM_Base_MspInit+0x48>)
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2100      	movs	r1, #0
 8002cde:	201c      	movs	r0, #28
 8002ce0:	f000 fb1b 	bl	800331a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ce4:	201c      	movs	r0, #28
 8002ce6:	f000 fb34 	bl	8003352 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002cea:	bf00      	nop
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40023800 	.word	0x40023800

08002cf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08a      	sub	sp, #40	; 0x28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d00:	f107 0314 	add.w	r3, r7, #20
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	60da      	str	r2, [r3, #12]
 8002d0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a4d      	ldr	r2, [pc, #308]	; (8002e4c <HAL_UART_MspInit+0x154>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	f040 8094 	bne.w	8002e44 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	613b      	str	r3, [r7, #16]
 8002d20:	4b4b      	ldr	r3, [pc, #300]	; (8002e50 <HAL_UART_MspInit+0x158>)
 8002d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d24:	4a4a      	ldr	r2, [pc, #296]	; (8002e50 <HAL_UART_MspInit+0x158>)
 8002d26:	f043 0310 	orr.w	r3, r3, #16
 8002d2a:	6453      	str	r3, [r2, #68]	; 0x44
 8002d2c:	4b48      	ldr	r3, [pc, #288]	; (8002e50 <HAL_UART_MspInit+0x158>)
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d30:	f003 0310 	and.w	r3, r3, #16
 8002d34:	613b      	str	r3, [r7, #16]
 8002d36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	4b44      	ldr	r3, [pc, #272]	; (8002e50 <HAL_UART_MspInit+0x158>)
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	4a43      	ldr	r2, [pc, #268]	; (8002e50 <HAL_UART_MspInit+0x158>)
 8002d42:	f043 0301 	orr.w	r3, r3, #1
 8002d46:	6313      	str	r3, [r2, #48]	; 0x30
 8002d48:	4b41      	ldr	r3, [pc, #260]	; (8002e50 <HAL_UART_MspInit+0x158>)
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d54:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d62:	2303      	movs	r3, #3
 8002d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d66:	2307      	movs	r3, #7
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d6a:	f107 0314 	add.w	r3, r7, #20
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4838      	ldr	r0, [pc, #224]	; (8002e54 <HAL_UART_MspInit+0x15c>)
 8002d72:	f000 ff0b 	bl	8003b8c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002d76:	4b38      	ldr	r3, [pc, #224]	; (8002e58 <HAL_UART_MspInit+0x160>)
 8002d78:	4a38      	ldr	r2, [pc, #224]	; (8002e5c <HAL_UART_MspInit+0x164>)
 8002d7a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002d7c:	4b36      	ldr	r3, [pc, #216]	; (8002e58 <HAL_UART_MspInit+0x160>)
 8002d7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d82:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d84:	4b34      	ldr	r3, [pc, #208]	; (8002e58 <HAL_UART_MspInit+0x160>)
 8002d86:	2240      	movs	r2, #64	; 0x40
 8002d88:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d8a:	4b33      	ldr	r3, [pc, #204]	; (8002e58 <HAL_UART_MspInit+0x160>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d90:	4b31      	ldr	r3, [pc, #196]	; (8002e58 <HAL_UART_MspInit+0x160>)
 8002d92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d96:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d98:	4b2f      	ldr	r3, [pc, #188]	; (8002e58 <HAL_UART_MspInit+0x160>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d9e:	4b2e      	ldr	r3, [pc, #184]	; (8002e58 <HAL_UART_MspInit+0x160>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002da4:	4b2c      	ldr	r3, [pc, #176]	; (8002e58 <HAL_UART_MspInit+0x160>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002daa:	4b2b      	ldr	r3, [pc, #172]	; (8002e58 <HAL_UART_MspInit+0x160>)
 8002dac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002db0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002db2:	4b29      	ldr	r3, [pc, #164]	; (8002e58 <HAL_UART_MspInit+0x160>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002db8:	4827      	ldr	r0, [pc, #156]	; (8002e58 <HAL_UART_MspInit+0x160>)
 8002dba:	f000 fae5 	bl	8003388 <HAL_DMA_Init>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002dc4:	f7fd fd22 	bl	800080c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a23      	ldr	r2, [pc, #140]	; (8002e58 <HAL_UART_MspInit+0x160>)
 8002dcc:	635a      	str	r2, [r3, #52]	; 0x34
 8002dce:	4a22      	ldr	r2, [pc, #136]	; (8002e58 <HAL_UART_MspInit+0x160>)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002dd4:	4b22      	ldr	r3, [pc, #136]	; (8002e60 <HAL_UART_MspInit+0x168>)
 8002dd6:	4a23      	ldr	r2, [pc, #140]	; (8002e64 <HAL_UART_MspInit+0x16c>)
 8002dd8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002dda:	4b21      	ldr	r3, [pc, #132]	; (8002e60 <HAL_UART_MspInit+0x168>)
 8002ddc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002de0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002de2:	4b1f      	ldr	r3, [pc, #124]	; (8002e60 <HAL_UART_MspInit+0x168>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002de8:	4b1d      	ldr	r3, [pc, #116]	; (8002e60 <HAL_UART_MspInit+0x168>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002dee:	4b1c      	ldr	r3, [pc, #112]	; (8002e60 <HAL_UART_MspInit+0x168>)
 8002df0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002df4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002df6:	4b1a      	ldr	r3, [pc, #104]	; (8002e60 <HAL_UART_MspInit+0x168>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dfc:	4b18      	ldr	r3, [pc, #96]	; (8002e60 <HAL_UART_MspInit+0x168>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002e02:	4b17      	ldr	r3, [pc, #92]	; (8002e60 <HAL_UART_MspInit+0x168>)
 8002e04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e08:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002e0a:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <HAL_UART_MspInit+0x168>)
 8002e0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e10:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e12:	4b13      	ldr	r3, [pc, #76]	; (8002e60 <HAL_UART_MspInit+0x168>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002e18:	4811      	ldr	r0, [pc, #68]	; (8002e60 <HAL_UART_MspInit+0x168>)
 8002e1a:	f000 fab5 	bl	8003388 <HAL_DMA_Init>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 8002e24:	f7fd fcf2 	bl	800080c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a0d      	ldr	r2, [pc, #52]	; (8002e60 <HAL_UART_MspInit+0x168>)
 8002e2c:	639a      	str	r2, [r3, #56]	; 0x38
 8002e2e:	4a0c      	ldr	r2, [pc, #48]	; (8002e60 <HAL_UART_MspInit+0x168>)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002e34:	2200      	movs	r2, #0
 8002e36:	2100      	movs	r1, #0
 8002e38:	2025      	movs	r0, #37	; 0x25
 8002e3a:	f000 fa6e 	bl	800331a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e3e:	2025      	movs	r0, #37	; 0x25
 8002e40:	f000 fa87 	bl	8003352 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002e44:	bf00      	nop
 8002e46:	3728      	adds	r7, #40	; 0x28
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40011000 	.word	0x40011000
 8002e50:	40023800 	.word	0x40023800
 8002e54:	40020000 	.word	0x40020000
 8002e58:	2000089c 	.word	0x2000089c
 8002e5c:	400264b8 	.word	0x400264b8
 8002e60:	200008fc 	.word	0x200008fc
 8002e64:	40026440 	.word	0x40026440

08002e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002e6c:	f001 fd0a 	bl	8004884 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e70:	e7fe      	b.n	8002e70 <NMI_Handler+0x8>

08002e72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e72:	b480      	push	{r7}
 8002e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e76:	e7fe      	b.n	8002e76 <HardFault_Handler+0x4>

08002e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e7c:	e7fe      	b.n	8002e7c <MemManage_Handler+0x4>

08002e7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e82:	e7fe      	b.n	8002e82 <BusFault_Handler+0x4>

08002e84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e88:	e7fe      	b.n	8002e88 <UsageFault_Handler+0x4>

08002e8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e8e:	bf00      	nop
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e9c:	bf00      	nop
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002eaa:	bf00      	nop
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002eb8:	f000 f910 	bl	80030dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ebc:	bf00      	nop
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ec4:	4802      	ldr	r0, [pc, #8]	; (8002ed0 <TIM2_IRQHandler+0x10>)
 8002ec6:	f001 fdb7 	bl	8004a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	200009a0 	.word	0x200009a0

08002ed4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ed8:	4802      	ldr	r0, [pc, #8]	; (8002ee4 <USART1_IRQHandler+0x10>)
 8002eda:	f002 fa55 	bl	8005388 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	2000095c 	.word	0x2000095c

08002ee8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002eec:	4802      	ldr	r0, [pc, #8]	; (8002ef8 <DMA2_Stream2_IRQHandler+0x10>)
 8002eee:	f000 fbe3 	bl	80036b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	200008fc 	.word	0x200008fc

08002efc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002f00:	4802      	ldr	r0, [pc, #8]	; (8002f0c <DMA2_Stream7_IRQHandler+0x10>)
 8002f02:	f000 fbd9 	bl	80036b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	2000089c 	.word	0x2000089c

08002f10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
	return 1;
 8002f14:	2301      	movs	r3, #1
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <_kill>:

int _kill(int pid, int sig)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002f2a:	f003 f889 	bl	8006040 <__errno>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2216      	movs	r2, #22
 8002f32:	601a      	str	r2, [r3, #0]
	return -1;
 8002f34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <_exit>:

void _exit (int status)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff ffe7 	bl	8002f20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f52:	e7fe      	b.n	8002f52 <_exit+0x12>

08002f54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f5c:	4a14      	ldr	r2, [pc, #80]	; (8002fb0 <_sbrk+0x5c>)
 8002f5e:	4b15      	ldr	r3, [pc, #84]	; (8002fb4 <_sbrk+0x60>)
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f68:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <_sbrk+0x64>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d102      	bne.n	8002f76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f70:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <_sbrk+0x64>)
 8002f72:	4a12      	ldr	r2, [pc, #72]	; (8002fbc <_sbrk+0x68>)
 8002f74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f76:	4b10      	ldr	r3, [pc, #64]	; (8002fb8 <_sbrk+0x64>)
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d207      	bcs.n	8002f94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f84:	f003 f85c 	bl	8006040 <__errno>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	220c      	movs	r2, #12
 8002f8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f92:	e009      	b.n	8002fa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f94:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <_sbrk+0x64>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f9a:	4b07      	ldr	r3, [pc, #28]	; (8002fb8 <_sbrk+0x64>)
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	4a05      	ldr	r2, [pc, #20]	; (8002fb8 <_sbrk+0x64>)
 8002fa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	20030000 	.word	0x20030000
 8002fb4:	00000400 	.word	0x00000400
 8002fb8:	20000890 	.word	0x20000890
 8002fbc:	20000a00 	.word	0x20000a00

08002fc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fc4:	4b06      	ldr	r3, [pc, #24]	; (8002fe0 <SystemInit+0x20>)
 8002fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fca:	4a05      	ldr	r2, [pc, #20]	; (8002fe0 <SystemInit+0x20>)
 8002fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fd4:	bf00      	nop
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	e000ed00 	.word	0xe000ed00

08002fe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800301c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fe8:	480d      	ldr	r0, [pc, #52]	; (8003020 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002fea:	490e      	ldr	r1, [pc, #56]	; (8003024 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002fec:	4a0e      	ldr	r2, [pc, #56]	; (8003028 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ff0:	e002      	b.n	8002ff8 <LoopCopyDataInit>

08002ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ff6:	3304      	adds	r3, #4

08002ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ffc:	d3f9      	bcc.n	8002ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ffe:	4a0b      	ldr	r2, [pc, #44]	; (800302c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003000:	4c0b      	ldr	r4, [pc, #44]	; (8003030 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003004:	e001      	b.n	800300a <LoopFillZerobss>

08003006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003008:	3204      	adds	r2, #4

0800300a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800300a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800300c:	d3fb      	bcc.n	8003006 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800300e:	f7ff ffd7 	bl	8002fc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003012:	f003 f81b 	bl	800604c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003016:	f7fd faa3 	bl	8000560 <main>
  bx  lr    
 800301a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800301c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003024:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003028:	080066b4 	.word	0x080066b4
  ldr r2, =_sbss
 800302c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003030:	200009fc 	.word	0x200009fc

08003034 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003034:	e7fe      	b.n	8003034 <ADC_IRQHandler>
	...

08003038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800303c:	4b0e      	ldr	r3, [pc, #56]	; (8003078 <HAL_Init+0x40>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a0d      	ldr	r2, [pc, #52]	; (8003078 <HAL_Init+0x40>)
 8003042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003046:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <HAL_Init+0x40>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a0a      	ldr	r2, [pc, #40]	; (8003078 <HAL_Init+0x40>)
 800304e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003052:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003054:	4b08      	ldr	r3, [pc, #32]	; (8003078 <HAL_Init+0x40>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a07      	ldr	r2, [pc, #28]	; (8003078 <HAL_Init+0x40>)
 800305a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800305e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003060:	2003      	movs	r0, #3
 8003062:	f000 f94f 	bl	8003304 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003066:	2000      	movs	r0, #0
 8003068:	f000 f808 	bl	800307c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800306c:	f7ff fdf6 	bl	8002c5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40023c00 	.word	0x40023c00

0800307c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003084:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <HAL_InitTick+0x54>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	4b12      	ldr	r3, [pc, #72]	; (80030d4 <HAL_InitTick+0x58>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	4619      	mov	r1, r3
 800308e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003092:	fbb3 f3f1 	udiv	r3, r3, r1
 8003096:	fbb2 f3f3 	udiv	r3, r2, r3
 800309a:	4618      	mov	r0, r3
 800309c:	f000 f967 	bl	800336e <HAL_SYSTICK_Config>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e00e      	b.n	80030c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b0f      	cmp	r3, #15
 80030ae:	d80a      	bhi.n	80030c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030b0:	2200      	movs	r2, #0
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030b8:	f000 f92f 	bl	800331a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030bc:	4a06      	ldr	r2, [pc, #24]	; (80030d8 <HAL_InitTick+0x5c>)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
 80030c4:	e000      	b.n	80030c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	20000004 	.word	0x20000004
 80030d4:	2000000c 	.word	0x2000000c
 80030d8:	20000008 	.word	0x20000008

080030dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030e0:	4b06      	ldr	r3, [pc, #24]	; (80030fc <HAL_IncTick+0x20>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	461a      	mov	r2, r3
 80030e6:	4b06      	ldr	r3, [pc, #24]	; (8003100 <HAL_IncTick+0x24>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4413      	add	r3, r2
 80030ec:	4a04      	ldr	r2, [pc, #16]	; (8003100 <HAL_IncTick+0x24>)
 80030ee:	6013      	str	r3, [r2, #0]
}
 80030f0:	bf00      	nop
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	2000000c 	.word	0x2000000c
 8003100:	200009e8 	.word	0x200009e8

08003104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  return uwTick;
 8003108:	4b03      	ldr	r3, [pc, #12]	; (8003118 <HAL_GetTick+0x14>)
 800310a:	681b      	ldr	r3, [r3, #0]
}
 800310c:	4618      	mov	r0, r3
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	200009e8 	.word	0x200009e8

0800311c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003124:	f7ff ffee 	bl	8003104 <HAL_GetTick>
 8003128:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003134:	d005      	beq.n	8003142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003136:	4b0a      	ldr	r3, [pc, #40]	; (8003160 <HAL_Delay+0x44>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	461a      	mov	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4413      	add	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003142:	bf00      	nop
 8003144:	f7ff ffde 	bl	8003104 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	429a      	cmp	r2, r3
 8003152:	d8f7      	bhi.n	8003144 <HAL_Delay+0x28>
  {
  }
}
 8003154:	bf00      	nop
 8003156:	bf00      	nop
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	2000000c 	.word	0x2000000c

08003164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003174:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003180:	4013      	ands	r3, r2
 8003182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800318c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003196:	4a04      	ldr	r2, [pc, #16]	; (80031a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	60d3      	str	r3, [r2, #12]
}
 800319c:	bf00      	nop
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	e000ed00 	.word	0xe000ed00

080031ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031b0:	4b04      	ldr	r3, [pc, #16]	; (80031c4 <__NVIC_GetPriorityGrouping+0x18>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	0a1b      	lsrs	r3, r3, #8
 80031b6:	f003 0307 	and.w	r3, r3, #7
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	e000ed00 	.word	0xe000ed00

080031c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	db0b      	blt.n	80031f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031da:	79fb      	ldrb	r3, [r7, #7]
 80031dc:	f003 021f 	and.w	r2, r3, #31
 80031e0:	4907      	ldr	r1, [pc, #28]	; (8003200 <__NVIC_EnableIRQ+0x38>)
 80031e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	2001      	movs	r0, #1
 80031ea:	fa00 f202 	lsl.w	r2, r0, r2
 80031ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	e000e100 	.word	0xe000e100

08003204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	6039      	str	r1, [r7, #0]
 800320e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003214:	2b00      	cmp	r3, #0
 8003216:	db0a      	blt.n	800322e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	b2da      	uxtb	r2, r3
 800321c:	490c      	ldr	r1, [pc, #48]	; (8003250 <__NVIC_SetPriority+0x4c>)
 800321e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003222:	0112      	lsls	r2, r2, #4
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	440b      	add	r3, r1
 8003228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800322c:	e00a      	b.n	8003244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	b2da      	uxtb	r2, r3
 8003232:	4908      	ldr	r1, [pc, #32]	; (8003254 <__NVIC_SetPriority+0x50>)
 8003234:	79fb      	ldrb	r3, [r7, #7]
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	3b04      	subs	r3, #4
 800323c:	0112      	lsls	r2, r2, #4
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	440b      	add	r3, r1
 8003242:	761a      	strb	r2, [r3, #24]
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	e000e100 	.word	0xe000e100
 8003254:	e000ed00 	.word	0xe000ed00

08003258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003258:	b480      	push	{r7}
 800325a:	b089      	sub	sp, #36	; 0x24
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	f1c3 0307 	rsb	r3, r3, #7
 8003272:	2b04      	cmp	r3, #4
 8003274:	bf28      	it	cs
 8003276:	2304      	movcs	r3, #4
 8003278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	3304      	adds	r3, #4
 800327e:	2b06      	cmp	r3, #6
 8003280:	d902      	bls.n	8003288 <NVIC_EncodePriority+0x30>
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	3b03      	subs	r3, #3
 8003286:	e000      	b.n	800328a <NVIC_EncodePriority+0x32>
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800328c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	43da      	mvns	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	401a      	ands	r2, r3
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	fa01 f303 	lsl.w	r3, r1, r3
 80032aa:	43d9      	mvns	r1, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b0:	4313      	orrs	r3, r2
         );
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3724      	adds	r7, #36	; 0x24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
	...

080032c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032d0:	d301      	bcc.n	80032d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032d2:	2301      	movs	r3, #1
 80032d4:	e00f      	b.n	80032f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032d6:	4a0a      	ldr	r2, [pc, #40]	; (8003300 <SysTick_Config+0x40>)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3b01      	subs	r3, #1
 80032dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032de:	210f      	movs	r1, #15
 80032e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032e4:	f7ff ff8e 	bl	8003204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032e8:	4b05      	ldr	r3, [pc, #20]	; (8003300 <SysTick_Config+0x40>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ee:	4b04      	ldr	r3, [pc, #16]	; (8003300 <SysTick_Config+0x40>)
 80032f0:	2207      	movs	r2, #7
 80032f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	e000e010 	.word	0xe000e010

08003304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7ff ff29 	bl	8003164 <__NVIC_SetPriorityGrouping>
}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800331a:	b580      	push	{r7, lr}
 800331c:	b086      	sub	sp, #24
 800331e:	af00      	add	r7, sp, #0
 8003320:	4603      	mov	r3, r0
 8003322:	60b9      	str	r1, [r7, #8]
 8003324:	607a      	str	r2, [r7, #4]
 8003326:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800332c:	f7ff ff3e 	bl	80031ac <__NVIC_GetPriorityGrouping>
 8003330:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	68b9      	ldr	r1, [r7, #8]
 8003336:	6978      	ldr	r0, [r7, #20]
 8003338:	f7ff ff8e 	bl	8003258 <NVIC_EncodePriority>
 800333c:	4602      	mov	r2, r0
 800333e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003342:	4611      	mov	r1, r2
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff ff5d 	bl	8003204 <__NVIC_SetPriority>
}
 800334a:	bf00      	nop
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b082      	sub	sp, #8
 8003356:	af00      	add	r7, sp, #0
 8003358:	4603      	mov	r3, r0
 800335a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800335c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff ff31 	bl	80031c8 <__NVIC_EnableIRQ>
}
 8003366:	bf00      	nop
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7ff ffa2 	bl	80032c0 <SysTick_Config>
 800337c:	4603      	mov	r3, r0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
	...

08003388 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003394:	f7ff feb6 	bl	8003104 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e099      	b.n	80034d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2202      	movs	r2, #2
 80033b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0201 	bic.w	r2, r2, #1
 80033c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033c4:	e00f      	b.n	80033e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033c6:	f7ff fe9d 	bl	8003104 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b05      	cmp	r3, #5
 80033d2:	d908      	bls.n	80033e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2220      	movs	r2, #32
 80033d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2203      	movs	r2, #3
 80033de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e078      	b.n	80034d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1e8      	bne.n	80033c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	4b38      	ldr	r3, [pc, #224]	; (80034e0 <HAL_DMA_Init+0x158>)
 8003400:	4013      	ands	r3, r2
 8003402:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003412:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800341e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800342a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	4313      	orrs	r3, r2
 8003436:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	2b04      	cmp	r3, #4
 800343e:	d107      	bne.n	8003450 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003448:	4313      	orrs	r3, r2
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	4313      	orrs	r3, r2
 800344e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f023 0307 	bic.w	r3, r3, #7
 8003466:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	4313      	orrs	r3, r2
 8003470:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	2b04      	cmp	r3, #4
 8003478:	d117      	bne.n	80034aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	4313      	orrs	r3, r2
 8003482:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00e      	beq.n	80034aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 fb01 	bl	8003a94 <DMA_CheckFifoParam>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2240      	movs	r2, #64	; 0x40
 800349c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80034a6:	2301      	movs	r3, #1
 80034a8:	e016      	b.n	80034d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 fab8 	bl	8003a28 <DMA_CalcBaseAndBitshift>
 80034b8:	4603      	mov	r3, r0
 80034ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c0:	223f      	movs	r2, #63	; 0x3f
 80034c2:	409a      	lsls	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	f010803f 	.word	0xf010803f

080034e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
 80034f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034f2:	2300      	movs	r3, #0
 80034f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003502:	2b01      	cmp	r3, #1
 8003504:	d101      	bne.n	800350a <HAL_DMA_Start_IT+0x26>
 8003506:	2302      	movs	r3, #2
 8003508:	e040      	b.n	800358c <HAL_DMA_Start_IT+0xa8>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b01      	cmp	r3, #1
 800351c:	d12f      	bne.n	800357e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2202      	movs	r2, #2
 8003522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	68b9      	ldr	r1, [r7, #8]
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 fa4a 	bl	80039cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353c:	223f      	movs	r2, #63	; 0x3f
 800353e:	409a      	lsls	r2, r3
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 0216 	orr.w	r2, r2, #22
 8003552:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003558:	2b00      	cmp	r3, #0
 800355a:	d007      	beq.n	800356c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0208 	orr.w	r2, r2, #8
 800356a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0201 	orr.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	e005      	b.n	800358a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003586:	2302      	movs	r3, #2
 8003588:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800358a:	7dfb      	ldrb	r3, [r7, #23]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3718      	adds	r7, #24
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80035a2:	f7ff fdaf 	bl	8003104 <HAL_GetTick>
 80035a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d008      	beq.n	80035c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2280      	movs	r2, #128	; 0x80
 80035b8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e052      	b.n	800366c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0216 	bic.w	r2, r2, #22
 80035d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695a      	ldr	r2, [r3, #20]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d103      	bne.n	80035f6 <HAL_DMA_Abort+0x62>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d007      	beq.n	8003606 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0208 	bic.w	r2, r2, #8
 8003604:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0201 	bic.w	r2, r2, #1
 8003614:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003616:	e013      	b.n	8003640 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003618:	f7ff fd74 	bl	8003104 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b05      	cmp	r3, #5
 8003624:	d90c      	bls.n	8003640 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2220      	movs	r2, #32
 800362a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2203      	movs	r2, #3
 8003638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e015      	b.n	800366c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1e4      	bne.n	8003618 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003652:	223f      	movs	r2, #63	; 0x3f
 8003654:	409a      	lsls	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d004      	beq.n	8003692 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2280      	movs	r2, #128	; 0x80
 800368c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e00c      	b.n	80036ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2205      	movs	r2, #5
 8003696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0201 	bic.w	r2, r2, #1
 80036a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80036c4:	4b92      	ldr	r3, [pc, #584]	; (8003910 <HAL_DMA_IRQHandler+0x258>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a92      	ldr	r2, [pc, #584]	; (8003914 <HAL_DMA_IRQHandler+0x25c>)
 80036ca:	fba2 2303 	umull	r2, r3, r2, r3
 80036ce:	0a9b      	lsrs	r3, r3, #10
 80036d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e2:	2208      	movs	r2, #8
 80036e4:	409a      	lsls	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	4013      	ands	r3, r2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d01a      	beq.n	8003724 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d013      	beq.n	8003724 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0204 	bic.w	r2, r2, #4
 800370a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003710:	2208      	movs	r2, #8
 8003712:	409a      	lsls	r2, r3
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371c:	f043 0201 	orr.w	r2, r3, #1
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003728:	2201      	movs	r2, #1
 800372a:	409a      	lsls	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4013      	ands	r3, r2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d012      	beq.n	800375a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00b      	beq.n	800375a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003746:	2201      	movs	r2, #1
 8003748:	409a      	lsls	r2, r3
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003752:	f043 0202 	orr.w	r2, r3, #2
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375e:	2204      	movs	r2, #4
 8003760:	409a      	lsls	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	4013      	ands	r3, r2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d012      	beq.n	8003790 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00b      	beq.n	8003790 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377c:	2204      	movs	r2, #4
 800377e:	409a      	lsls	r2, r3
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003788:	f043 0204 	orr.w	r2, r3, #4
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003794:	2210      	movs	r2, #16
 8003796:	409a      	lsls	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4013      	ands	r3, r2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d043      	beq.n	8003828 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d03c      	beq.n	8003828 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b2:	2210      	movs	r2, #16
 80037b4:	409a      	lsls	r2, r3
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d018      	beq.n	80037fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d108      	bne.n	80037e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d024      	beq.n	8003828 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	4798      	blx	r3
 80037e6:	e01f      	b.n	8003828 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d01b      	beq.n	8003828 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	4798      	blx	r3
 80037f8:	e016      	b.n	8003828 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003804:	2b00      	cmp	r3, #0
 8003806:	d107      	bne.n	8003818 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0208 	bic.w	r2, r2, #8
 8003816:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382c:	2220      	movs	r2, #32
 800382e:	409a      	lsls	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4013      	ands	r3, r2
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 808e 	beq.w	8003956 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0310 	and.w	r3, r3, #16
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 8086 	beq.w	8003956 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384e:	2220      	movs	r2, #32
 8003850:	409a      	lsls	r2, r3
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b05      	cmp	r3, #5
 8003860:	d136      	bne.n	80038d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0216 	bic.w	r2, r2, #22
 8003870:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	695a      	ldr	r2, [r3, #20]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003880:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	2b00      	cmp	r3, #0
 8003888:	d103      	bne.n	8003892 <HAL_DMA_IRQHandler+0x1da>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800388e:	2b00      	cmp	r3, #0
 8003890:	d007      	beq.n	80038a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0208 	bic.w	r2, r2, #8
 80038a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a6:	223f      	movs	r2, #63	; 0x3f
 80038a8:	409a      	lsls	r2, r3
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d07d      	beq.n	80039c2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	4798      	blx	r3
        }
        return;
 80038ce:	e078      	b.n	80039c2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d01c      	beq.n	8003918 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d108      	bne.n	80038fe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d030      	beq.n	8003956 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	4798      	blx	r3
 80038fc:	e02b      	b.n	8003956 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003902:	2b00      	cmp	r3, #0
 8003904:	d027      	beq.n	8003956 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	4798      	blx	r3
 800390e:	e022      	b.n	8003956 <HAL_DMA_IRQHandler+0x29e>
 8003910:	20000004 	.word	0x20000004
 8003914:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10f      	bne.n	8003946 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0210 	bic.w	r2, r2, #16
 8003934:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395a:	2b00      	cmp	r3, #0
 800395c:	d032      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d022      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2205      	movs	r2, #5
 800396e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0201 	bic.w	r2, r2, #1
 8003980:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	3301      	adds	r3, #1
 8003986:	60bb      	str	r3, [r7, #8]
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	429a      	cmp	r2, r3
 800398c:	d307      	bcc.n	800399e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1f2      	bne.n	8003982 <HAL_DMA_IRQHandler+0x2ca>
 800399c:	e000      	b.n	80039a0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800399e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d005      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	4798      	blx	r3
 80039c0:	e000      	b.n	80039c4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80039c2:	bf00      	nop
    }
  }
}
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop

080039cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
 80039d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	2b40      	cmp	r3, #64	; 0x40
 80039f8:	d108      	bne.n	8003a0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a0a:	e007      	b.n	8003a1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	60da      	str	r2, [r3, #12]
}
 8003a1c:	bf00      	nop
 8003a1e:	3714      	adds	r7, #20
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	3b10      	subs	r3, #16
 8003a38:	4a14      	ldr	r2, [pc, #80]	; (8003a8c <DMA_CalcBaseAndBitshift+0x64>)
 8003a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3e:	091b      	lsrs	r3, r3, #4
 8003a40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a42:	4a13      	ldr	r2, [pc, #76]	; (8003a90 <DMA_CalcBaseAndBitshift+0x68>)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4413      	add	r3, r2
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2b03      	cmp	r3, #3
 8003a54:	d909      	bls.n	8003a6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a5e:	f023 0303 	bic.w	r3, r3, #3
 8003a62:	1d1a      	adds	r2, r3, #4
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	659a      	str	r2, [r3, #88]	; 0x58
 8003a68:	e007      	b.n	8003a7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a72:	f023 0303 	bic.w	r3, r3, #3
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	aaaaaaab 	.word	0xaaaaaaab
 8003a90:	08006698 	.word	0x08006698

08003a94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d11f      	bne.n	8003aee <DMA_CheckFifoParam+0x5a>
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	2b03      	cmp	r3, #3
 8003ab2:	d856      	bhi.n	8003b62 <DMA_CheckFifoParam+0xce>
 8003ab4:	a201      	add	r2, pc, #4	; (adr r2, 8003abc <DMA_CheckFifoParam+0x28>)
 8003ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aba:	bf00      	nop
 8003abc:	08003acd 	.word	0x08003acd
 8003ac0:	08003adf 	.word	0x08003adf
 8003ac4:	08003acd 	.word	0x08003acd
 8003ac8:	08003b63 	.word	0x08003b63
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d046      	beq.n	8003b66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003adc:	e043      	b.n	8003b66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ae6:	d140      	bne.n	8003b6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aec:	e03d      	b.n	8003b6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003af6:	d121      	bne.n	8003b3c <DMA_CheckFifoParam+0xa8>
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	d837      	bhi.n	8003b6e <DMA_CheckFifoParam+0xda>
 8003afe:	a201      	add	r2, pc, #4	; (adr r2, 8003b04 <DMA_CheckFifoParam+0x70>)
 8003b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b04:	08003b15 	.word	0x08003b15
 8003b08:	08003b1b 	.word	0x08003b1b
 8003b0c:	08003b15 	.word	0x08003b15
 8003b10:	08003b2d 	.word	0x08003b2d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	73fb      	strb	r3, [r7, #15]
      break;
 8003b18:	e030      	b.n	8003b7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d025      	beq.n	8003b72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b2a:	e022      	b.n	8003b72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b34:	d11f      	bne.n	8003b76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b3a:	e01c      	b.n	8003b76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d903      	bls.n	8003b4a <DMA_CheckFifoParam+0xb6>
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2b03      	cmp	r3, #3
 8003b46:	d003      	beq.n	8003b50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b48:	e018      	b.n	8003b7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	73fb      	strb	r3, [r7, #15]
      break;
 8003b4e:	e015      	b.n	8003b7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00e      	beq.n	8003b7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b60:	e00b      	b.n	8003b7a <DMA_CheckFifoParam+0xe6>
      break;
 8003b62:	bf00      	nop
 8003b64:	e00a      	b.n	8003b7c <DMA_CheckFifoParam+0xe8>
      break;
 8003b66:	bf00      	nop
 8003b68:	e008      	b.n	8003b7c <DMA_CheckFifoParam+0xe8>
      break;
 8003b6a:	bf00      	nop
 8003b6c:	e006      	b.n	8003b7c <DMA_CheckFifoParam+0xe8>
      break;
 8003b6e:	bf00      	nop
 8003b70:	e004      	b.n	8003b7c <DMA_CheckFifoParam+0xe8>
      break;
 8003b72:	bf00      	nop
 8003b74:	e002      	b.n	8003b7c <DMA_CheckFifoParam+0xe8>
      break;   
 8003b76:	bf00      	nop
 8003b78:	e000      	b.n	8003b7c <DMA_CheckFifoParam+0xe8>
      break;
 8003b7a:	bf00      	nop
    }
  } 
  
  return status; 
 8003b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop

08003b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b089      	sub	sp, #36	; 0x24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61fb      	str	r3, [r7, #28]
 8003ba6:	e177      	b.n	8003e98 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ba8:	2201      	movs	r2, #1
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	f040 8166 	bne.w	8003e92 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d005      	beq.n	8003bde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d130      	bne.n	8003c40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	2203      	movs	r2, #3
 8003bea:	fa02 f303 	lsl.w	r3, r2, r3
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c14:	2201      	movs	r2, #1
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4013      	ands	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	091b      	lsrs	r3, r3, #4
 8003c2a:	f003 0201 	and.w	r2, r3, #1
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 0303 	and.w	r3, r3, #3
 8003c48:	2b03      	cmp	r3, #3
 8003c4a:	d017      	beq.n	8003c7c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	2203      	movs	r2, #3
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	4013      	ands	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f003 0303 	and.w	r3, r3, #3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d123      	bne.n	8003cd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	08da      	lsrs	r2, r3, #3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3208      	adds	r2, #8
 8003c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	220f      	movs	r2, #15
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	43db      	mvns	r3, r3
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	691a      	ldr	r2, [r3, #16]
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	f003 0307 	and.w	r3, r3, #7
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	08da      	lsrs	r2, r3, #3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3208      	adds	r2, #8
 8003cca:	69b9      	ldr	r1, [r7, #24]
 8003ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	2203      	movs	r2, #3
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f003 0203 	and.w	r2, r3, #3
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 80c0 	beq.w	8003e92 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d12:	2300      	movs	r3, #0
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	4b66      	ldr	r3, [pc, #408]	; (8003eb0 <HAL_GPIO_Init+0x324>)
 8003d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1a:	4a65      	ldr	r2, [pc, #404]	; (8003eb0 <HAL_GPIO_Init+0x324>)
 8003d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d20:	6453      	str	r3, [r2, #68]	; 0x44
 8003d22:	4b63      	ldr	r3, [pc, #396]	; (8003eb0 <HAL_GPIO_Init+0x324>)
 8003d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d2a:	60fb      	str	r3, [r7, #12]
 8003d2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d2e:	4a61      	ldr	r2, [pc, #388]	; (8003eb4 <HAL_GPIO_Init+0x328>)
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	089b      	lsrs	r3, r3, #2
 8003d34:	3302      	adds	r3, #2
 8003d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	220f      	movs	r2, #15
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a58      	ldr	r2, [pc, #352]	; (8003eb8 <HAL_GPIO_Init+0x32c>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d037      	beq.n	8003dca <HAL_GPIO_Init+0x23e>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a57      	ldr	r2, [pc, #348]	; (8003ebc <HAL_GPIO_Init+0x330>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d031      	beq.n	8003dc6 <HAL_GPIO_Init+0x23a>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a56      	ldr	r2, [pc, #344]	; (8003ec0 <HAL_GPIO_Init+0x334>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d02b      	beq.n	8003dc2 <HAL_GPIO_Init+0x236>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a55      	ldr	r2, [pc, #340]	; (8003ec4 <HAL_GPIO_Init+0x338>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d025      	beq.n	8003dbe <HAL_GPIO_Init+0x232>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a54      	ldr	r2, [pc, #336]	; (8003ec8 <HAL_GPIO_Init+0x33c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d01f      	beq.n	8003dba <HAL_GPIO_Init+0x22e>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a53      	ldr	r2, [pc, #332]	; (8003ecc <HAL_GPIO_Init+0x340>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d019      	beq.n	8003db6 <HAL_GPIO_Init+0x22a>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a52      	ldr	r2, [pc, #328]	; (8003ed0 <HAL_GPIO_Init+0x344>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d013      	beq.n	8003db2 <HAL_GPIO_Init+0x226>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a51      	ldr	r2, [pc, #324]	; (8003ed4 <HAL_GPIO_Init+0x348>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00d      	beq.n	8003dae <HAL_GPIO_Init+0x222>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a50      	ldr	r2, [pc, #320]	; (8003ed8 <HAL_GPIO_Init+0x34c>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d007      	beq.n	8003daa <HAL_GPIO_Init+0x21e>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a4f      	ldr	r2, [pc, #316]	; (8003edc <HAL_GPIO_Init+0x350>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d101      	bne.n	8003da6 <HAL_GPIO_Init+0x21a>
 8003da2:	2309      	movs	r3, #9
 8003da4:	e012      	b.n	8003dcc <HAL_GPIO_Init+0x240>
 8003da6:	230a      	movs	r3, #10
 8003da8:	e010      	b.n	8003dcc <HAL_GPIO_Init+0x240>
 8003daa:	2308      	movs	r3, #8
 8003dac:	e00e      	b.n	8003dcc <HAL_GPIO_Init+0x240>
 8003dae:	2307      	movs	r3, #7
 8003db0:	e00c      	b.n	8003dcc <HAL_GPIO_Init+0x240>
 8003db2:	2306      	movs	r3, #6
 8003db4:	e00a      	b.n	8003dcc <HAL_GPIO_Init+0x240>
 8003db6:	2305      	movs	r3, #5
 8003db8:	e008      	b.n	8003dcc <HAL_GPIO_Init+0x240>
 8003dba:	2304      	movs	r3, #4
 8003dbc:	e006      	b.n	8003dcc <HAL_GPIO_Init+0x240>
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e004      	b.n	8003dcc <HAL_GPIO_Init+0x240>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	e002      	b.n	8003dcc <HAL_GPIO_Init+0x240>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e000      	b.n	8003dcc <HAL_GPIO_Init+0x240>
 8003dca:	2300      	movs	r3, #0
 8003dcc:	69fa      	ldr	r2, [r7, #28]
 8003dce:	f002 0203 	and.w	r2, r2, #3
 8003dd2:	0092      	lsls	r2, r2, #2
 8003dd4:	4093      	lsls	r3, r2
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ddc:	4935      	ldr	r1, [pc, #212]	; (8003eb4 <HAL_GPIO_Init+0x328>)
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	089b      	lsrs	r3, r3, #2
 8003de2:	3302      	adds	r3, #2
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003dea:	4b3d      	ldr	r3, [pc, #244]	; (8003ee0 <HAL_GPIO_Init+0x354>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	43db      	mvns	r3, r3
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	4013      	ands	r3, r2
 8003df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d003      	beq.n	8003e0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e0e:	4a34      	ldr	r2, [pc, #208]	; (8003ee0 <HAL_GPIO_Init+0x354>)
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e14:	4b32      	ldr	r3, [pc, #200]	; (8003ee0 <HAL_GPIO_Init+0x354>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	4013      	ands	r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d003      	beq.n	8003e38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e38:	4a29      	ldr	r2, [pc, #164]	; (8003ee0 <HAL_GPIO_Init+0x354>)
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e3e:	4b28      	ldr	r3, [pc, #160]	; (8003ee0 <HAL_GPIO_Init+0x354>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	43db      	mvns	r3, r3
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d003      	beq.n	8003e62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e62:	4a1f      	ldr	r2, [pc, #124]	; (8003ee0 <HAL_GPIO_Init+0x354>)
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e68:	4b1d      	ldr	r3, [pc, #116]	; (8003ee0 <HAL_GPIO_Init+0x354>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	43db      	mvns	r3, r3
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	4013      	ands	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e8c:	4a14      	ldr	r2, [pc, #80]	; (8003ee0 <HAL_GPIO_Init+0x354>)
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	3301      	adds	r3, #1
 8003e96:	61fb      	str	r3, [r7, #28]
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	2b0f      	cmp	r3, #15
 8003e9c:	f67f ae84 	bls.w	8003ba8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ea0:	bf00      	nop
 8003ea2:	bf00      	nop
 8003ea4:	3724      	adds	r7, #36	; 0x24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	40023800 	.word	0x40023800
 8003eb4:	40013800 	.word	0x40013800
 8003eb8:	40020000 	.word	0x40020000
 8003ebc:	40020400 	.word	0x40020400
 8003ec0:	40020800 	.word	0x40020800
 8003ec4:	40020c00 	.word	0x40020c00
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	40021400 	.word	0x40021400
 8003ed0:	40021800 	.word	0x40021800
 8003ed4:	40021c00 	.word	0x40021c00
 8003ed8:	40022000 	.word	0x40022000
 8003edc:	40022400 	.word	0x40022400
 8003ee0:	40013c00 	.word	0x40013c00

08003ee4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003eee:	2300      	movs	r3, #0
 8003ef0:	603b      	str	r3, [r7, #0]
 8003ef2:	4b20      	ldr	r3, [pc, #128]	; (8003f74 <HAL_PWREx_EnableOverDrive+0x90>)
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	4a1f      	ldr	r2, [pc, #124]	; (8003f74 <HAL_PWREx_EnableOverDrive+0x90>)
 8003ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003efc:	6413      	str	r3, [r2, #64]	; 0x40
 8003efe:	4b1d      	ldr	r3, [pc, #116]	; (8003f74 <HAL_PWREx_EnableOverDrive+0x90>)
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f06:	603b      	str	r3, [r7, #0]
 8003f08:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003f0a:	4b1b      	ldr	r3, [pc, #108]	; (8003f78 <HAL_PWREx_EnableOverDrive+0x94>)
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f10:	f7ff f8f8 	bl	8003104 <HAL_GetTick>
 8003f14:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f16:	e009      	b.n	8003f2c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f18:	f7ff f8f4 	bl	8003104 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f26:	d901      	bls.n	8003f2c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e01f      	b.n	8003f6c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f2c:	4b13      	ldr	r3, [pc, #76]	; (8003f7c <HAL_PWREx_EnableOverDrive+0x98>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f38:	d1ee      	bne.n	8003f18 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f3a:	4b11      	ldr	r3, [pc, #68]	; (8003f80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f40:	f7ff f8e0 	bl	8003104 <HAL_GetTick>
 8003f44:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f46:	e009      	b.n	8003f5c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f48:	f7ff f8dc 	bl	8003104 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f56:	d901      	bls.n	8003f5c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e007      	b.n	8003f6c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f5c:	4b07      	ldr	r3, [pc, #28]	; (8003f7c <HAL_PWREx_EnableOverDrive+0x98>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f68:	d1ee      	bne.n	8003f48 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40023800 	.word	0x40023800
 8003f78:	420e0040 	.word	0x420e0040
 8003f7c:	40007000 	.word	0x40007000
 8003f80:	420e0044 	.word	0x420e0044

08003f84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e264      	b.n	8004460 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d075      	beq.n	800408e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fa2:	4ba3      	ldr	r3, [pc, #652]	; (8004230 <HAL_RCC_OscConfig+0x2ac>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 030c 	and.w	r3, r3, #12
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	d00c      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fae:	4ba0      	ldr	r3, [pc, #640]	; (8004230 <HAL_RCC_OscConfig+0x2ac>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fb6:	2b08      	cmp	r3, #8
 8003fb8:	d112      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fba:	4b9d      	ldr	r3, [pc, #628]	; (8004230 <HAL_RCC_OscConfig+0x2ac>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fc6:	d10b      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc8:	4b99      	ldr	r3, [pc, #612]	; (8004230 <HAL_RCC_OscConfig+0x2ac>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d05b      	beq.n	800408c <HAL_RCC_OscConfig+0x108>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d157      	bne.n	800408c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e23f      	b.n	8004460 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe8:	d106      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x74>
 8003fea:	4b91      	ldr	r3, [pc, #580]	; (8004230 <HAL_RCC_OscConfig+0x2ac>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a90      	ldr	r2, [pc, #576]	; (8004230 <HAL_RCC_OscConfig+0x2ac>)
 8003ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	e01d      	b.n	8004034 <HAL_RCC_OscConfig+0xb0>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004000:	d10c      	bne.n	800401c <HAL_RCC_OscConfig+0x98>
 8004002:	4b8b      	ldr	r3, [pc, #556]	; (8004230 <HAL_RCC_OscConfig+0x2ac>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a8a      	ldr	r2, [pc, #552]	; (8004230 <HAL_RCC_OscConfig+0x2ac>)
 8004008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	4b88      	ldr	r3, [pc, #544]	; (8004230 <HAL_RCC_OscConfig+0x2ac>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a87      	ldr	r2, [pc, #540]	; (8004230 <HAL_RCC_OscConfig+0x2ac>)
 8004014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004018:	6013      	str	r3, [r2, #0]
 800401a:	e00b      	b.n	8004034 <HAL_RCC_OscConfig+0xb0>
 800401c:	4b84      	ldr	r3, [pc, #528]	; (8004230 <HAL_RCC_OscConfig+0x2ac>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a83      	ldr	r2, [pc, #524]	; (8004230 <HAL_RCC_OscConfig+0x2ac>)
 8004022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004026:	6013      	str	r3, [r2, #0]
 8004028:	4b81      	ldr	r3, [pc, #516]	; (8004230 <HAL_RCC_OscConfig+0x2ac>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a80      	ldr	r2, [pc, #512]	; (8004230 <HAL_RCC_OscConfig+0x2ac>)
 800402e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d013      	beq.n	8004064 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403c:	f7ff f862 	bl	8003104 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004044:	f7ff f85e 	bl	8003104 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b64      	cmp	r3, #100	; 0x64
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e204      	b.n	8004460 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004056:	4b76      	ldr	r3, [pc, #472]	; (8004230 <HAL_RCC_OscConfig+0x2ac>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0f0      	beq.n	8004044 <HAL_RCC_OscConfig+0xc0>
 8004062:	e014      	b.n	800408e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004064:	f7ff f84e 	bl	8003104 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800406c:	f7ff f84a 	bl	8003104 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b64      	cmp	r3, #100	; 0x64
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e1f0      	b.n	8004460 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800407e:	4b6c      	ldr	r3, [pc, #432]	; (8004230 <HAL_RCC_OscConfig+0x2ac>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f0      	bne.n	800406c <HAL_RCC_OscConfig+0xe8>
 800408a:	e000      	b.n	800408e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800408c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d063      	beq.n	8004162 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800409a:	4b65      	ldr	r3, [pc, #404]	; (8004230 <HAL_RCC_OscConfig+0x2ac>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 030c 	and.w	r3, r3, #12
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00b      	beq.n	80040be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040a6:	4b62      	ldr	r3, [pc, #392]	; (8004230 <HAL_RCC_OscConfig+0x2ac>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040ae:	2b08      	cmp	r3, #8
 80040b0:	d11c      	bne.n	80040ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040b2:	4b5f      	ldr	r3, [pc, #380]	; (8004230 <HAL_RCC_OscConfig+0x2ac>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d116      	bne.n	80040ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040be:	4b5c      	ldr	r3, [pc, #368]	; (8004230 <HAL_RCC_OscConfig+0x2ac>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d005      	beq.n	80040d6 <HAL_RCC_OscConfig+0x152>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d001      	beq.n	80040d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e1c4      	b.n	8004460 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d6:	4b56      	ldr	r3, [pc, #344]	; (8004230 <HAL_RCC_OscConfig+0x2ac>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	4952      	ldr	r1, [pc, #328]	; (8004230 <HAL_RCC_OscConfig+0x2ac>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ea:	e03a      	b.n	8004162 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d020      	beq.n	8004136 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040f4:	4b4f      	ldr	r3, [pc, #316]	; (8004234 <HAL_RCC_OscConfig+0x2b0>)
 80040f6:	2201      	movs	r2, #1
 80040f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fa:	f7ff f803 	bl	8003104 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004100:	e008      	b.n	8004114 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004102:	f7fe ffff 	bl	8003104 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e1a5      	b.n	8004460 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004114:	4b46      	ldr	r3, [pc, #280]	; (8004230 <HAL_RCC_OscConfig+0x2ac>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d0f0      	beq.n	8004102 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004120:	4b43      	ldr	r3, [pc, #268]	; (8004230 <HAL_RCC_OscConfig+0x2ac>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	4940      	ldr	r1, [pc, #256]	; (8004230 <HAL_RCC_OscConfig+0x2ac>)
 8004130:	4313      	orrs	r3, r2
 8004132:	600b      	str	r3, [r1, #0]
 8004134:	e015      	b.n	8004162 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004136:	4b3f      	ldr	r3, [pc, #252]	; (8004234 <HAL_RCC_OscConfig+0x2b0>)
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413c:	f7fe ffe2 	bl	8003104 <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004144:	f7fe ffde 	bl	8003104 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e184      	b.n	8004460 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004156:	4b36      	ldr	r3, [pc, #216]	; (8004230 <HAL_RCC_OscConfig+0x2ac>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1f0      	bne.n	8004144 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0308 	and.w	r3, r3, #8
 800416a:	2b00      	cmp	r3, #0
 800416c:	d030      	beq.n	80041d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d016      	beq.n	80041a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004176:	4b30      	ldr	r3, [pc, #192]	; (8004238 <HAL_RCC_OscConfig+0x2b4>)
 8004178:	2201      	movs	r2, #1
 800417a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417c:	f7fe ffc2 	bl	8003104 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004184:	f7fe ffbe 	bl	8003104 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e164      	b.n	8004460 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004196:	4b26      	ldr	r3, [pc, #152]	; (8004230 <HAL_RCC_OscConfig+0x2ac>)
 8004198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d0f0      	beq.n	8004184 <HAL_RCC_OscConfig+0x200>
 80041a2:	e015      	b.n	80041d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041a4:	4b24      	ldr	r3, [pc, #144]	; (8004238 <HAL_RCC_OscConfig+0x2b4>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041aa:	f7fe ffab 	bl	8003104 <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041b0:	e008      	b.n	80041c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041b2:	f7fe ffa7 	bl	8003104 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e14d      	b.n	8004460 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c4:	4b1a      	ldr	r3, [pc, #104]	; (8004230 <HAL_RCC_OscConfig+0x2ac>)
 80041c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1f0      	bne.n	80041b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 80a0 	beq.w	800431e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041de:	2300      	movs	r3, #0
 80041e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041e2:	4b13      	ldr	r3, [pc, #76]	; (8004230 <HAL_RCC_OscConfig+0x2ac>)
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10f      	bne.n	800420e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ee:	2300      	movs	r3, #0
 80041f0:	60bb      	str	r3, [r7, #8]
 80041f2:	4b0f      	ldr	r3, [pc, #60]	; (8004230 <HAL_RCC_OscConfig+0x2ac>)
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	4a0e      	ldr	r2, [pc, #56]	; (8004230 <HAL_RCC_OscConfig+0x2ac>)
 80041f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041fc:	6413      	str	r3, [r2, #64]	; 0x40
 80041fe:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <HAL_RCC_OscConfig+0x2ac>)
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004206:	60bb      	str	r3, [r7, #8]
 8004208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800420a:	2301      	movs	r3, #1
 800420c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800420e:	4b0b      	ldr	r3, [pc, #44]	; (800423c <HAL_RCC_OscConfig+0x2b8>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004216:	2b00      	cmp	r3, #0
 8004218:	d121      	bne.n	800425e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800421a:	4b08      	ldr	r3, [pc, #32]	; (800423c <HAL_RCC_OscConfig+0x2b8>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a07      	ldr	r2, [pc, #28]	; (800423c <HAL_RCC_OscConfig+0x2b8>)
 8004220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004226:	f7fe ff6d 	bl	8003104 <HAL_GetTick>
 800422a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422c:	e011      	b.n	8004252 <HAL_RCC_OscConfig+0x2ce>
 800422e:	bf00      	nop
 8004230:	40023800 	.word	0x40023800
 8004234:	42470000 	.word	0x42470000
 8004238:	42470e80 	.word	0x42470e80
 800423c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004240:	f7fe ff60 	bl	8003104 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e106      	b.n	8004460 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004252:	4b85      	ldr	r3, [pc, #532]	; (8004468 <HAL_RCC_OscConfig+0x4e4>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0f0      	beq.n	8004240 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d106      	bne.n	8004274 <HAL_RCC_OscConfig+0x2f0>
 8004266:	4b81      	ldr	r3, [pc, #516]	; (800446c <HAL_RCC_OscConfig+0x4e8>)
 8004268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426a:	4a80      	ldr	r2, [pc, #512]	; (800446c <HAL_RCC_OscConfig+0x4e8>)
 800426c:	f043 0301 	orr.w	r3, r3, #1
 8004270:	6713      	str	r3, [r2, #112]	; 0x70
 8004272:	e01c      	b.n	80042ae <HAL_RCC_OscConfig+0x32a>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	2b05      	cmp	r3, #5
 800427a:	d10c      	bne.n	8004296 <HAL_RCC_OscConfig+0x312>
 800427c:	4b7b      	ldr	r3, [pc, #492]	; (800446c <HAL_RCC_OscConfig+0x4e8>)
 800427e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004280:	4a7a      	ldr	r2, [pc, #488]	; (800446c <HAL_RCC_OscConfig+0x4e8>)
 8004282:	f043 0304 	orr.w	r3, r3, #4
 8004286:	6713      	str	r3, [r2, #112]	; 0x70
 8004288:	4b78      	ldr	r3, [pc, #480]	; (800446c <HAL_RCC_OscConfig+0x4e8>)
 800428a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428c:	4a77      	ldr	r2, [pc, #476]	; (800446c <HAL_RCC_OscConfig+0x4e8>)
 800428e:	f043 0301 	orr.w	r3, r3, #1
 8004292:	6713      	str	r3, [r2, #112]	; 0x70
 8004294:	e00b      	b.n	80042ae <HAL_RCC_OscConfig+0x32a>
 8004296:	4b75      	ldr	r3, [pc, #468]	; (800446c <HAL_RCC_OscConfig+0x4e8>)
 8004298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429a:	4a74      	ldr	r2, [pc, #464]	; (800446c <HAL_RCC_OscConfig+0x4e8>)
 800429c:	f023 0301 	bic.w	r3, r3, #1
 80042a0:	6713      	str	r3, [r2, #112]	; 0x70
 80042a2:	4b72      	ldr	r3, [pc, #456]	; (800446c <HAL_RCC_OscConfig+0x4e8>)
 80042a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a6:	4a71      	ldr	r2, [pc, #452]	; (800446c <HAL_RCC_OscConfig+0x4e8>)
 80042a8:	f023 0304 	bic.w	r3, r3, #4
 80042ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d015      	beq.n	80042e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b6:	f7fe ff25 	bl	8003104 <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042bc:	e00a      	b.n	80042d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042be:	f7fe ff21 	bl	8003104 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e0c5      	b.n	8004460 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042d4:	4b65      	ldr	r3, [pc, #404]	; (800446c <HAL_RCC_OscConfig+0x4e8>)
 80042d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d0ee      	beq.n	80042be <HAL_RCC_OscConfig+0x33a>
 80042e0:	e014      	b.n	800430c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042e2:	f7fe ff0f 	bl	8003104 <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042e8:	e00a      	b.n	8004300 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ea:	f7fe ff0b 	bl	8003104 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e0af      	b.n	8004460 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004300:	4b5a      	ldr	r3, [pc, #360]	; (800446c <HAL_RCC_OscConfig+0x4e8>)
 8004302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1ee      	bne.n	80042ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800430c:	7dfb      	ldrb	r3, [r7, #23]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d105      	bne.n	800431e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004312:	4b56      	ldr	r3, [pc, #344]	; (800446c <HAL_RCC_OscConfig+0x4e8>)
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	4a55      	ldr	r2, [pc, #340]	; (800446c <HAL_RCC_OscConfig+0x4e8>)
 8004318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800431c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 809b 	beq.w	800445e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004328:	4b50      	ldr	r3, [pc, #320]	; (800446c <HAL_RCC_OscConfig+0x4e8>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f003 030c 	and.w	r3, r3, #12
 8004330:	2b08      	cmp	r3, #8
 8004332:	d05c      	beq.n	80043ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	2b02      	cmp	r3, #2
 800433a:	d141      	bne.n	80043c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800433c:	4b4c      	ldr	r3, [pc, #304]	; (8004470 <HAL_RCC_OscConfig+0x4ec>)
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004342:	f7fe fedf 	bl	8003104 <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004348:	e008      	b.n	800435c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800434a:	f7fe fedb 	bl	8003104 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d901      	bls.n	800435c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e081      	b.n	8004460 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800435c:	4b43      	ldr	r3, [pc, #268]	; (800446c <HAL_RCC_OscConfig+0x4e8>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1f0      	bne.n	800434a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	69da      	ldr	r2, [r3, #28]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	431a      	orrs	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	019b      	lsls	r3, r3, #6
 8004378:	431a      	orrs	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437e:	085b      	lsrs	r3, r3, #1
 8004380:	3b01      	subs	r3, #1
 8004382:	041b      	lsls	r3, r3, #16
 8004384:	431a      	orrs	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438a:	061b      	lsls	r3, r3, #24
 800438c:	4937      	ldr	r1, [pc, #220]	; (800446c <HAL_RCC_OscConfig+0x4e8>)
 800438e:	4313      	orrs	r3, r2
 8004390:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004392:	4b37      	ldr	r3, [pc, #220]	; (8004470 <HAL_RCC_OscConfig+0x4ec>)
 8004394:	2201      	movs	r2, #1
 8004396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004398:	f7fe feb4 	bl	8003104 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043a0:	f7fe feb0 	bl	8003104 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e056      	b.n	8004460 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043b2:	4b2e      	ldr	r3, [pc, #184]	; (800446c <HAL_RCC_OscConfig+0x4e8>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCC_OscConfig+0x41c>
 80043be:	e04e      	b.n	800445e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043c0:	4b2b      	ldr	r3, [pc, #172]	; (8004470 <HAL_RCC_OscConfig+0x4ec>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c6:	f7fe fe9d 	bl	8003104 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043ce:	f7fe fe99 	bl	8003104 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e03f      	b.n	8004460 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043e0:	4b22      	ldr	r3, [pc, #136]	; (800446c <HAL_RCC_OscConfig+0x4e8>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1f0      	bne.n	80043ce <HAL_RCC_OscConfig+0x44a>
 80043ec:	e037      	b.n	800445e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d101      	bne.n	80043fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e032      	b.n	8004460 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043fa:	4b1c      	ldr	r3, [pc, #112]	; (800446c <HAL_RCC_OscConfig+0x4e8>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d028      	beq.n	800445a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004412:	429a      	cmp	r2, r3
 8004414:	d121      	bne.n	800445a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004420:	429a      	cmp	r2, r3
 8004422:	d11a      	bne.n	800445a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800442a:	4013      	ands	r3, r2
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004430:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004432:	4293      	cmp	r3, r2
 8004434:	d111      	bne.n	800445a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004440:	085b      	lsrs	r3, r3, #1
 8004442:	3b01      	subs	r3, #1
 8004444:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004446:	429a      	cmp	r2, r3
 8004448:	d107      	bne.n	800445a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004456:	429a      	cmp	r2, r3
 8004458:	d001      	beq.n	800445e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e000      	b.n	8004460 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3718      	adds	r7, #24
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40007000 	.word	0x40007000
 800446c:	40023800 	.word	0x40023800
 8004470:	42470060 	.word	0x42470060

08004474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d101      	bne.n	8004488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e0cc      	b.n	8004622 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004488:	4b68      	ldr	r3, [pc, #416]	; (800462c <HAL_RCC_ClockConfig+0x1b8>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 030f 	and.w	r3, r3, #15
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	429a      	cmp	r2, r3
 8004494:	d90c      	bls.n	80044b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004496:	4b65      	ldr	r3, [pc, #404]	; (800462c <HAL_RCC_ClockConfig+0x1b8>)
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	b2d2      	uxtb	r2, r2
 800449c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800449e:	4b63      	ldr	r3, [pc, #396]	; (800462c <HAL_RCC_ClockConfig+0x1b8>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 030f 	and.w	r3, r3, #15
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d001      	beq.n	80044b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e0b8      	b.n	8004622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d020      	beq.n	80044fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d005      	beq.n	80044d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044c8:	4b59      	ldr	r3, [pc, #356]	; (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	4a58      	ldr	r2, [pc, #352]	; (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0308 	and.w	r3, r3, #8
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d005      	beq.n	80044ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044e0:	4b53      	ldr	r3, [pc, #332]	; (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	4a52      	ldr	r2, [pc, #328]	; (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80044e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044ec:	4b50      	ldr	r3, [pc, #320]	; (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	494d      	ldr	r1, [pc, #308]	; (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d044      	beq.n	8004594 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d107      	bne.n	8004522 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004512:	4b47      	ldr	r3, [pc, #284]	; (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d119      	bne.n	8004552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e07f      	b.n	8004622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b02      	cmp	r3, #2
 8004528:	d003      	beq.n	8004532 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800452e:	2b03      	cmp	r3, #3
 8004530:	d107      	bne.n	8004542 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004532:	4b3f      	ldr	r3, [pc, #252]	; (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d109      	bne.n	8004552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e06f      	b.n	8004622 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004542:	4b3b      	ldr	r3, [pc, #236]	; (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e067      	b.n	8004622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004552:	4b37      	ldr	r3, [pc, #220]	; (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f023 0203 	bic.w	r2, r3, #3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	4934      	ldr	r1, [pc, #208]	; (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 8004560:	4313      	orrs	r3, r2
 8004562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004564:	f7fe fdce 	bl	8003104 <HAL_GetTick>
 8004568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800456a:	e00a      	b.n	8004582 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800456c:	f7fe fdca 	bl	8003104 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	f241 3288 	movw	r2, #5000	; 0x1388
 800457a:	4293      	cmp	r3, r2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e04f      	b.n	8004622 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004582:	4b2b      	ldr	r3, [pc, #172]	; (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 020c 	and.w	r2, r3, #12
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	429a      	cmp	r2, r3
 8004592:	d1eb      	bne.n	800456c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004594:	4b25      	ldr	r3, [pc, #148]	; (800462c <HAL_RCC_ClockConfig+0x1b8>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 030f 	and.w	r3, r3, #15
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d20c      	bcs.n	80045bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a2:	4b22      	ldr	r3, [pc, #136]	; (800462c <HAL_RCC_ClockConfig+0x1b8>)
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045aa:	4b20      	ldr	r3, [pc, #128]	; (800462c <HAL_RCC_ClockConfig+0x1b8>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 030f 	and.w	r3, r3, #15
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d001      	beq.n	80045bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e032      	b.n	8004622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d008      	beq.n	80045da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045c8:	4b19      	ldr	r3, [pc, #100]	; (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	4916      	ldr	r1, [pc, #88]	; (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0308 	and.w	r3, r3, #8
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d009      	beq.n	80045fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045e6:	4b12      	ldr	r3, [pc, #72]	; (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	490e      	ldr	r1, [pc, #56]	; (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045fa:	f000 f82d 	bl	8004658 <HAL_RCC_GetSysClockFreq>
 80045fe:	4602      	mov	r2, r0
 8004600:	4b0b      	ldr	r3, [pc, #44]	; (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	091b      	lsrs	r3, r3, #4
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	490a      	ldr	r1, [pc, #40]	; (8004634 <HAL_RCC_ClockConfig+0x1c0>)
 800460c:	5ccb      	ldrb	r3, [r1, r3]
 800460e:	fa22 f303 	lsr.w	r3, r2, r3
 8004612:	4a09      	ldr	r2, [pc, #36]	; (8004638 <HAL_RCC_ClockConfig+0x1c4>)
 8004614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004616:	4b09      	ldr	r3, [pc, #36]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f7fe fd2e 	bl	800307c <HAL_InitTick>

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	40023c00 	.word	0x40023c00
 8004630:	40023800 	.word	0x40023800
 8004634:	08006680 	.word	0x08006680
 8004638:	20000004 	.word	0x20000004
 800463c:	20000008 	.word	0x20000008

08004640 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004644:	4b03      	ldr	r3, [pc, #12]	; (8004654 <HAL_RCC_EnableCSS+0x14>)
 8004646:	2201      	movs	r2, #1
 8004648:	601a      	str	r2, [r3, #0]
}
 800464a:	bf00      	nop
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr
 8004654:	4247004c 	.word	0x4247004c

08004658 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004658:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800465c:	b084      	sub	sp, #16
 800465e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004660:	2300      	movs	r3, #0
 8004662:	607b      	str	r3, [r7, #4]
 8004664:	2300      	movs	r3, #0
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	2300      	movs	r3, #0
 800466a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004670:	4b67      	ldr	r3, [pc, #412]	; (8004810 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 030c 	and.w	r3, r3, #12
 8004678:	2b08      	cmp	r3, #8
 800467a:	d00d      	beq.n	8004698 <HAL_RCC_GetSysClockFreq+0x40>
 800467c:	2b08      	cmp	r3, #8
 800467e:	f200 80bd 	bhi.w	80047fc <HAL_RCC_GetSysClockFreq+0x1a4>
 8004682:	2b00      	cmp	r3, #0
 8004684:	d002      	beq.n	800468c <HAL_RCC_GetSysClockFreq+0x34>
 8004686:	2b04      	cmp	r3, #4
 8004688:	d003      	beq.n	8004692 <HAL_RCC_GetSysClockFreq+0x3a>
 800468a:	e0b7      	b.n	80047fc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800468c:	4b61      	ldr	r3, [pc, #388]	; (8004814 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800468e:	60bb      	str	r3, [r7, #8]
       break;
 8004690:	e0b7      	b.n	8004802 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004692:	4b61      	ldr	r3, [pc, #388]	; (8004818 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004694:	60bb      	str	r3, [r7, #8]
      break;
 8004696:	e0b4      	b.n	8004802 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004698:	4b5d      	ldr	r3, [pc, #372]	; (8004810 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046a2:	4b5b      	ldr	r3, [pc, #364]	; (8004810 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d04d      	beq.n	800474a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ae:	4b58      	ldr	r3, [pc, #352]	; (8004810 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	099b      	lsrs	r3, r3, #6
 80046b4:	461a      	mov	r2, r3
 80046b6:	f04f 0300 	mov.w	r3, #0
 80046ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80046be:	f04f 0100 	mov.w	r1, #0
 80046c2:	ea02 0800 	and.w	r8, r2, r0
 80046c6:	ea03 0901 	and.w	r9, r3, r1
 80046ca:	4640      	mov	r0, r8
 80046cc:	4649      	mov	r1, r9
 80046ce:	f04f 0200 	mov.w	r2, #0
 80046d2:	f04f 0300 	mov.w	r3, #0
 80046d6:	014b      	lsls	r3, r1, #5
 80046d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80046dc:	0142      	lsls	r2, r0, #5
 80046de:	4610      	mov	r0, r2
 80046e0:	4619      	mov	r1, r3
 80046e2:	ebb0 0008 	subs.w	r0, r0, r8
 80046e6:	eb61 0109 	sbc.w	r1, r1, r9
 80046ea:	f04f 0200 	mov.w	r2, #0
 80046ee:	f04f 0300 	mov.w	r3, #0
 80046f2:	018b      	lsls	r3, r1, #6
 80046f4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80046f8:	0182      	lsls	r2, r0, #6
 80046fa:	1a12      	subs	r2, r2, r0
 80046fc:	eb63 0301 	sbc.w	r3, r3, r1
 8004700:	f04f 0000 	mov.w	r0, #0
 8004704:	f04f 0100 	mov.w	r1, #0
 8004708:	00d9      	lsls	r1, r3, #3
 800470a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800470e:	00d0      	lsls	r0, r2, #3
 8004710:	4602      	mov	r2, r0
 8004712:	460b      	mov	r3, r1
 8004714:	eb12 0208 	adds.w	r2, r2, r8
 8004718:	eb43 0309 	adc.w	r3, r3, r9
 800471c:	f04f 0000 	mov.w	r0, #0
 8004720:	f04f 0100 	mov.w	r1, #0
 8004724:	0259      	lsls	r1, r3, #9
 8004726:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800472a:	0250      	lsls	r0, r2, #9
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	4610      	mov	r0, r2
 8004732:	4619      	mov	r1, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	461a      	mov	r2, r3
 8004738:	f04f 0300 	mov.w	r3, #0
 800473c:	f7fb fd5e 	bl	80001fc <__aeabi_uldivmod>
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	4613      	mov	r3, r2
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	e04a      	b.n	80047e0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800474a:	4b31      	ldr	r3, [pc, #196]	; (8004810 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	099b      	lsrs	r3, r3, #6
 8004750:	461a      	mov	r2, r3
 8004752:	f04f 0300 	mov.w	r3, #0
 8004756:	f240 10ff 	movw	r0, #511	; 0x1ff
 800475a:	f04f 0100 	mov.w	r1, #0
 800475e:	ea02 0400 	and.w	r4, r2, r0
 8004762:	ea03 0501 	and.w	r5, r3, r1
 8004766:	4620      	mov	r0, r4
 8004768:	4629      	mov	r1, r5
 800476a:	f04f 0200 	mov.w	r2, #0
 800476e:	f04f 0300 	mov.w	r3, #0
 8004772:	014b      	lsls	r3, r1, #5
 8004774:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004778:	0142      	lsls	r2, r0, #5
 800477a:	4610      	mov	r0, r2
 800477c:	4619      	mov	r1, r3
 800477e:	1b00      	subs	r0, r0, r4
 8004780:	eb61 0105 	sbc.w	r1, r1, r5
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	f04f 0300 	mov.w	r3, #0
 800478c:	018b      	lsls	r3, r1, #6
 800478e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004792:	0182      	lsls	r2, r0, #6
 8004794:	1a12      	subs	r2, r2, r0
 8004796:	eb63 0301 	sbc.w	r3, r3, r1
 800479a:	f04f 0000 	mov.w	r0, #0
 800479e:	f04f 0100 	mov.w	r1, #0
 80047a2:	00d9      	lsls	r1, r3, #3
 80047a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047a8:	00d0      	lsls	r0, r2, #3
 80047aa:	4602      	mov	r2, r0
 80047ac:	460b      	mov	r3, r1
 80047ae:	1912      	adds	r2, r2, r4
 80047b0:	eb45 0303 	adc.w	r3, r5, r3
 80047b4:	f04f 0000 	mov.w	r0, #0
 80047b8:	f04f 0100 	mov.w	r1, #0
 80047bc:	0299      	lsls	r1, r3, #10
 80047be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80047c2:	0290      	lsls	r0, r2, #10
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	4610      	mov	r0, r2
 80047ca:	4619      	mov	r1, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	461a      	mov	r2, r3
 80047d0:	f04f 0300 	mov.w	r3, #0
 80047d4:	f7fb fd12 	bl	80001fc <__aeabi_uldivmod>
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	4613      	mov	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047e0:	4b0b      	ldr	r3, [pc, #44]	; (8004810 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	0c1b      	lsrs	r3, r3, #16
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	3301      	adds	r3, #1
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f8:	60bb      	str	r3, [r7, #8]
      break;
 80047fa:	e002      	b.n	8004802 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047fc:	4b05      	ldr	r3, [pc, #20]	; (8004814 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80047fe:	60bb      	str	r3, [r7, #8]
      break;
 8004800:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004802:	68bb      	ldr	r3, [r7, #8]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800480e:	bf00      	nop
 8004810:	40023800 	.word	0x40023800
 8004814:	00f42400 	.word	0x00f42400
 8004818:	007a1200 	.word	0x007a1200

0800481c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800481c:	b480      	push	{r7}
 800481e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004820:	4b03      	ldr	r3, [pc, #12]	; (8004830 <HAL_RCC_GetHCLKFreq+0x14>)
 8004822:	681b      	ldr	r3, [r3, #0]
}
 8004824:	4618      	mov	r0, r3
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	20000004 	.word	0x20000004

08004834 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004838:	f7ff fff0 	bl	800481c <HAL_RCC_GetHCLKFreq>
 800483c:	4602      	mov	r2, r0
 800483e:	4b05      	ldr	r3, [pc, #20]	; (8004854 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	0a9b      	lsrs	r3, r3, #10
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	4903      	ldr	r1, [pc, #12]	; (8004858 <HAL_RCC_GetPCLK1Freq+0x24>)
 800484a:	5ccb      	ldrb	r3, [r1, r3]
 800484c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004850:	4618      	mov	r0, r3
 8004852:	bd80      	pop	{r7, pc}
 8004854:	40023800 	.word	0x40023800
 8004858:	08006690 	.word	0x08006690

0800485c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004860:	f7ff ffdc 	bl	800481c <HAL_RCC_GetHCLKFreq>
 8004864:	4602      	mov	r2, r0
 8004866:	4b05      	ldr	r3, [pc, #20]	; (800487c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	0b5b      	lsrs	r3, r3, #13
 800486c:	f003 0307 	and.w	r3, r3, #7
 8004870:	4903      	ldr	r1, [pc, #12]	; (8004880 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004872:	5ccb      	ldrb	r3, [r1, r3]
 8004874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004878:	4618      	mov	r0, r3
 800487a:	bd80      	pop	{r7, pc}
 800487c:	40023800 	.word	0x40023800
 8004880:	08006690 	.word	0x08006690

08004884 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004888:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <HAL_RCC_NMI_IRQHandler+0x20>)
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004890:	2b80      	cmp	r3, #128	; 0x80
 8004892:	d104      	bne.n	800489e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004894:	f000 f80a 	bl	80048ac <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004898:	4b03      	ldr	r3, [pc, #12]	; (80048a8 <HAL_RCC_NMI_IRQHandler+0x24>)
 800489a:	2280      	movs	r2, #128	; 0x80
 800489c:	701a      	strb	r2, [r3, #0]
  }
}
 800489e:	bf00      	nop
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40023800 	.word	0x40023800
 80048a8:	4002380e 	.word	0x4002380e

080048ac <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b082      	sub	sp, #8
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e041      	b.n	8004950 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d106      	bne.n	80048e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f7fe f9e3 	bl	8002cac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2202      	movs	r2, #2
 80048ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	3304      	adds	r3, #4
 80048f6:	4619      	mov	r1, r3
 80048f8:	4610      	mov	r0, r2
 80048fa:	f000 fa91 	bl	8004e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b01      	cmp	r3, #1
 800496a:	d001      	beq.n	8004970 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e04e      	b.n	8004a0e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2202      	movs	r2, #2
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68da      	ldr	r2, [r3, #12]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0201 	orr.w	r2, r2, #1
 8004986:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a23      	ldr	r2, [pc, #140]	; (8004a1c <HAL_TIM_Base_Start_IT+0xc4>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d022      	beq.n	80049d8 <HAL_TIM_Base_Start_IT+0x80>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800499a:	d01d      	beq.n	80049d8 <HAL_TIM_Base_Start_IT+0x80>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a1f      	ldr	r2, [pc, #124]	; (8004a20 <HAL_TIM_Base_Start_IT+0xc8>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d018      	beq.n	80049d8 <HAL_TIM_Base_Start_IT+0x80>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a1e      	ldr	r2, [pc, #120]	; (8004a24 <HAL_TIM_Base_Start_IT+0xcc>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d013      	beq.n	80049d8 <HAL_TIM_Base_Start_IT+0x80>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a1c      	ldr	r2, [pc, #112]	; (8004a28 <HAL_TIM_Base_Start_IT+0xd0>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d00e      	beq.n	80049d8 <HAL_TIM_Base_Start_IT+0x80>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a1b      	ldr	r2, [pc, #108]	; (8004a2c <HAL_TIM_Base_Start_IT+0xd4>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d009      	beq.n	80049d8 <HAL_TIM_Base_Start_IT+0x80>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a19      	ldr	r2, [pc, #100]	; (8004a30 <HAL_TIM_Base_Start_IT+0xd8>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d004      	beq.n	80049d8 <HAL_TIM_Base_Start_IT+0x80>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a18      	ldr	r2, [pc, #96]	; (8004a34 <HAL_TIM_Base_Start_IT+0xdc>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d111      	bne.n	80049fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f003 0307 	and.w	r3, r3, #7
 80049e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2b06      	cmp	r3, #6
 80049e8:	d010      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f042 0201 	orr.w	r2, r2, #1
 80049f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049fa:	e007      	b.n	8004a0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f042 0201 	orr.w	r2, r2, #1
 8004a0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	40010000 	.word	0x40010000
 8004a20:	40000400 	.word	0x40000400
 8004a24:	40000800 	.word	0x40000800
 8004a28:	40000c00 	.word	0x40000c00
 8004a2c:	40010400 	.word	0x40010400
 8004a30:	40014000 	.word	0x40014000
 8004a34:	40001800 	.word	0x40001800

08004a38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d122      	bne.n	8004a94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d11b      	bne.n	8004a94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f06f 0202 	mvn.w	r2, #2
 8004a64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	f003 0303 	and.w	r3, r3, #3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f9b2 	bl	8004de4 <HAL_TIM_IC_CaptureCallback>
 8004a80:	e005      	b.n	8004a8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f9a4 	bl	8004dd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f9b5 	bl	8004df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	f003 0304 	and.w	r3, r3, #4
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	d122      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d11b      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f06f 0204 	mvn.w	r2, #4
 8004ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2202      	movs	r2, #2
 8004abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f988 	bl	8004de4 <HAL_TIM_IC_CaptureCallback>
 8004ad4:	e005      	b.n	8004ae2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f97a 	bl	8004dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 f98b 	bl	8004df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	2b08      	cmp	r3, #8
 8004af4:	d122      	bne.n	8004b3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f003 0308 	and.w	r3, r3, #8
 8004b00:	2b08      	cmp	r3, #8
 8004b02:	d11b      	bne.n	8004b3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f06f 0208 	mvn.w	r2, #8
 8004b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2204      	movs	r2, #4
 8004b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	f003 0303 	and.w	r3, r3, #3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f95e 	bl	8004de4 <HAL_TIM_IC_CaptureCallback>
 8004b28:	e005      	b.n	8004b36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f950 	bl	8004dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 f961 	bl	8004df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	f003 0310 	and.w	r3, r3, #16
 8004b46:	2b10      	cmp	r3, #16
 8004b48:	d122      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f003 0310 	and.w	r3, r3, #16
 8004b54:	2b10      	cmp	r3, #16
 8004b56:	d11b      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f06f 0210 	mvn.w	r2, #16
 8004b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2208      	movs	r2, #8
 8004b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f934 	bl	8004de4 <HAL_TIM_IC_CaptureCallback>
 8004b7c:	e005      	b.n	8004b8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f926 	bl	8004dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f937 	bl	8004df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d10e      	bne.n	8004bbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d107      	bne.n	8004bbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0201 	mvn.w	r2, #1
 8004bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7fb fcc8 	bl	800054c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc6:	2b80      	cmp	r3, #128	; 0x80
 8004bc8:	d10e      	bne.n	8004be8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd4:	2b80      	cmp	r3, #128	; 0x80
 8004bd6:	d107      	bne.n	8004be8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 fadc 	bl	80051a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf2:	2b40      	cmp	r3, #64	; 0x40
 8004bf4:	d10e      	bne.n	8004c14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c00:	2b40      	cmp	r3, #64	; 0x40
 8004c02:	d107      	bne.n	8004c14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f8fc 	bl	8004e0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	f003 0320 	and.w	r3, r3, #32
 8004c1e:	2b20      	cmp	r3, #32
 8004c20:	d10e      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f003 0320 	and.w	r3, r3, #32
 8004c2c:	2b20      	cmp	r3, #32
 8004c2e:	d107      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f06f 0220 	mvn.w	r2, #32
 8004c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 faa6 	bl	800518c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c40:	bf00      	nop
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d101      	bne.n	8004c60 <HAL_TIM_ConfigClockSource+0x18>
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	e0b3      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x180>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c86:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c98:	d03e      	beq.n	8004d18 <HAL_TIM_ConfigClockSource+0xd0>
 8004c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c9e:	f200 8087 	bhi.w	8004db0 <HAL_TIM_ConfigClockSource+0x168>
 8004ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca6:	f000 8085 	beq.w	8004db4 <HAL_TIM_ConfigClockSource+0x16c>
 8004caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cae:	d87f      	bhi.n	8004db0 <HAL_TIM_ConfigClockSource+0x168>
 8004cb0:	2b70      	cmp	r3, #112	; 0x70
 8004cb2:	d01a      	beq.n	8004cea <HAL_TIM_ConfigClockSource+0xa2>
 8004cb4:	2b70      	cmp	r3, #112	; 0x70
 8004cb6:	d87b      	bhi.n	8004db0 <HAL_TIM_ConfigClockSource+0x168>
 8004cb8:	2b60      	cmp	r3, #96	; 0x60
 8004cba:	d050      	beq.n	8004d5e <HAL_TIM_ConfigClockSource+0x116>
 8004cbc:	2b60      	cmp	r3, #96	; 0x60
 8004cbe:	d877      	bhi.n	8004db0 <HAL_TIM_ConfigClockSource+0x168>
 8004cc0:	2b50      	cmp	r3, #80	; 0x50
 8004cc2:	d03c      	beq.n	8004d3e <HAL_TIM_ConfigClockSource+0xf6>
 8004cc4:	2b50      	cmp	r3, #80	; 0x50
 8004cc6:	d873      	bhi.n	8004db0 <HAL_TIM_ConfigClockSource+0x168>
 8004cc8:	2b40      	cmp	r3, #64	; 0x40
 8004cca:	d058      	beq.n	8004d7e <HAL_TIM_ConfigClockSource+0x136>
 8004ccc:	2b40      	cmp	r3, #64	; 0x40
 8004cce:	d86f      	bhi.n	8004db0 <HAL_TIM_ConfigClockSource+0x168>
 8004cd0:	2b30      	cmp	r3, #48	; 0x30
 8004cd2:	d064      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0x156>
 8004cd4:	2b30      	cmp	r3, #48	; 0x30
 8004cd6:	d86b      	bhi.n	8004db0 <HAL_TIM_ConfigClockSource+0x168>
 8004cd8:	2b20      	cmp	r3, #32
 8004cda:	d060      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0x156>
 8004cdc:	2b20      	cmp	r3, #32
 8004cde:	d867      	bhi.n	8004db0 <HAL_TIM_ConfigClockSource+0x168>
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d05c      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0x156>
 8004ce4:	2b10      	cmp	r3, #16
 8004ce6:	d05a      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004ce8:	e062      	b.n	8004db0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6818      	ldr	r0, [r3, #0]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	6899      	ldr	r1, [r3, #8]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	f000 f9ab 	bl	8005054 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d0c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	609a      	str	r2, [r3, #8]
      break;
 8004d16:	e04e      	b.n	8004db6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6818      	ldr	r0, [r3, #0]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	6899      	ldr	r1, [r3, #8]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f000 f994 	bl	8005054 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689a      	ldr	r2, [r3, #8]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d3a:	609a      	str	r2, [r3, #8]
      break;
 8004d3c:	e03b      	b.n	8004db6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6818      	ldr	r0, [r3, #0]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	6859      	ldr	r1, [r3, #4]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f000 f908 	bl	8004f60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2150      	movs	r1, #80	; 0x50
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 f961 	bl	800501e <TIM_ITRx_SetConfig>
      break;
 8004d5c:	e02b      	b.n	8004db6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6818      	ldr	r0, [r3, #0]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	6859      	ldr	r1, [r3, #4]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	f000 f927 	bl	8004fbe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2160      	movs	r1, #96	; 0x60
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 f951 	bl	800501e <TIM_ITRx_SetConfig>
      break;
 8004d7c:	e01b      	b.n	8004db6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6818      	ldr	r0, [r3, #0]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	6859      	ldr	r1, [r3, #4]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f000 f8e8 	bl	8004f60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2140      	movs	r1, #64	; 0x40
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 f941 	bl	800501e <TIM_ITRx_SetConfig>
      break;
 8004d9c:	e00b      	b.n	8004db6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4619      	mov	r1, r3
 8004da8:	4610      	mov	r0, r2
 8004daa:	f000 f938 	bl	800501e <TIM_ITRx_SetConfig>
        break;
 8004dae:	e002      	b.n	8004db6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004db0:	bf00      	nop
 8004db2:	e000      	b.n	8004db6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004db4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a40      	ldr	r2, [pc, #256]	; (8004f34 <TIM_Base_SetConfig+0x114>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d013      	beq.n	8004e60 <TIM_Base_SetConfig+0x40>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e3e:	d00f      	beq.n	8004e60 <TIM_Base_SetConfig+0x40>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a3d      	ldr	r2, [pc, #244]	; (8004f38 <TIM_Base_SetConfig+0x118>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d00b      	beq.n	8004e60 <TIM_Base_SetConfig+0x40>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a3c      	ldr	r2, [pc, #240]	; (8004f3c <TIM_Base_SetConfig+0x11c>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d007      	beq.n	8004e60 <TIM_Base_SetConfig+0x40>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a3b      	ldr	r2, [pc, #236]	; (8004f40 <TIM_Base_SetConfig+0x120>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d003      	beq.n	8004e60 <TIM_Base_SetConfig+0x40>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a3a      	ldr	r2, [pc, #232]	; (8004f44 <TIM_Base_SetConfig+0x124>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d108      	bne.n	8004e72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a2f      	ldr	r2, [pc, #188]	; (8004f34 <TIM_Base_SetConfig+0x114>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d02b      	beq.n	8004ed2 <TIM_Base_SetConfig+0xb2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e80:	d027      	beq.n	8004ed2 <TIM_Base_SetConfig+0xb2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a2c      	ldr	r2, [pc, #176]	; (8004f38 <TIM_Base_SetConfig+0x118>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d023      	beq.n	8004ed2 <TIM_Base_SetConfig+0xb2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a2b      	ldr	r2, [pc, #172]	; (8004f3c <TIM_Base_SetConfig+0x11c>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d01f      	beq.n	8004ed2 <TIM_Base_SetConfig+0xb2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a2a      	ldr	r2, [pc, #168]	; (8004f40 <TIM_Base_SetConfig+0x120>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d01b      	beq.n	8004ed2 <TIM_Base_SetConfig+0xb2>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a29      	ldr	r2, [pc, #164]	; (8004f44 <TIM_Base_SetConfig+0x124>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d017      	beq.n	8004ed2 <TIM_Base_SetConfig+0xb2>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a28      	ldr	r2, [pc, #160]	; (8004f48 <TIM_Base_SetConfig+0x128>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d013      	beq.n	8004ed2 <TIM_Base_SetConfig+0xb2>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a27      	ldr	r2, [pc, #156]	; (8004f4c <TIM_Base_SetConfig+0x12c>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00f      	beq.n	8004ed2 <TIM_Base_SetConfig+0xb2>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a26      	ldr	r2, [pc, #152]	; (8004f50 <TIM_Base_SetConfig+0x130>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d00b      	beq.n	8004ed2 <TIM_Base_SetConfig+0xb2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a25      	ldr	r2, [pc, #148]	; (8004f54 <TIM_Base_SetConfig+0x134>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d007      	beq.n	8004ed2 <TIM_Base_SetConfig+0xb2>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a24      	ldr	r2, [pc, #144]	; (8004f58 <TIM_Base_SetConfig+0x138>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d003      	beq.n	8004ed2 <TIM_Base_SetConfig+0xb2>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a23      	ldr	r2, [pc, #140]	; (8004f5c <TIM_Base_SetConfig+0x13c>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d108      	bne.n	8004ee4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a0a      	ldr	r2, [pc, #40]	; (8004f34 <TIM_Base_SetConfig+0x114>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d003      	beq.n	8004f18 <TIM_Base_SetConfig+0xf8>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a0c      	ldr	r2, [pc, #48]	; (8004f44 <TIM_Base_SetConfig+0x124>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d103      	bne.n	8004f20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	691a      	ldr	r2, [r3, #16]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	615a      	str	r2, [r3, #20]
}
 8004f26:	bf00      	nop
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	40010000 	.word	0x40010000
 8004f38:	40000400 	.word	0x40000400
 8004f3c:	40000800 	.word	0x40000800
 8004f40:	40000c00 	.word	0x40000c00
 8004f44:	40010400 	.word	0x40010400
 8004f48:	40014000 	.word	0x40014000
 8004f4c:	40014400 	.word	0x40014400
 8004f50:	40014800 	.word	0x40014800
 8004f54:	40001800 	.word	0x40001800
 8004f58:	40001c00 	.word	0x40001c00
 8004f5c:	40002000 	.word	0x40002000

08004f60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	f023 0201 	bic.w	r2, r3, #1
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	011b      	lsls	r3, r3, #4
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f023 030a 	bic.w	r3, r3, #10
 8004f9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	621a      	str	r2, [r3, #32]
}
 8004fb2:	bf00      	nop
 8004fb4:	371c      	adds	r7, #28
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b087      	sub	sp, #28
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	60f8      	str	r0, [r7, #12]
 8004fc6:	60b9      	str	r1, [r7, #8]
 8004fc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	f023 0210 	bic.w	r2, r3, #16
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fe8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	031b      	lsls	r3, r3, #12
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ffa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	011b      	lsls	r3, r3, #4
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	4313      	orrs	r3, r2
 8005004:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	621a      	str	r2, [r3, #32]
}
 8005012:	bf00      	nop
 8005014:	371c      	adds	r7, #28
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800501e:	b480      	push	{r7}
 8005020:	b085      	sub	sp, #20
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
 8005026:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005034:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4313      	orrs	r3, r2
 800503c:	f043 0307 	orr.w	r3, r3, #7
 8005040:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	609a      	str	r2, [r3, #8]
}
 8005048:	bf00      	nop
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
 8005060:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800506e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	021a      	lsls	r2, r3, #8
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	431a      	orrs	r2, r3
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	4313      	orrs	r3, r2
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	4313      	orrs	r3, r2
 8005080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	609a      	str	r2, [r3, #8]
}
 8005088:	bf00      	nop
 800508a:	371c      	adds	r7, #28
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d101      	bne.n	80050ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050a8:	2302      	movs	r3, #2
 80050aa:	e05a      	b.n	8005162 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2202      	movs	r2, #2
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	4313      	orrs	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a21      	ldr	r2, [pc, #132]	; (8005170 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d022      	beq.n	8005136 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f8:	d01d      	beq.n	8005136 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a1d      	ldr	r2, [pc, #116]	; (8005174 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d018      	beq.n	8005136 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a1b      	ldr	r2, [pc, #108]	; (8005178 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d013      	beq.n	8005136 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a1a      	ldr	r2, [pc, #104]	; (800517c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d00e      	beq.n	8005136 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a18      	ldr	r2, [pc, #96]	; (8005180 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d009      	beq.n	8005136 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a17      	ldr	r2, [pc, #92]	; (8005184 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d004      	beq.n	8005136 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a15      	ldr	r2, [pc, #84]	; (8005188 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d10c      	bne.n	8005150 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800513c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	4313      	orrs	r3, r2
 8005146:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3714      	adds	r7, #20
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	40010000 	.word	0x40010000
 8005174:	40000400 	.word	0x40000400
 8005178:	40000800 	.word	0x40000800
 800517c:	40000c00 	.word	0x40000c00
 8005180:	40010400 	.word	0x40010400
 8005184:	40014000 	.word	0x40014000
 8005188:	40001800 	.word	0x40001800

0800518c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e03f      	b.n	8005246 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d106      	bne.n	80051e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7fd fd8c 	bl	8002cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2224      	movs	r2, #36	; 0x24
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68da      	ldr	r2, [r3, #12]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 fd3d 	bl	8005c78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	691a      	ldr	r2, [r3, #16]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800520c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	695a      	ldr	r2, [r3, #20]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800521c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68da      	ldr	r2, [r3, #12]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800522c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2220      	movs	r2, #32
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2220      	movs	r2, #32
 8005240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	4613      	mov	r3, r2
 800525c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b20      	cmp	r3, #32
 8005268:	d153      	bne.n	8005312 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d002      	beq.n	8005276 <HAL_UART_Transmit_DMA+0x26>
 8005270:	88fb      	ldrh	r3, [r7, #6]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e04c      	b.n	8005314 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005280:	2b01      	cmp	r3, #1
 8005282:	d101      	bne.n	8005288 <HAL_UART_Transmit_DMA+0x38>
 8005284:	2302      	movs	r3, #2
 8005286:	e045      	b.n	8005314 <HAL_UART_Transmit_DMA+0xc4>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	88fa      	ldrh	r2, [r7, #6]
 800529a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	88fa      	ldrh	r2, [r7, #6]
 80052a0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2221      	movs	r2, #33	; 0x21
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b4:	4a19      	ldr	r2, [pc, #100]	; (800531c <HAL_UART_Transmit_DMA+0xcc>)
 80052b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052bc:	4a18      	ldr	r2, [pc, #96]	; (8005320 <HAL_UART_Transmit_DMA+0xd0>)
 80052be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c4:	4a17      	ldr	r2, [pc, #92]	; (8005324 <HAL_UART_Transmit_DMA+0xd4>)
 80052c6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052cc:	2200      	movs	r2, #0
 80052ce:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80052d0:	f107 0308 	add.w	r3, r7, #8
 80052d4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	6819      	ldr	r1, [r3, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	3304      	adds	r3, #4
 80052e4:	461a      	mov	r2, r3
 80052e6:	88fb      	ldrh	r3, [r7, #6]
 80052e8:	f7fe f8fc 	bl	80034e4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052f4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	695a      	ldr	r2, [r3, #20]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800530c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800530e:	2300      	movs	r3, #0
 8005310:	e000      	b.n	8005314 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8005312:	2302      	movs	r3, #2
  }
}
 8005314:	4618      	mov	r0, r3
 8005316:	3718      	adds	r7, #24
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	08005735 	.word	0x08005735
 8005320:	08005787 	.word	0x08005787
 8005324:	0800586f 	.word	0x0800586f

08005328 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	4613      	mov	r3, r2
 8005334:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b20      	cmp	r3, #32
 8005340:	d11d      	bne.n	800537e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d002      	beq.n	800534e <HAL_UART_Receive_DMA+0x26>
 8005348:	88fb      	ldrh	r3, [r7, #6]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e016      	b.n	8005380 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005358:	2b01      	cmp	r3, #1
 800535a:	d101      	bne.n	8005360 <HAL_UART_Receive_DMA+0x38>
 800535c:	2302      	movs	r3, #2
 800535e:	e00f      	b.n	8005380 <HAL_UART_Receive_DMA+0x58>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800536e:	88fb      	ldrh	r3, [r7, #6]
 8005370:	461a      	mov	r2, r3
 8005372:	68b9      	ldr	r1, [r7, #8]
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f000 fac5 	bl	8005904 <UART_Start_Receive_DMA>
 800537a:	4603      	mov	r3, r0
 800537c:	e000      	b.n	8005380 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800537e:	2302      	movs	r3, #2
  }
}
 8005380:	4618      	mov	r0, r3
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b08a      	sub	sp, #40	; 0x28
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	f003 030f 	and.w	r3, r3, #15
 80053b6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10d      	bne.n	80053da <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	f003 0320 	and.w	r3, r3, #32
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d008      	beq.n	80053da <HAL_UART_IRQHandler+0x52>
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	f003 0320 	and.w	r3, r3, #32
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 fbb9 	bl	8005b4a <UART_Receive_IT>
      return;
 80053d8:	e17c      	b.n	80056d4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f000 80b1 	beq.w	8005544 <HAL_UART_IRQHandler+0x1bc>
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d105      	bne.n	80053f8 <HAL_UART_IRQHandler+0x70>
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f000 80a6 	beq.w	8005544 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00a      	beq.n	8005418 <HAL_UART_IRQHandler+0x90>
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005408:	2b00      	cmp	r3, #0
 800540a:	d005      	beq.n	8005418 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005410:	f043 0201 	orr.w	r2, r3, #1
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	f003 0304 	and.w	r3, r3, #4
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00a      	beq.n	8005438 <HAL_UART_IRQHandler+0xb0>
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	2b00      	cmp	r3, #0
 800542a:	d005      	beq.n	8005438 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005430:	f043 0202 	orr.w	r2, r3, #2
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00a      	beq.n	8005458 <HAL_UART_IRQHandler+0xd0>
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	2b00      	cmp	r3, #0
 800544a:	d005      	beq.n	8005458 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005450:	f043 0204 	orr.w	r2, r3, #4
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	f003 0308 	and.w	r3, r3, #8
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00f      	beq.n	8005482 <HAL_UART_IRQHandler+0xfa>
 8005462:	6a3b      	ldr	r3, [r7, #32]
 8005464:	f003 0320 	and.w	r3, r3, #32
 8005468:	2b00      	cmp	r3, #0
 800546a:	d104      	bne.n	8005476 <HAL_UART_IRQHandler+0xee>
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d005      	beq.n	8005482 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	f043 0208 	orr.w	r2, r3, #8
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005486:	2b00      	cmp	r3, #0
 8005488:	f000 811f 	beq.w	80056ca <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548e:	f003 0320 	and.w	r3, r3, #32
 8005492:	2b00      	cmp	r3, #0
 8005494:	d007      	beq.n	80054a6 <HAL_UART_IRQHandler+0x11e>
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	f003 0320 	and.w	r3, r3, #32
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 fb52 	bl	8005b4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b0:	2b40      	cmp	r3, #64	; 0x40
 80054b2:	bf0c      	ite	eq
 80054b4:	2301      	moveq	r3, #1
 80054b6:	2300      	movne	r3, #0
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c0:	f003 0308 	and.w	r3, r3, #8
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d102      	bne.n	80054ce <HAL_UART_IRQHandler+0x146>
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d031      	beq.n	8005532 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 fa92 	bl	80059f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054de:	2b40      	cmp	r3, #64	; 0x40
 80054e0:	d123      	bne.n	800552a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	695a      	ldr	r2, [r3, #20]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054f0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d013      	beq.n	8005522 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fe:	4a77      	ldr	r2, [pc, #476]	; (80056dc <HAL_UART_IRQHandler+0x354>)
 8005500:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005506:	4618      	mov	r0, r3
 8005508:	f7fe f8b4 	bl	8003674 <HAL_DMA_Abort_IT>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d016      	beq.n	8005540 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800551c:	4610      	mov	r0, r2
 800551e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005520:	e00e      	b.n	8005540 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f8f0 	bl	8005708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005528:	e00a      	b.n	8005540 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f8ec 	bl	8005708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005530:	e006      	b.n	8005540 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f8e8 	bl	8005708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800553e:	e0c4      	b.n	80056ca <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005540:	bf00      	nop
    return;
 8005542:	e0c2      	b.n	80056ca <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005548:	2b01      	cmp	r3, #1
 800554a:	f040 80a2 	bne.w	8005692 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	f003 0310 	and.w	r3, r3, #16
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 809c 	beq.w	8005692 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800555a:	6a3b      	ldr	r3, [r7, #32]
 800555c:	f003 0310 	and.w	r3, r3, #16
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 8096 	beq.w	8005692 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005566:	2300      	movs	r3, #0
 8005568:	60fb      	str	r3, [r7, #12]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	60fb      	str	r3, [r7, #12]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	60fb      	str	r3, [r7, #12]
 800557a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005586:	2b40      	cmp	r3, #64	; 0x40
 8005588:	d14f      	bne.n	800562a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005594:	8a3b      	ldrh	r3, [r7, #16]
 8005596:	2b00      	cmp	r3, #0
 8005598:	f000 8099 	beq.w	80056ce <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055a0:	8a3a      	ldrh	r2, [r7, #16]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	f080 8093 	bcs.w	80056ce <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	8a3a      	ldrh	r2, [r7, #16]
 80055ac:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055b8:	d02b      	beq.n	8005612 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68da      	ldr	r2, [r3, #12]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055c8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	695a      	ldr	r2, [r3, #20]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0201 	bic.w	r2, r2, #1
 80055d8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	695a      	ldr	r2, [r3, #20]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055e8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2220      	movs	r2, #32
 80055ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68da      	ldr	r2, [r3, #12]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0210 	bic.w	r2, r2, #16
 8005606:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560c:	4618      	mov	r0, r3
 800560e:	f7fd ffc1 	bl	8003594 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800561a:	b29b      	uxth	r3, r3
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	b29b      	uxth	r3, r3
 8005620:	4619      	mov	r1, r3
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f87a 	bl	800571c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005628:	e051      	b.n	80056ce <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005632:	b29b      	uxth	r3, r3
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800563c:	b29b      	uxth	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d047      	beq.n	80056d2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8005642:	8a7b      	ldrh	r3, [r7, #18]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d044      	beq.n	80056d2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68da      	ldr	r2, [r3, #12]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005656:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	695a      	ldr	r2, [r3, #20]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f022 0201 	bic.w	r2, r2, #1
 8005666:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2220      	movs	r2, #32
 800566c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68da      	ldr	r2, [r3, #12]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 0210 	bic.w	r2, r2, #16
 8005684:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005686:	8a7b      	ldrh	r3, [r7, #18]
 8005688:	4619      	mov	r1, r3
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f846 	bl	800571c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005690:	e01f      	b.n	80056d2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005698:	2b00      	cmp	r3, #0
 800569a:	d008      	beq.n	80056ae <HAL_UART_IRQHandler+0x326>
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f9e7 	bl	8005a7a <UART_Transmit_IT>
    return;
 80056ac:	e012      	b.n	80056d4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80056ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00d      	beq.n	80056d4 <HAL_UART_IRQHandler+0x34c>
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d008      	beq.n	80056d4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 fa29 	bl	8005b1a <UART_EndTransmit_IT>
    return;
 80056c8:	e004      	b.n	80056d4 <HAL_UART_IRQHandler+0x34c>
    return;
 80056ca:	bf00      	nop
 80056cc:	e002      	b.n	80056d4 <HAL_UART_IRQHandler+0x34c>
      return;
 80056ce:	bf00      	nop
 80056d0:	e000      	b.n	80056d4 <HAL_UART_IRQHandler+0x34c>
      return;
 80056d2:	bf00      	nop
  }
}
 80056d4:	3728      	adds	r7, #40	; 0x28
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	08005a53 	.word	0x08005a53

080056e0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	460b      	mov	r3, r1
 8005726:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005740:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800574c:	2b00      	cmp	r3, #0
 800574e:	d113      	bne.n	8005778 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	695a      	ldr	r2, [r3, #20]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005764:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68da      	ldr	r2, [r3, #12]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005774:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005776:	e002      	b.n	800577e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f7fc fba7 	bl	8001ecc <HAL_UART_TxCpltCallback>
}
 800577e:	bf00      	nop
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b084      	sub	sp, #16
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005792:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f7ff ffa3 	bl	80056e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800579a:	bf00      	nop
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b084      	sub	sp, #16
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ae:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d12a      	bne.n	8005814 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68da      	ldr	r2, [r3, #12]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057d2:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	695a      	ldr	r2, [r3, #20]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 0201 	bic.w	r2, r2, #1
 80057e2:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	695a      	ldr	r2, [r3, #20]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057f2:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2220      	movs	r2, #32
 80057f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005800:	2b01      	cmp	r3, #1
 8005802:	d107      	bne.n	8005814 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68da      	ldr	r2, [r3, #12]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 0210 	bic.w	r2, r2, #16
 8005812:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005818:	2b01      	cmp	r3, #1
 800581a:	d106      	bne.n	800582a <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005820:	4619      	mov	r1, r3
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f7ff ff7a 	bl	800571c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005828:	e002      	b.n	8005830 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f7fc fb60 	bl	8001ef0 <HAL_UART_RxCpltCallback>
}
 8005830:	bf00      	nop
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005844:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584a:	2b01      	cmp	r3, #1
 800584c:	d108      	bne.n	8005860 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005852:	085b      	lsrs	r3, r3, #1
 8005854:	b29b      	uxth	r3, r3
 8005856:	4619      	mov	r1, r3
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f7ff ff5f 	bl	800571c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800585e:	e002      	b.n	8005866 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f7ff ff47 	bl	80056f4 <HAL_UART_RxHalfCpltCallback>
}
 8005866:	bf00      	nop
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b084      	sub	sp, #16
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005876:	2300      	movs	r3, #0
 8005878:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800588a:	2b80      	cmp	r3, #128	; 0x80
 800588c:	bf0c      	ite	eq
 800588e:	2301      	moveq	r3, #1
 8005890:	2300      	movne	r3, #0
 8005892:	b2db      	uxtb	r3, r3
 8005894:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b21      	cmp	r3, #33	; 0x21
 80058a0:	d108      	bne.n	80058b4 <UART_DMAError+0x46>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d005      	beq.n	80058b4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2200      	movs	r2, #0
 80058ac:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80058ae:	68b8      	ldr	r0, [r7, #8]
 80058b0:	f000 f88c 	bl	80059cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058be:	2b40      	cmp	r3, #64	; 0x40
 80058c0:	bf0c      	ite	eq
 80058c2:	2301      	moveq	r3, #1
 80058c4:	2300      	movne	r3, #0
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b22      	cmp	r3, #34	; 0x22
 80058d4:	d108      	bne.n	80058e8 <UART_DMAError+0x7a>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d005      	beq.n	80058e8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	2200      	movs	r2, #0
 80058e0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80058e2:	68b8      	ldr	r0, [r7, #8]
 80058e4:	f000 f888 	bl	80059f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ec:	f043 0210 	orr.w	r2, r3, #16
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058f4:	68b8      	ldr	r0, [r7, #8]
 80058f6:	f7ff ff07 	bl	8005708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058fa:	bf00      	nop
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
	...

08005904 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	4613      	mov	r3, r2
 8005910:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	88fa      	ldrh	r2, [r7, #6]
 800591c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2222      	movs	r2, #34	; 0x22
 8005928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005930:	4a23      	ldr	r2, [pc, #140]	; (80059c0 <UART_Start_Receive_DMA+0xbc>)
 8005932:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005938:	4a22      	ldr	r2, [pc, #136]	; (80059c4 <UART_Start_Receive_DMA+0xc0>)
 800593a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005940:	4a21      	ldr	r2, [pc, #132]	; (80059c8 <UART_Start_Receive_DMA+0xc4>)
 8005942:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005948:	2200      	movs	r2, #0
 800594a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800594c:	f107 0308 	add.w	r3, r7, #8
 8005950:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3304      	adds	r3, #4
 800595c:	4619      	mov	r1, r3
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	88fb      	ldrh	r3, [r7, #6]
 8005964:	f7fd fdbe 	bl	80034e4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005968:	2300      	movs	r3, #0
 800596a:	613b      	str	r3, [r7, #16]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	613b      	str	r3, [r7, #16]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	613b      	str	r3, [r7, #16]
 800597c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68da      	ldr	r2, [r3, #12]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005994:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	695a      	ldr	r2, [r3, #20]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f042 0201 	orr.w	r2, r2, #1
 80059a4:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	695a      	ldr	r2, [r3, #20]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059b4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3718      	adds	r7, #24
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	080057a3 	.word	0x080057a3
 80059c4:	08005839 	.word	0x08005839
 80059c8:	0800586f 	.word	0x0800586f

080059cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68da      	ldr	r2, [r3, #12]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80059e2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2220      	movs	r2, #32
 80059e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a0e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	695a      	ldr	r2, [r3, #20]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 0201 	bic.w	r2, r2, #1
 8005a1e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d107      	bne.n	8005a38 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 0210 	bic.w	r2, r2, #16
 8005a36:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005a46:	bf00      	nop
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b084      	sub	sp, #16
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f7ff fe4b 	bl	8005708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a72:	bf00      	nop
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b085      	sub	sp, #20
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b21      	cmp	r3, #33	; 0x21
 8005a8c:	d13e      	bne.n	8005b0c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a96:	d114      	bne.n	8005ac2 <UART_Transmit_IT+0x48>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d110      	bne.n	8005ac2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	881b      	ldrh	r3, [r3, #0]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ab4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	1c9a      	adds	r2, r3, #2
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	621a      	str	r2, [r3, #32]
 8005ac0:	e008      	b.n	8005ad4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	1c59      	adds	r1, r3, #1
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	6211      	str	r1, [r2, #32]
 8005acc:	781a      	ldrb	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	3b01      	subs	r3, #1
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d10f      	bne.n	8005b08 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68da      	ldr	r2, [r3, #12]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005af6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68da      	ldr	r2, [r3, #12]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b06:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	e000      	b.n	8005b0e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b0c:	2302      	movs	r3, #2
  }
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3714      	adds	r7, #20
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b082      	sub	sp, #8
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68da      	ldr	r2, [r3, #12]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b30:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2220      	movs	r2, #32
 8005b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7fc f9c6 	bl	8001ecc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b084      	sub	sp, #16
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b22      	cmp	r3, #34	; 0x22
 8005b5c:	f040 8087 	bne.w	8005c6e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b68:	d117      	bne.n	8005b9a <UART_Receive_IT+0x50>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d113      	bne.n	8005b9a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005b72:	2300      	movs	r3, #0
 8005b74:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b92:	1c9a      	adds	r2, r3, #2
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	629a      	str	r2, [r3, #40]	; 0x28
 8005b98:	e026      	b.n	8005be8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bac:	d007      	beq.n	8005bbe <UART_Receive_IT+0x74>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10a      	bne.n	8005bcc <UART_Receive_IT+0x82>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d106      	bne.n	8005bcc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	701a      	strb	r2, [r3, #0]
 8005bca:	e008      	b.n	8005bde <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be2:	1c5a      	adds	r2, r3, #1
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d136      	bne.n	8005c6a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68da      	ldr	r2, [r3, #12]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 0220 	bic.w	r2, r2, #32
 8005c0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	695a      	ldr	r2, [r3, #20]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 0201 	bic.w	r2, r2, #1
 8005c2a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d10e      	bne.n	8005c5a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68da      	ldr	r2, [r3, #12]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 0210 	bic.w	r2, r2, #16
 8005c4a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c50:	4619      	mov	r1, r3
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7ff fd62 	bl	800571c <HAL_UARTEx_RxEventCallback>
 8005c58:	e002      	b.n	8005c60 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f7fc f948 	bl	8001ef0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	e002      	b.n	8005c70 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	e000      	b.n	8005c70 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005c6e:	2302      	movs	r3, #2
  }
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c7c:	b09f      	sub	sp, #124	; 0x7c
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c8e:	68d9      	ldr	r1, [r3, #12]
 8005c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	ea40 0301 	orr.w	r3, r0, r1
 8005c98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c9c:	689a      	ldr	r2, [r3, #8]
 8005c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005cbc:	f021 010c 	bic.w	r1, r1, #12
 8005cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cc6:	430b      	orrs	r3, r1
 8005cc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd6:	6999      	ldr	r1, [r3, #24]
 8005cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	ea40 0301 	orr.w	r3, r0, r1
 8005ce0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	4bc5      	ldr	r3, [pc, #788]	; (8005ffc <UART_SetConfig+0x384>)
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d004      	beq.n	8005cf6 <UART_SetConfig+0x7e>
 8005cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	4bc3      	ldr	r3, [pc, #780]	; (8006000 <UART_SetConfig+0x388>)
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d103      	bne.n	8005cfe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005cf6:	f7fe fdb1 	bl	800485c <HAL_RCC_GetPCLK2Freq>
 8005cfa:	6778      	str	r0, [r7, #116]	; 0x74
 8005cfc:	e002      	b.n	8005d04 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cfe:	f7fe fd99 	bl	8004834 <HAL_RCC_GetPCLK1Freq>
 8005d02:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d06:	69db      	ldr	r3, [r3, #28]
 8005d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d0c:	f040 80b6 	bne.w	8005e7c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d12:	461c      	mov	r4, r3
 8005d14:	f04f 0500 	mov.w	r5, #0
 8005d18:	4622      	mov	r2, r4
 8005d1a:	462b      	mov	r3, r5
 8005d1c:	1891      	adds	r1, r2, r2
 8005d1e:	6439      	str	r1, [r7, #64]	; 0x40
 8005d20:	415b      	adcs	r3, r3
 8005d22:	647b      	str	r3, [r7, #68]	; 0x44
 8005d24:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d28:	1912      	adds	r2, r2, r4
 8005d2a:	eb45 0303 	adc.w	r3, r5, r3
 8005d2e:	f04f 0000 	mov.w	r0, #0
 8005d32:	f04f 0100 	mov.w	r1, #0
 8005d36:	00d9      	lsls	r1, r3, #3
 8005d38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d3c:	00d0      	lsls	r0, r2, #3
 8005d3e:	4602      	mov	r2, r0
 8005d40:	460b      	mov	r3, r1
 8005d42:	1911      	adds	r1, r2, r4
 8005d44:	6639      	str	r1, [r7, #96]	; 0x60
 8005d46:	416b      	adcs	r3, r5
 8005d48:	667b      	str	r3, [r7, #100]	; 0x64
 8005d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	f04f 0300 	mov.w	r3, #0
 8005d54:	1891      	adds	r1, r2, r2
 8005d56:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d58:	415b      	adcs	r3, r3
 8005d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d60:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005d64:	f7fa fa4a 	bl	80001fc <__aeabi_uldivmod>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4ba5      	ldr	r3, [pc, #660]	; (8006004 <UART_SetConfig+0x38c>)
 8005d6e:	fba3 2302 	umull	r2, r3, r3, r2
 8005d72:	095b      	lsrs	r3, r3, #5
 8005d74:	011e      	lsls	r6, r3, #4
 8005d76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d78:	461c      	mov	r4, r3
 8005d7a:	f04f 0500 	mov.w	r5, #0
 8005d7e:	4622      	mov	r2, r4
 8005d80:	462b      	mov	r3, r5
 8005d82:	1891      	adds	r1, r2, r2
 8005d84:	6339      	str	r1, [r7, #48]	; 0x30
 8005d86:	415b      	adcs	r3, r3
 8005d88:	637b      	str	r3, [r7, #52]	; 0x34
 8005d8a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005d8e:	1912      	adds	r2, r2, r4
 8005d90:	eb45 0303 	adc.w	r3, r5, r3
 8005d94:	f04f 0000 	mov.w	r0, #0
 8005d98:	f04f 0100 	mov.w	r1, #0
 8005d9c:	00d9      	lsls	r1, r3, #3
 8005d9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005da2:	00d0      	lsls	r0, r2, #3
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	1911      	adds	r1, r2, r4
 8005daa:	65b9      	str	r1, [r7, #88]	; 0x58
 8005dac:	416b      	adcs	r3, r5
 8005dae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	461a      	mov	r2, r3
 8005db6:	f04f 0300 	mov.w	r3, #0
 8005dba:	1891      	adds	r1, r2, r2
 8005dbc:	62b9      	str	r1, [r7, #40]	; 0x28
 8005dbe:	415b      	adcs	r3, r3
 8005dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005dc6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005dca:	f7fa fa17 	bl	80001fc <__aeabi_uldivmod>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	4b8c      	ldr	r3, [pc, #560]	; (8006004 <UART_SetConfig+0x38c>)
 8005dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8005dd8:	095b      	lsrs	r3, r3, #5
 8005dda:	2164      	movs	r1, #100	; 0x64
 8005ddc:	fb01 f303 	mul.w	r3, r1, r3
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	3332      	adds	r3, #50	; 0x32
 8005de6:	4a87      	ldr	r2, [pc, #540]	; (8006004 <UART_SetConfig+0x38c>)
 8005de8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dec:	095b      	lsrs	r3, r3, #5
 8005dee:	005b      	lsls	r3, r3, #1
 8005df0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005df4:	441e      	add	r6, r3
 8005df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f04f 0100 	mov.w	r1, #0
 8005dfe:	4602      	mov	r2, r0
 8005e00:	460b      	mov	r3, r1
 8005e02:	1894      	adds	r4, r2, r2
 8005e04:	623c      	str	r4, [r7, #32]
 8005e06:	415b      	adcs	r3, r3
 8005e08:	627b      	str	r3, [r7, #36]	; 0x24
 8005e0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e0e:	1812      	adds	r2, r2, r0
 8005e10:	eb41 0303 	adc.w	r3, r1, r3
 8005e14:	f04f 0400 	mov.w	r4, #0
 8005e18:	f04f 0500 	mov.w	r5, #0
 8005e1c:	00dd      	lsls	r5, r3, #3
 8005e1e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005e22:	00d4      	lsls	r4, r2, #3
 8005e24:	4622      	mov	r2, r4
 8005e26:	462b      	mov	r3, r5
 8005e28:	1814      	adds	r4, r2, r0
 8005e2a:	653c      	str	r4, [r7, #80]	; 0x50
 8005e2c:	414b      	adcs	r3, r1
 8005e2e:	657b      	str	r3, [r7, #84]	; 0x54
 8005e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	461a      	mov	r2, r3
 8005e36:	f04f 0300 	mov.w	r3, #0
 8005e3a:	1891      	adds	r1, r2, r2
 8005e3c:	61b9      	str	r1, [r7, #24]
 8005e3e:	415b      	adcs	r3, r3
 8005e40:	61fb      	str	r3, [r7, #28]
 8005e42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e46:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005e4a:	f7fa f9d7 	bl	80001fc <__aeabi_uldivmod>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	460b      	mov	r3, r1
 8005e52:	4b6c      	ldr	r3, [pc, #432]	; (8006004 <UART_SetConfig+0x38c>)
 8005e54:	fba3 1302 	umull	r1, r3, r3, r2
 8005e58:	095b      	lsrs	r3, r3, #5
 8005e5a:	2164      	movs	r1, #100	; 0x64
 8005e5c:	fb01 f303 	mul.w	r3, r1, r3
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	00db      	lsls	r3, r3, #3
 8005e64:	3332      	adds	r3, #50	; 0x32
 8005e66:	4a67      	ldr	r2, [pc, #412]	; (8006004 <UART_SetConfig+0x38c>)
 8005e68:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6c:	095b      	lsrs	r3, r3, #5
 8005e6e:	f003 0207 	and.w	r2, r3, #7
 8005e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4432      	add	r2, r6
 8005e78:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e7a:	e0b9      	b.n	8005ff0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e7e:	461c      	mov	r4, r3
 8005e80:	f04f 0500 	mov.w	r5, #0
 8005e84:	4622      	mov	r2, r4
 8005e86:	462b      	mov	r3, r5
 8005e88:	1891      	adds	r1, r2, r2
 8005e8a:	6139      	str	r1, [r7, #16]
 8005e8c:	415b      	adcs	r3, r3
 8005e8e:	617b      	str	r3, [r7, #20]
 8005e90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005e94:	1912      	adds	r2, r2, r4
 8005e96:	eb45 0303 	adc.w	r3, r5, r3
 8005e9a:	f04f 0000 	mov.w	r0, #0
 8005e9e:	f04f 0100 	mov.w	r1, #0
 8005ea2:	00d9      	lsls	r1, r3, #3
 8005ea4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ea8:	00d0      	lsls	r0, r2, #3
 8005eaa:	4602      	mov	r2, r0
 8005eac:	460b      	mov	r3, r1
 8005eae:	eb12 0804 	adds.w	r8, r2, r4
 8005eb2:	eb43 0905 	adc.w	r9, r3, r5
 8005eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f04f 0100 	mov.w	r1, #0
 8005ec0:	f04f 0200 	mov.w	r2, #0
 8005ec4:	f04f 0300 	mov.w	r3, #0
 8005ec8:	008b      	lsls	r3, r1, #2
 8005eca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ece:	0082      	lsls	r2, r0, #2
 8005ed0:	4640      	mov	r0, r8
 8005ed2:	4649      	mov	r1, r9
 8005ed4:	f7fa f992 	bl	80001fc <__aeabi_uldivmod>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	460b      	mov	r3, r1
 8005edc:	4b49      	ldr	r3, [pc, #292]	; (8006004 <UART_SetConfig+0x38c>)
 8005ede:	fba3 2302 	umull	r2, r3, r3, r2
 8005ee2:	095b      	lsrs	r3, r3, #5
 8005ee4:	011e      	lsls	r6, r3, #4
 8005ee6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f04f 0100 	mov.w	r1, #0
 8005eee:	4602      	mov	r2, r0
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	1894      	adds	r4, r2, r2
 8005ef4:	60bc      	str	r4, [r7, #8]
 8005ef6:	415b      	adcs	r3, r3
 8005ef8:	60fb      	str	r3, [r7, #12]
 8005efa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005efe:	1812      	adds	r2, r2, r0
 8005f00:	eb41 0303 	adc.w	r3, r1, r3
 8005f04:	f04f 0400 	mov.w	r4, #0
 8005f08:	f04f 0500 	mov.w	r5, #0
 8005f0c:	00dd      	lsls	r5, r3, #3
 8005f0e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f12:	00d4      	lsls	r4, r2, #3
 8005f14:	4622      	mov	r2, r4
 8005f16:	462b      	mov	r3, r5
 8005f18:	1814      	adds	r4, r2, r0
 8005f1a:	64bc      	str	r4, [r7, #72]	; 0x48
 8005f1c:	414b      	adcs	r3, r1
 8005f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f04f 0100 	mov.w	r1, #0
 8005f2a:	f04f 0200 	mov.w	r2, #0
 8005f2e:	f04f 0300 	mov.w	r3, #0
 8005f32:	008b      	lsls	r3, r1, #2
 8005f34:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f38:	0082      	lsls	r2, r0, #2
 8005f3a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005f3e:	f7fa f95d 	bl	80001fc <__aeabi_uldivmod>
 8005f42:	4602      	mov	r2, r0
 8005f44:	460b      	mov	r3, r1
 8005f46:	4b2f      	ldr	r3, [pc, #188]	; (8006004 <UART_SetConfig+0x38c>)
 8005f48:	fba3 1302 	umull	r1, r3, r3, r2
 8005f4c:	095b      	lsrs	r3, r3, #5
 8005f4e:	2164      	movs	r1, #100	; 0x64
 8005f50:	fb01 f303 	mul.w	r3, r1, r3
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	011b      	lsls	r3, r3, #4
 8005f58:	3332      	adds	r3, #50	; 0x32
 8005f5a:	4a2a      	ldr	r2, [pc, #168]	; (8006004 <UART_SetConfig+0x38c>)
 8005f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f60:	095b      	lsrs	r3, r3, #5
 8005f62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f66:	441e      	add	r6, r3
 8005f68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f04f 0100 	mov.w	r1, #0
 8005f70:	4602      	mov	r2, r0
 8005f72:	460b      	mov	r3, r1
 8005f74:	1894      	adds	r4, r2, r2
 8005f76:	603c      	str	r4, [r7, #0]
 8005f78:	415b      	adcs	r3, r3
 8005f7a:	607b      	str	r3, [r7, #4]
 8005f7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f80:	1812      	adds	r2, r2, r0
 8005f82:	eb41 0303 	adc.w	r3, r1, r3
 8005f86:	f04f 0400 	mov.w	r4, #0
 8005f8a:	f04f 0500 	mov.w	r5, #0
 8005f8e:	00dd      	lsls	r5, r3, #3
 8005f90:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f94:	00d4      	lsls	r4, r2, #3
 8005f96:	4622      	mov	r2, r4
 8005f98:	462b      	mov	r3, r5
 8005f9a:	eb12 0a00 	adds.w	sl, r2, r0
 8005f9e:	eb43 0b01 	adc.w	fp, r3, r1
 8005fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f04f 0100 	mov.w	r1, #0
 8005fac:	f04f 0200 	mov.w	r2, #0
 8005fb0:	f04f 0300 	mov.w	r3, #0
 8005fb4:	008b      	lsls	r3, r1, #2
 8005fb6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005fba:	0082      	lsls	r2, r0, #2
 8005fbc:	4650      	mov	r0, sl
 8005fbe:	4659      	mov	r1, fp
 8005fc0:	f7fa f91c 	bl	80001fc <__aeabi_uldivmod>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	4b0e      	ldr	r3, [pc, #56]	; (8006004 <UART_SetConfig+0x38c>)
 8005fca:	fba3 1302 	umull	r1, r3, r3, r2
 8005fce:	095b      	lsrs	r3, r3, #5
 8005fd0:	2164      	movs	r1, #100	; 0x64
 8005fd2:	fb01 f303 	mul.w	r3, r1, r3
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	011b      	lsls	r3, r3, #4
 8005fda:	3332      	adds	r3, #50	; 0x32
 8005fdc:	4a09      	ldr	r2, [pc, #36]	; (8006004 <UART_SetConfig+0x38c>)
 8005fde:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe2:	095b      	lsrs	r3, r3, #5
 8005fe4:	f003 020f 	and.w	r2, r3, #15
 8005fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4432      	add	r2, r6
 8005fee:	609a      	str	r2, [r3, #8]
}
 8005ff0:	bf00      	nop
 8005ff2:	377c      	adds	r7, #124	; 0x7c
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ffa:	bf00      	nop
 8005ffc:	40011000 	.word	0x40011000
 8006000:	40011400 	.word	0x40011400
 8006004:	51eb851f 	.word	0x51eb851f

08006008 <__cxa_pure_virtual>:
 8006008:	b508      	push	{r3, lr}
 800600a:	f000 f80d 	bl	8006028 <_ZSt9terminatev>

0800600e <_ZN10__cxxabiv111__terminateEPFvvE>:
 800600e:	b508      	push	{r3, lr}
 8006010:	4780      	blx	r0
 8006012:	f000 f80e 	bl	8006032 <abort>
	...

08006018 <_ZSt13get_terminatev>:
 8006018:	4b02      	ldr	r3, [pc, #8]	; (8006024 <_ZSt13get_terminatev+0xc>)
 800601a:	6818      	ldr	r0, [r3, #0]
 800601c:	f3bf 8f5b 	dmb	ish
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	20000010 	.word	0x20000010

08006028 <_ZSt9terminatev>:
 8006028:	b508      	push	{r3, lr}
 800602a:	f7ff fff5 	bl	8006018 <_ZSt13get_terminatev>
 800602e:	f7ff ffee 	bl	800600e <_ZN10__cxxabiv111__terminateEPFvvE>

08006032 <abort>:
 8006032:	b508      	push	{r3, lr}
 8006034:	2006      	movs	r0, #6
 8006036:	f000 f873 	bl	8006120 <raise>
 800603a:	2001      	movs	r0, #1
 800603c:	f7fc ff80 	bl	8002f40 <_exit>

08006040 <__errno>:
 8006040:	4b01      	ldr	r3, [pc, #4]	; (8006048 <__errno+0x8>)
 8006042:	6818      	ldr	r0, [r3, #0]
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	20000014 	.word	0x20000014

0800604c <__libc_init_array>:
 800604c:	b570      	push	{r4, r5, r6, lr}
 800604e:	4d0d      	ldr	r5, [pc, #52]	; (8006084 <__libc_init_array+0x38>)
 8006050:	4c0d      	ldr	r4, [pc, #52]	; (8006088 <__libc_init_array+0x3c>)
 8006052:	1b64      	subs	r4, r4, r5
 8006054:	10a4      	asrs	r4, r4, #2
 8006056:	2600      	movs	r6, #0
 8006058:	42a6      	cmp	r6, r4
 800605a:	d109      	bne.n	8006070 <__libc_init_array+0x24>
 800605c:	4d0b      	ldr	r5, [pc, #44]	; (800608c <__libc_init_array+0x40>)
 800605e:	4c0c      	ldr	r4, [pc, #48]	; (8006090 <__libc_init_array+0x44>)
 8006060:	f000 f970 	bl	8006344 <_init>
 8006064:	1b64      	subs	r4, r4, r5
 8006066:	10a4      	asrs	r4, r4, #2
 8006068:	2600      	movs	r6, #0
 800606a:	42a6      	cmp	r6, r4
 800606c:	d105      	bne.n	800607a <__libc_init_array+0x2e>
 800606e:	bd70      	pop	{r4, r5, r6, pc}
 8006070:	f855 3b04 	ldr.w	r3, [r5], #4
 8006074:	4798      	blx	r3
 8006076:	3601      	adds	r6, #1
 8006078:	e7ee      	b.n	8006058 <__libc_init_array+0xc>
 800607a:	f855 3b04 	ldr.w	r3, [r5], #4
 800607e:	4798      	blx	r3
 8006080:	3601      	adds	r6, #1
 8006082:	e7f2      	b.n	800606a <__libc_init_array+0x1e>
 8006084:	080066a8 	.word	0x080066a8
 8006088:	080066a8 	.word	0x080066a8
 800608c:	080066a8 	.word	0x080066a8
 8006090:	080066b0 	.word	0x080066b0

08006094 <memcpy>:
 8006094:	440a      	add	r2, r1
 8006096:	4291      	cmp	r1, r2
 8006098:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800609c:	d100      	bne.n	80060a0 <memcpy+0xc>
 800609e:	4770      	bx	lr
 80060a0:	b510      	push	{r4, lr}
 80060a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060aa:	4291      	cmp	r1, r2
 80060ac:	d1f9      	bne.n	80060a2 <memcpy+0xe>
 80060ae:	bd10      	pop	{r4, pc}

080060b0 <memset>:
 80060b0:	4402      	add	r2, r0
 80060b2:	4603      	mov	r3, r0
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d100      	bne.n	80060ba <memset+0xa>
 80060b8:	4770      	bx	lr
 80060ba:	f803 1b01 	strb.w	r1, [r3], #1
 80060be:	e7f9      	b.n	80060b4 <memset+0x4>

080060c0 <realloc>:
 80060c0:	4b02      	ldr	r3, [pc, #8]	; (80060cc <realloc+0xc>)
 80060c2:	460a      	mov	r2, r1
 80060c4:	4601      	mov	r1, r0
 80060c6:	6818      	ldr	r0, [r3, #0]
 80060c8:	f000 b8a0 	b.w	800620c <_realloc_r>
 80060cc:	20000014 	.word	0x20000014

080060d0 <_raise_r>:
 80060d0:	291f      	cmp	r1, #31
 80060d2:	b538      	push	{r3, r4, r5, lr}
 80060d4:	4604      	mov	r4, r0
 80060d6:	460d      	mov	r5, r1
 80060d8:	d904      	bls.n	80060e4 <_raise_r+0x14>
 80060da:	2316      	movs	r3, #22
 80060dc:	6003      	str	r3, [r0, #0]
 80060de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060e2:	bd38      	pop	{r3, r4, r5, pc}
 80060e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80060e6:	b112      	cbz	r2, 80060ee <_raise_r+0x1e>
 80060e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80060ec:	b94b      	cbnz	r3, 8006102 <_raise_r+0x32>
 80060ee:	4620      	mov	r0, r4
 80060f0:	f000 f830 	bl	8006154 <_getpid_r>
 80060f4:	462a      	mov	r2, r5
 80060f6:	4601      	mov	r1, r0
 80060f8:	4620      	mov	r0, r4
 80060fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060fe:	f000 b817 	b.w	8006130 <_kill_r>
 8006102:	2b01      	cmp	r3, #1
 8006104:	d00a      	beq.n	800611c <_raise_r+0x4c>
 8006106:	1c59      	adds	r1, r3, #1
 8006108:	d103      	bne.n	8006112 <_raise_r+0x42>
 800610a:	2316      	movs	r3, #22
 800610c:	6003      	str	r3, [r0, #0]
 800610e:	2001      	movs	r0, #1
 8006110:	e7e7      	b.n	80060e2 <_raise_r+0x12>
 8006112:	2400      	movs	r4, #0
 8006114:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006118:	4628      	mov	r0, r5
 800611a:	4798      	blx	r3
 800611c:	2000      	movs	r0, #0
 800611e:	e7e0      	b.n	80060e2 <_raise_r+0x12>

08006120 <raise>:
 8006120:	4b02      	ldr	r3, [pc, #8]	; (800612c <raise+0xc>)
 8006122:	4601      	mov	r1, r0
 8006124:	6818      	ldr	r0, [r3, #0]
 8006126:	f7ff bfd3 	b.w	80060d0 <_raise_r>
 800612a:	bf00      	nop
 800612c:	20000014 	.word	0x20000014

08006130 <_kill_r>:
 8006130:	b538      	push	{r3, r4, r5, lr}
 8006132:	4d07      	ldr	r5, [pc, #28]	; (8006150 <_kill_r+0x20>)
 8006134:	2300      	movs	r3, #0
 8006136:	4604      	mov	r4, r0
 8006138:	4608      	mov	r0, r1
 800613a:	4611      	mov	r1, r2
 800613c:	602b      	str	r3, [r5, #0]
 800613e:	f7fc feef 	bl	8002f20 <_kill>
 8006142:	1c43      	adds	r3, r0, #1
 8006144:	d102      	bne.n	800614c <_kill_r+0x1c>
 8006146:	682b      	ldr	r3, [r5, #0]
 8006148:	b103      	cbz	r3, 800614c <_kill_r+0x1c>
 800614a:	6023      	str	r3, [r4, #0]
 800614c:	bd38      	pop	{r3, r4, r5, pc}
 800614e:	bf00      	nop
 8006150:	200009ec 	.word	0x200009ec

08006154 <_getpid_r>:
 8006154:	f7fc bedc 	b.w	8002f10 <_getpid>

08006158 <_malloc_r>:
 8006158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800615a:	1ccd      	adds	r5, r1, #3
 800615c:	f025 0503 	bic.w	r5, r5, #3
 8006160:	3508      	adds	r5, #8
 8006162:	2d0c      	cmp	r5, #12
 8006164:	bf38      	it	cc
 8006166:	250c      	movcc	r5, #12
 8006168:	2d00      	cmp	r5, #0
 800616a:	4606      	mov	r6, r0
 800616c:	db01      	blt.n	8006172 <_malloc_r+0x1a>
 800616e:	42a9      	cmp	r1, r5
 8006170:	d903      	bls.n	800617a <_malloc_r+0x22>
 8006172:	230c      	movs	r3, #12
 8006174:	6033      	str	r3, [r6, #0]
 8006176:	2000      	movs	r0, #0
 8006178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800617a:	f000 f87d 	bl	8006278 <__malloc_lock>
 800617e:	4921      	ldr	r1, [pc, #132]	; (8006204 <_malloc_r+0xac>)
 8006180:	680a      	ldr	r2, [r1, #0]
 8006182:	4614      	mov	r4, r2
 8006184:	b99c      	cbnz	r4, 80061ae <_malloc_r+0x56>
 8006186:	4f20      	ldr	r7, [pc, #128]	; (8006208 <_malloc_r+0xb0>)
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	b923      	cbnz	r3, 8006196 <_malloc_r+0x3e>
 800618c:	4621      	mov	r1, r4
 800618e:	4630      	mov	r0, r6
 8006190:	f000 f862 	bl	8006258 <_sbrk_r>
 8006194:	6038      	str	r0, [r7, #0]
 8006196:	4629      	mov	r1, r5
 8006198:	4630      	mov	r0, r6
 800619a:	f000 f85d 	bl	8006258 <_sbrk_r>
 800619e:	1c43      	adds	r3, r0, #1
 80061a0:	d123      	bne.n	80061ea <_malloc_r+0x92>
 80061a2:	230c      	movs	r3, #12
 80061a4:	6033      	str	r3, [r6, #0]
 80061a6:	4630      	mov	r0, r6
 80061a8:	f000 f86c 	bl	8006284 <__malloc_unlock>
 80061ac:	e7e3      	b.n	8006176 <_malloc_r+0x1e>
 80061ae:	6823      	ldr	r3, [r4, #0]
 80061b0:	1b5b      	subs	r3, r3, r5
 80061b2:	d417      	bmi.n	80061e4 <_malloc_r+0x8c>
 80061b4:	2b0b      	cmp	r3, #11
 80061b6:	d903      	bls.n	80061c0 <_malloc_r+0x68>
 80061b8:	6023      	str	r3, [r4, #0]
 80061ba:	441c      	add	r4, r3
 80061bc:	6025      	str	r5, [r4, #0]
 80061be:	e004      	b.n	80061ca <_malloc_r+0x72>
 80061c0:	6863      	ldr	r3, [r4, #4]
 80061c2:	42a2      	cmp	r2, r4
 80061c4:	bf0c      	ite	eq
 80061c6:	600b      	streq	r3, [r1, #0]
 80061c8:	6053      	strne	r3, [r2, #4]
 80061ca:	4630      	mov	r0, r6
 80061cc:	f000 f85a 	bl	8006284 <__malloc_unlock>
 80061d0:	f104 000b 	add.w	r0, r4, #11
 80061d4:	1d23      	adds	r3, r4, #4
 80061d6:	f020 0007 	bic.w	r0, r0, #7
 80061da:	1ac2      	subs	r2, r0, r3
 80061dc:	d0cc      	beq.n	8006178 <_malloc_r+0x20>
 80061de:	1a1b      	subs	r3, r3, r0
 80061e0:	50a3      	str	r3, [r4, r2]
 80061e2:	e7c9      	b.n	8006178 <_malloc_r+0x20>
 80061e4:	4622      	mov	r2, r4
 80061e6:	6864      	ldr	r4, [r4, #4]
 80061e8:	e7cc      	b.n	8006184 <_malloc_r+0x2c>
 80061ea:	1cc4      	adds	r4, r0, #3
 80061ec:	f024 0403 	bic.w	r4, r4, #3
 80061f0:	42a0      	cmp	r0, r4
 80061f2:	d0e3      	beq.n	80061bc <_malloc_r+0x64>
 80061f4:	1a21      	subs	r1, r4, r0
 80061f6:	4630      	mov	r0, r6
 80061f8:	f000 f82e 	bl	8006258 <_sbrk_r>
 80061fc:	3001      	adds	r0, #1
 80061fe:	d1dd      	bne.n	80061bc <_malloc_r+0x64>
 8006200:	e7cf      	b.n	80061a2 <_malloc_r+0x4a>
 8006202:	bf00      	nop
 8006204:	20000894 	.word	0x20000894
 8006208:	20000898 	.word	0x20000898

0800620c <_realloc_r>:
 800620c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800620e:	4607      	mov	r7, r0
 8006210:	4614      	mov	r4, r2
 8006212:	460e      	mov	r6, r1
 8006214:	b921      	cbnz	r1, 8006220 <_realloc_r+0x14>
 8006216:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800621a:	4611      	mov	r1, r2
 800621c:	f7ff bf9c 	b.w	8006158 <_malloc_r>
 8006220:	b922      	cbnz	r2, 800622c <_realloc_r+0x20>
 8006222:	f000 f835 	bl	8006290 <_free_r>
 8006226:	4625      	mov	r5, r4
 8006228:	4628      	mov	r0, r5
 800622a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800622c:	f000 f880 	bl	8006330 <_malloc_usable_size_r>
 8006230:	42a0      	cmp	r0, r4
 8006232:	d20f      	bcs.n	8006254 <_realloc_r+0x48>
 8006234:	4621      	mov	r1, r4
 8006236:	4638      	mov	r0, r7
 8006238:	f7ff ff8e 	bl	8006158 <_malloc_r>
 800623c:	4605      	mov	r5, r0
 800623e:	2800      	cmp	r0, #0
 8006240:	d0f2      	beq.n	8006228 <_realloc_r+0x1c>
 8006242:	4631      	mov	r1, r6
 8006244:	4622      	mov	r2, r4
 8006246:	f7ff ff25 	bl	8006094 <memcpy>
 800624a:	4631      	mov	r1, r6
 800624c:	4638      	mov	r0, r7
 800624e:	f000 f81f 	bl	8006290 <_free_r>
 8006252:	e7e9      	b.n	8006228 <_realloc_r+0x1c>
 8006254:	4635      	mov	r5, r6
 8006256:	e7e7      	b.n	8006228 <_realloc_r+0x1c>

08006258 <_sbrk_r>:
 8006258:	b538      	push	{r3, r4, r5, lr}
 800625a:	4d06      	ldr	r5, [pc, #24]	; (8006274 <_sbrk_r+0x1c>)
 800625c:	2300      	movs	r3, #0
 800625e:	4604      	mov	r4, r0
 8006260:	4608      	mov	r0, r1
 8006262:	602b      	str	r3, [r5, #0]
 8006264:	f7fc fe76 	bl	8002f54 <_sbrk>
 8006268:	1c43      	adds	r3, r0, #1
 800626a:	d102      	bne.n	8006272 <_sbrk_r+0x1a>
 800626c:	682b      	ldr	r3, [r5, #0]
 800626e:	b103      	cbz	r3, 8006272 <_sbrk_r+0x1a>
 8006270:	6023      	str	r3, [r4, #0]
 8006272:	bd38      	pop	{r3, r4, r5, pc}
 8006274:	200009ec 	.word	0x200009ec

08006278 <__malloc_lock>:
 8006278:	4801      	ldr	r0, [pc, #4]	; (8006280 <__malloc_lock+0x8>)
 800627a:	f000 b861 	b.w	8006340 <__retarget_lock_acquire_recursive>
 800627e:	bf00      	nop
 8006280:	200009f4 	.word	0x200009f4

08006284 <__malloc_unlock>:
 8006284:	4801      	ldr	r0, [pc, #4]	; (800628c <__malloc_unlock+0x8>)
 8006286:	f000 b85c 	b.w	8006342 <__retarget_lock_release_recursive>
 800628a:	bf00      	nop
 800628c:	200009f4 	.word	0x200009f4

08006290 <_free_r>:
 8006290:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006292:	2900      	cmp	r1, #0
 8006294:	d048      	beq.n	8006328 <_free_r+0x98>
 8006296:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800629a:	9001      	str	r0, [sp, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	f1a1 0404 	sub.w	r4, r1, #4
 80062a2:	bfb8      	it	lt
 80062a4:	18e4      	addlt	r4, r4, r3
 80062a6:	f7ff ffe7 	bl	8006278 <__malloc_lock>
 80062aa:	4a20      	ldr	r2, [pc, #128]	; (800632c <_free_r+0x9c>)
 80062ac:	9801      	ldr	r0, [sp, #4]
 80062ae:	6813      	ldr	r3, [r2, #0]
 80062b0:	4615      	mov	r5, r2
 80062b2:	b933      	cbnz	r3, 80062c2 <_free_r+0x32>
 80062b4:	6063      	str	r3, [r4, #4]
 80062b6:	6014      	str	r4, [r2, #0]
 80062b8:	b003      	add	sp, #12
 80062ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062be:	f7ff bfe1 	b.w	8006284 <__malloc_unlock>
 80062c2:	42a3      	cmp	r3, r4
 80062c4:	d90b      	bls.n	80062de <_free_r+0x4e>
 80062c6:	6821      	ldr	r1, [r4, #0]
 80062c8:	1862      	adds	r2, r4, r1
 80062ca:	4293      	cmp	r3, r2
 80062cc:	bf04      	itt	eq
 80062ce:	681a      	ldreq	r2, [r3, #0]
 80062d0:	685b      	ldreq	r3, [r3, #4]
 80062d2:	6063      	str	r3, [r4, #4]
 80062d4:	bf04      	itt	eq
 80062d6:	1852      	addeq	r2, r2, r1
 80062d8:	6022      	streq	r2, [r4, #0]
 80062da:	602c      	str	r4, [r5, #0]
 80062dc:	e7ec      	b.n	80062b8 <_free_r+0x28>
 80062de:	461a      	mov	r2, r3
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	b10b      	cbz	r3, 80062e8 <_free_r+0x58>
 80062e4:	42a3      	cmp	r3, r4
 80062e6:	d9fa      	bls.n	80062de <_free_r+0x4e>
 80062e8:	6811      	ldr	r1, [r2, #0]
 80062ea:	1855      	adds	r5, r2, r1
 80062ec:	42a5      	cmp	r5, r4
 80062ee:	d10b      	bne.n	8006308 <_free_r+0x78>
 80062f0:	6824      	ldr	r4, [r4, #0]
 80062f2:	4421      	add	r1, r4
 80062f4:	1854      	adds	r4, r2, r1
 80062f6:	42a3      	cmp	r3, r4
 80062f8:	6011      	str	r1, [r2, #0]
 80062fa:	d1dd      	bne.n	80062b8 <_free_r+0x28>
 80062fc:	681c      	ldr	r4, [r3, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	6053      	str	r3, [r2, #4]
 8006302:	4421      	add	r1, r4
 8006304:	6011      	str	r1, [r2, #0]
 8006306:	e7d7      	b.n	80062b8 <_free_r+0x28>
 8006308:	d902      	bls.n	8006310 <_free_r+0x80>
 800630a:	230c      	movs	r3, #12
 800630c:	6003      	str	r3, [r0, #0]
 800630e:	e7d3      	b.n	80062b8 <_free_r+0x28>
 8006310:	6825      	ldr	r5, [r4, #0]
 8006312:	1961      	adds	r1, r4, r5
 8006314:	428b      	cmp	r3, r1
 8006316:	bf04      	itt	eq
 8006318:	6819      	ldreq	r1, [r3, #0]
 800631a:	685b      	ldreq	r3, [r3, #4]
 800631c:	6063      	str	r3, [r4, #4]
 800631e:	bf04      	itt	eq
 8006320:	1949      	addeq	r1, r1, r5
 8006322:	6021      	streq	r1, [r4, #0]
 8006324:	6054      	str	r4, [r2, #4]
 8006326:	e7c7      	b.n	80062b8 <_free_r+0x28>
 8006328:	b003      	add	sp, #12
 800632a:	bd30      	pop	{r4, r5, pc}
 800632c:	20000894 	.word	0x20000894

08006330 <_malloc_usable_size_r>:
 8006330:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006334:	1f18      	subs	r0, r3, #4
 8006336:	2b00      	cmp	r3, #0
 8006338:	bfbc      	itt	lt
 800633a:	580b      	ldrlt	r3, [r1, r0]
 800633c:	18c0      	addlt	r0, r0, r3
 800633e:	4770      	bx	lr

08006340 <__retarget_lock_acquire_recursive>:
 8006340:	4770      	bx	lr

08006342 <__retarget_lock_release_recursive>:
 8006342:	4770      	bx	lr

08006344 <_init>:
 8006344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006346:	bf00      	nop
 8006348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800634a:	bc08      	pop	{r3}
 800634c:	469e      	mov	lr, r3
 800634e:	4770      	bx	lr

08006350 <_fini>:
 8006350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006352:	bf00      	nop
 8006354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006356:	bc08      	pop	{r3}
 8006358:	469e      	mov	lr, r3
 800635a:	4770      	bx	lr
